
Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800214  00800214  0000060c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b73  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d6  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ed  00000000  00000000  000033bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00003aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a23  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069b  00000000  00000000  0000473f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004dda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
   2:	00 00       	nop
   4:	dd c0       	rjmp	.+442    	; 0x1c0 <__vector_1>
   6:	00 00       	nop
   8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
   a:	00 00       	nop
   c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
   e:	00 00       	nop
  10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
  12:	00 00       	nop
  14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
  16:	00 00       	nop
  18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
  1e:	00 00       	nop
  20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
  26:	00 00       	nop
  28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
  2e:	00 00       	nop
  30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
  32:	00 00       	nop
  34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
  36:	00 00       	nop
  38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
  46:	00 00       	nop
  48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
  4e:	00 00       	nop
  50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
  56:	00 00       	nop
  58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
  5e:	00 00       	nop
  60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
  62:	00 00       	nop
  64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
  66:	00 00       	nop
  68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
  6e:	00 00       	nop
  70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
  72:	00 00       	nop
  74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
  76:	00 00       	nop
  78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
  7e:	00 00       	nop
  80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
  82:	00 00       	nop
  84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
  86:	00 00       	nop
  88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
  8e:	00 00       	nop
  90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
  92:	00 00       	nop
  94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
  96:	00 00       	nop
  98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
  be:	00 00       	nop
  c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
  da:	00 00       	nop
  dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
  de:	00 00       	nop
  e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	0b 01       	movw	r0, r22

000000e6 <__ctors_end>:
  e6:	12 01       	movw	r2, r4

000000e8 <__dtors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d1 e2       	ldi	r29, 0x21	; 33
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
  f8:	12 e0       	ldi	r17, 0x02	; 2
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b2 e0       	ldi	r27, 0x02	; 2
  fe:	e4 e6       	ldi	r30, 0x64	; 100
 100:	f5 e0       	ldi	r31, 0x05	; 5
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a4 31       	cpi	r26, 0x14	; 20
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	a4 e1       	ldi	r26, 0x14	; 20
 116:	b2 e0       	ldi	r27, 0x02	; 2
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	a9 32       	cpi	r26, 0x29	; 41
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	c3 e7       	ldi	r28, 0x73	; 115
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__do_global_ctors+0x14>
 12c:	21 97       	sbiw	r28, 0x01	; 1
 12e:	01 09       	sbc	r16, r1
 130:	80 2f       	mov	r24, r16
 132:	fe 01       	movw	r30, r28
 134:	cb d1       	rcall	.+918    	; 0x4cc <__tablejump2__>
 136:	c2 37       	cpi	r28, 0x72	; 114
 138:	d1 07       	cpc	r29, r17
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 07       	cpc	r16, r24
 13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xa>
 140:	13 d0       	rcall	.+38     	; 0x168 <main>
 142:	ff c1       	rjmp	.+1022   	; 0x542 <__do_global_dtors>

00000144 <__bad_interrupt>:
 144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <_Z13initInterupt0v>:
RecieverLamp Reciever;
UART uart_;

void initInterupt0()				// Int0 Gøres klar
{
	sei();
 146:	78 94       	sei
	EIMSK |= 0b00000001;
 148:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;
 14a:	e9 e6       	ldi	r30, 0x69	; 105
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <_Z7initADCv>:
	
}

void initADC()						// ADC bliver klar gjordt
{
	ADCSRA = 0b10000111;
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADMUX = 0b01000000;
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRB = 0b00000000;
 162:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 166:	08 95       	ret

00000168 <main>:
	
}

int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	UART uart;
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	5e d1       	rcall	.+700    	; 0x434 <_ZN4UARTC1Ev>
	
	DDRF = 0;
 178:	10 ba       	out	0x10, r1	; 16
	DDRD = 0;			//Sætter IO pins kan tilføjes i en funktion
 17a:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
	initInterupt0();
 180:	15 b8       	out	0x05, r1	; 5
	initADC();
 182:	e1 df       	rcall	.-62     	; 0x146 <_Z13initInterupt0v>
 184:	e8 df       	rcall	.-48     	; 0x156 <_Z7initADCv>
	
	
	
	uart.SendString("program starter \n");
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	72 e0       	ldi	r23, 0x02	; 2
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		if (Reciever.readStartBits() == 1)
 18e:	67 d1       	rcall	.+718    	; 0x45e <_ZN4UART10SendStringEPc>
 190:	85 e1       	ldi	r24, 0x15	; 21
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	bc d0       	rcall	.+376    	; 0x30e <_ZN12RecieverLamp13readStartBitsEv>
 196:	01 97       	sbiw	r24, 0x01	; 1
		{
			
			if (Reciever.readAdresseBits() == 1)
 198:	d9 f7       	brne	.-10     	; 0x190 <main+0x28>
 19a:	85 e1       	ldi	r24, 0x15	; 21
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	db d0       	rcall	.+438    	; 0x356 <_ZN12RecieverLamp15readAdresseBitsEv>
 1a0:	01 97       	sbiw	r24, 0x01	; 1
			{
				
				if (Reciever.readDataBits() == 1)
 1a2:	b1 f7       	brne	.-20     	; 0x190 <main+0x28>
 1a4:	85 e1       	ldi	r24, 0x15	; 21
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	fa d0       	rcall	.+500    	; 0x39e <_ZN12RecieverLamp12readDataBitsEv>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
				{
					if (Reciever.readStopBits() == 1)
 1ac:	89 f7       	brne	.-30     	; 0x190 <main+0x28>
 1ae:	85 e1       	ldi	r24, 0x15	; 21
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	19 d1       	rcall	.+562    	; 0x3e6 <_ZN12RecieverLamp12readStopBitsEv>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
					{
						Reciever.turnOnLight();
 1b6:	61 f7       	brne	.-40     	; 0x190 <main+0x28>
 1b8:	85 e1       	ldi	r24, 0x15	; 21
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	38 d1       	rcall	.+624    	; 0x42e <_ZN12RecieverLamp11turnOnLightEv>
 1be:	e8 cf       	rjmp	.-48     	; 0x190 <main+0x28>

000001c0 <__vector_1>:
	}
}


ISR(INT0_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	0b b6       	in	r0, 0x3b	; 59
 1cc:	0f 92       	push	r0
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	
	Reciever.setZeroCross(1);			// Bliver sat true hver gang der har været et cross
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	85 e1       	ldi	r24, 0x15	; 21
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	46 d0       	rcall	.+140    	; 0x27c <_ZN12RecieverLamp12setZeroCrossEi>
	
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <_GLOBAL__sub_I_Reciever>:

	
ISR(INT0_vect);
void initInterupt0();
void initADC();
RecieverLamp Reciever;
 216:	85 e1       	ldi	r24, 0x15	; 21
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	08 d0       	rcall	.+16     	; 0x22c <_ZN12RecieverLampC1Ev>
UART uart_;
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	09 c1       	rjmp	.+530    	; 0x434 <_ZN4UARTC1Ev>
 222:	08 95       	ret

00000224 <_GLOBAL__sub_D_Reciever>:

	
ISR(INT0_vect);
void initInterupt0();
void initADC();
RecieverLamp Reciever;
 224:	85 e1       	ldi	r24, 0x15	; 21
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	28 c0       	rjmp	.+80     	; 0x27a <_ZN12RecieverLampD1Ev>
 22a:	08 95       	ret

0000022c <_ZN12RecieverLampC1Ev>:
{
		return nyesteBit_;		
}
void RecieverLamp::setNyesteBit(int nyestebit)
{
		nyesteBit_ = nyestebit;
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	1f 92       	push	r1
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	fc 01       	movw	r30, r24
 238:	11 82       	std	Z+1, r1	; 0x01
 23a:	10 82       	st	Z, r1
 23c:	13 82       	std	Z+3, r1	; 0x03
 23e:	12 82       	std	Z+2, r1	; 0x02
 240:	17 86       	std	Z+15, r1	; 0x0f
 242:	16 86       	std	Z+14, r1	; 0x0e
 244:	11 8a       	std	Z+17, r1	; 0x11
 246:	10 8a       	std	Z+16, r1	; 0x10
 248:	15 82       	std	Z+5, r1	; 0x05
 24a:	14 82       	std	Z+4, r1	; 0x04
 24c:	8e e0       	ldi	r24, 0x0E	; 14
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	97 83       	std	Z+7, r25	; 0x07
 252:	86 83       	std	Z+6, r24	; 0x06
 254:	87 e0       	ldi	r24, 0x07	; 7
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	91 87       	std	Z+9, r25	; 0x09
 25a:	80 87       	std	Z+8, r24	; 0x08
 25c:	85 e1       	ldi	r24, 0x15	; 21
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	93 87       	std	Z+11, r25	; 0x0b
 262:	82 87       	std	Z+10, r24	; 0x0a
 264:	8a e2       	ldi	r24, 0x2A	; 42
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	95 87       	std	Z+13, r25	; 0x0d
 26a:	84 87       	std	Z+12, r24	; 0x0c
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	e1 d0       	rcall	.+450    	; 0x434 <_ZN4UARTC1Ev>
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <_ZN12RecieverLampD1Ev>:
 27a:	08 95       	ret

0000027c <_ZN12RecieverLamp12setZeroCrossEi>:
 27c:	fc 01       	movw	r30, r24
 27e:	71 83       	std	Z+1, r23	; 0x01
 280:	60 83       	st	Z, r22
 282:	08 95       	ret

00000284 <_ZN12RecieverLamp7readADCEv>:
	}
	
	return 1;
}

void RecieverLamp::readADC(){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	//PORTB = PINB ^ 0b10000000;
	
	//// timer
	TCNT0 = 201;
 28a:	89 ec       	ldi	r24, 0xC9	; 201
 28c:	86 bd       	out	0x26, r24	; 38
	TCCR0A |= 0b00000000; // starter timer
 28e:	84 b5       	in	r24, 0x24	; 36
 290:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0b00000101;
 292:	85 b5       	in	r24, 0x25	; 37
 294:	85 60       	ori	r24, 0x05	; 5
 296:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<0)) == 0)
 298:	a8 9b       	sbis	0x15, 0	; 21
 29a:	fe cf       	rjmp	.-4      	; 0x298 <_ZN12RecieverLamp7readADCEv+0x14>
	{}
	TCCR0B = 0b00000000; // slut timer
 29c:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	85 bb       	out	0x15, r24	; 21
	//// timer
	
	ADCSRA |= 0b01000000;
 2a2:	ea e7       	ldi	r30, 0x7A	; 122
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	80 83       	st	Z, r24
			
	while (ADCSRA & 0b01000000)
 2ac:	80 81       	ld	r24, Z
 2ae:	86 fd       	sbrc	r24, 6
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <_ZN12RecieverLamp7readADCEv+0x28>
	{}
	//PORTB = PINB ^ 0b10000000;
	
	ADCread_ = ADCW;
 2b2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 2b6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 2ba:	7f 87       	std	Y+15, r23	; 0x0f
 2bc:	6e 87       	std	Y+14, r22	; 0x0e
	uart_->SendInteger(ADCread_);
 2be:	8a 89       	ldd	r24, Y+18	; 0x12
 2c0:	9b 89       	ldd	r25, Y+19	; 0x13
 2c2:	e1 d0       	rcall	.+450    	; 0x486 <_ZN4UART11SendIntegerEi>
	uart_->SendString("\\");
 2c4:	62 e1       	ldi	r22, 0x12	; 18
 2c6:	72 e0       	ldi	r23, 0x02	; 2
 2c8:	8a 89       	ldd	r24, Y+18	; 0x12
 2ca:	9b 89       	ldd	r25, Y+19	; 0x13
 2cc:	c8 d0       	rcall	.+400    	; 0x45e <_ZN4UART10SendStringEPc>
	
	if ((ADCread_ > ADClastRead_) && (ADCread_> 5))
 2ce:	8e 85       	ldd	r24, Y+14	; 0x0e
 2d0:	9f 85       	ldd	r25, Y+15	; 0x0f
 2d2:	28 89       	ldd	r18, Y+16	; 0x10
 2d4:	39 89       	ldd	r19, Y+17	; 0x11
 2d6:	28 17       	cp	r18, r24
 2d8:	39 07       	cpc	r19, r25
 2da:	44 f4       	brge	.+16     	; 0x2ec <_ZN12RecieverLamp7readADCEv+0x68>
 2dc:	86 30       	cpi	r24, 0x06	; 6
 2de:	91 05       	cpc	r25, r1
 2e0:	2c f0       	brlt	.+10     	; 0x2ec <_ZN12RecieverLamp7readADCEv+0x68>
	{
		nyesteBit_ = 1; 
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	3b 83       	std	Y+3, r19	; 0x03
 2e8:	2a 83       	std	Y+2, r18	; 0x02
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <_ZN12RecieverLamp7readADCEv+0x6c>
	}								//Dette er ikke testet, men virker måske
	else
	{
		nyesteBit_ = 0; 
 2ec:	1b 82       	std	Y+3, r1	; 0x03
 2ee:	1a 82       	std	Y+2, r1	; 0x02
	}
	ADClastRead_ = ADCread_;
 2f0:	99 8b       	std	Y+17, r25	; 0x11
 2f2:	88 8b       	std	Y+16, r24	; 0x10
	
	uart_->SendInteger(nyesteBit_);
 2f4:	6a 81       	ldd	r22, Y+2	; 0x02
 2f6:	7b 81       	ldd	r23, Y+3	; 0x03
 2f8:	8a 89       	ldd	r24, Y+18	; 0x12
 2fa:	9b 89       	ldd	r25, Y+19	; 0x13
 2fc:	c4 d0       	rcall	.+392    	; 0x486 <_ZN4UART11SendIntegerEi>
	uart_->SendString("\\");	
 2fe:	62 e1       	ldi	r22, 0x12	; 18
 300:	72 e0       	ldi	r23, 0x02	; 2
 302:	8a 89       	ldd	r24, Y+18	; 0x12
 304:	9b 89       	ldd	r25, Y+19	; 0x13
 306:	ab d0       	rcall	.+342    	; 0x45e <_ZN4UART10SendStringEPc>
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <_ZN12RecieverLamp13readStartBitsEv>:
void RecieverLamp::setNyesteBit(int nyestebit)
{
		nyesteBit_ = nyestebit;
}

int RecieverLamp::readStartBits(){
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 314:	1d 82       	std	Y+5, r1	; 0x05
 316:	1c 82       	std	Y+4, r1	; 0x04
	while(startBits_ != seneste6Bits_){
 318:	4e 81       	ldd	r20, Y+6	; 0x06
 31a:	5f 81       	ldd	r21, Y+7	; 0x07
 31c:	2c 81       	ldd	r18, Y+4	; 0x04
 31e:	3d 81       	ldd	r19, Y+5	; 0x05
 320:	42 17       	cp	r20, r18
 322:	53 07       	cpc	r21, r19
 324:	99 f0       	breq	.+38     	; 0x34c <_ZN12RecieverLamp13readStartBitsEv+0x3e>
			if (zeroCross_ == 1)
 326:	88 81       	ld	r24, Y
 328:	99 81       	ldd	r25, Y+1	; 0x01
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	c9 f7       	brne	.-14     	; 0x320 <_ZN12RecieverLamp13readStartBitsEv+0x12>
			{
				readADC();
 32e:	ce 01       	movw	r24, r28
 330:	a9 df       	rcall	.-174    	; 0x284 <_ZN12RecieverLamp7readADCEv>
				
				seneste6Bits_ = seneste6Bits_ << 1;
				seneste6Bits_ |= nyesteBit_; 
 332:	8c 81       	ldd	r24, Y+4	; 0x04
 334:	9d 81       	ldd	r25, Y+5	; 0x05
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	2a 81       	ldd	r18, Y+2	; 0x02
 33c:	3b 81       	ldd	r19, Y+3	; 0x03
 33e:	82 2b       	or	r24, r18
 340:	93 2b       	or	r25, r19
 342:	9d 83       	std	Y+5, r25	; 0x05
 344:	8c 83       	std	Y+4, r24	; 0x04
				//PORTB = seneste6Bits_;
			
				zeroCross_ = 0;
 346:	19 82       	std	Y+1, r1	; 0x01
 348:	18 82       	st	Y, r1
 34a:	e6 cf       	rjmp	.-52     	; 0x318 <_ZN12RecieverLamp13readStartBitsEv+0xa>
			}
	}
	
	return 1;
	
}
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <_ZN12RecieverLamp15readAdresseBitsEv>:
int RecieverLamp::readAdresseBits(){
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 35c:	1d 82       	std	Y+5, r1	; 0x05
 35e:	1c 82       	std	Y+4, r1	; 0x04
	
	while(adresseBits_ != seneste6Bits_){
 360:	4a 85       	ldd	r20, Y+10	; 0x0a
 362:	5b 85       	ldd	r21, Y+11	; 0x0b
 364:	2c 81       	ldd	r18, Y+4	; 0x04
 366:	3d 81       	ldd	r19, Y+5	; 0x05
 368:	42 17       	cp	r20, r18
 36a:	53 07       	cpc	r21, r19
 36c:	99 f0       	breq	.+38     	; 0x394 <_ZN12RecieverLamp15readAdresseBitsEv+0x3e>
		if (zeroCross_ == 1)
 36e:	88 81       	ld	r24, Y
 370:	99 81       	ldd	r25, Y+1	; 0x01
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	c9 f7       	brne	.-14     	; 0x368 <_ZN12RecieverLamp15readAdresseBitsEv+0x12>
		{
			readADC();
 376:	ce 01       	movw	r24, r28
 378:	85 df       	rcall	.-246    	; 0x284 <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 37a:	8c 81       	ldd	r24, Y+4	; 0x04
 37c:	9d 81       	ldd	r25, Y+5	; 0x05
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	2a 81       	ldd	r18, Y+2	; 0x02
 384:	3b 81       	ldd	r19, Y+3	; 0x03
 386:	82 2b       	or	r24, r18
 388:	93 2b       	or	r25, r19
 38a:	9d 83       	std	Y+5, r25	; 0x05
 38c:	8c 83       	std	Y+4, r24	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 38e:	19 82       	std	Y+1, r1	; 0x01
 390:	18 82       	st	Y, r1
 392:	e6 cf       	rjmp	.-52     	; 0x360 <_ZN12RecieverLamp15readAdresseBitsEv+0xa>
		}
	}
	
	return 1;
	
}
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <_ZN12RecieverLamp12readDataBitsEv>:
int RecieverLamp::readDataBits(){
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 3a4:	1d 82       	std	Y+5, r1	; 0x05
 3a6:	1c 82       	std	Y+4, r1	; 0x04
	while(kommandoBits_ != seneste6Bits_){
 3a8:	4c 85       	ldd	r20, Y+12	; 0x0c
 3aa:	5d 85       	ldd	r21, Y+13	; 0x0d
 3ac:	2c 81       	ldd	r18, Y+4	; 0x04
 3ae:	3d 81       	ldd	r19, Y+5	; 0x05
 3b0:	42 17       	cp	r20, r18
 3b2:	53 07       	cpc	r21, r19
 3b4:	99 f0       	breq	.+38     	; 0x3dc <_ZN12RecieverLamp12readDataBitsEv+0x3e>
		if (zeroCross_ == 1)
 3b6:	88 81       	ld	r24, Y
 3b8:	99 81       	ldd	r25, Y+1	; 0x01
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <_ZN12RecieverLamp12readDataBitsEv+0x12>
		{
			readADC();
 3be:	ce 01       	movw	r24, r28
 3c0:	61 df       	rcall	.-318    	; 0x284 <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 3c2:	8c 81       	ldd	r24, Y+4	; 0x04
 3c4:	9d 81       	ldd	r25, Y+5	; 0x05
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	2a 81       	ldd	r18, Y+2	; 0x02
 3cc:	3b 81       	ldd	r19, Y+3	; 0x03
 3ce:	82 2b       	or	r24, r18
 3d0:	93 2b       	or	r25, r19
 3d2:	9d 83       	std	Y+5, r25	; 0x05
 3d4:	8c 83       	std	Y+4, r24	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 3d6:	19 82       	std	Y+1, r1	; 0x01
 3d8:	18 82       	st	Y, r1
 3da:	e6 cf       	rjmp	.-52     	; 0x3a8 <_ZN12RecieverLamp12readDataBitsEv+0xa>
		}
	}
	
	return 1;
	
}
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <_ZN12RecieverLamp12readStopBitsEv>:
int RecieverLamp::readStopBits(){
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 3ec:	1d 82       	std	Y+5, r1	; 0x05
 3ee:	1c 82       	std	Y+4, r1	; 0x04
	while(stopBits_ != seneste6Bits_){
 3f0:	48 85       	ldd	r20, Y+8	; 0x08
 3f2:	59 85       	ldd	r21, Y+9	; 0x09
 3f4:	2c 81       	ldd	r18, Y+4	; 0x04
 3f6:	3d 81       	ldd	r19, Y+5	; 0x05
 3f8:	42 17       	cp	r20, r18
 3fa:	53 07       	cpc	r21, r19
 3fc:	99 f0       	breq	.+38     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		if (zeroCross_ == 1)
 3fe:	88 81       	ld	r24, Y
 400:	99 81       	ldd	r25, Y+1	; 0x01
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	c9 f7       	brne	.-14     	; 0x3f8 <_ZN12RecieverLamp12readStopBitsEv+0x12>
		{
			readADC();
 406:	ce 01       	movw	r24, r28
 408:	3d df       	rcall	.-390    	; 0x284 <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	9d 81       	ldd	r25, Y+5	; 0x05
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	2a 81       	ldd	r18, Y+2	; 0x02
 414:	3b 81       	ldd	r19, Y+3	; 0x03
 416:	82 2b       	or	r24, r18
 418:	93 2b       	or	r25, r19
 41a:	9d 83       	std	Y+5, r25	; 0x05
 41c:	8c 83       	std	Y+4, r24	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 41e:	19 82       	std	Y+1, r1	; 0x01
 420:	18 82       	st	Y, r1
 422:	e6 cf       	rjmp	.-52     	; 0x3f0 <_ZN12RecieverLamp12readStopBitsEv+0xa>
		
		}
	}
	
	return 1;
}
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <_ZN12RecieverLamp11turnOnLightEv>:
	uart_->SendString("\\");	
}

void RecieverLamp::turnOnLight()
{
	PORTB = 0b11111111;
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	85 b9       	out	0x05, r24	; 5
 432:	08 95       	ret

00000434 <_ZN4UARTC1Ev>:
#include "UART.h"

// default constructor
UART::UART()
{
	UCSR0B = 0b10011000;			// Tænder for sender og modtager + enabler interupt ved modtagelse
 434:	88 e9       	ldi	r24, 0x98	; 152
 436:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;					// Værdien gør at baud raten er 9600
 43a:	87 e6       	ldi	r24, 0x67	; 103
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 442:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0C = 0b00000110;			// bit 0 gør ingenting
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 44c:	08 95       	ret

0000044e <_ZN4UART8SendCharEc>:
} //UART

void UART::SendChar(char Tegn)
{
	// <---- Skriv din kode her
	while((0b00100000 & UCSR0A) == 0)
 44e:	e0 ec       	ldi	r30, 0xC0	; 192
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	85 ff       	sbrs	r24, 5
 456:	fd cf       	rjmp	.-6      	; 0x452 <_ZN4UART8SendCharEc+0x4>
	{}
	UDR0 = Tegn;
 458:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 45c:	08 95       	ret

0000045e <_ZN4UART10SendStringEPc>:
}

void UART::SendString(char* Streng)
{
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	eb 01       	movw	r28, r22
	while (*Streng != 0)
 468:	68 81       	ld	r22, Y
 46a:	66 23       	and	r22, r22
 46c:	39 f0       	breq	.+14     	; 0x47c <_ZN4UART10SendStringEPc+0x1e>
 46e:	8c 01       	movw	r16, r24
 470:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*Streng);
 472:	c8 01       	movw	r24, r16
 474:	ec df       	rcall	.-40     	; 0x44e <_ZN4UART8SendCharEc>
	UDR0 = Tegn;
}

void UART::SendString(char* Streng)
{
	while (*Streng != 0)
 476:	69 91       	ld	r22, Y+
 478:	61 11       	cpse	r22, r1
 47a:	fb cf       	rjmp	.-10     	; 0x472 <_ZN4UART10SendStringEPc+0x14>
	{
		SendChar(*Streng);
		Streng++;
	}
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	08 95       	ret

00000486 <_ZN4UART11SendIntegerEi>:

void UART::SendInteger(int Tal)
{
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	27 97       	sbiw	r28, 0x07	; 7
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	8c 01       	movw	r16, r24
 4a0:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4a2:	4a e0       	ldi	r20, 0x0A	; 10
 4a4:	be 01       	movw	r22, r28
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	18 d0       	rcall	.+48     	; 0x4dc <__itoa_ncheck>
	char array[7];
	// Convert the integer to an ASCII string (array), radix = 10
	itoa(Tal, array, 10);
	// - then send the string
	SendString(array);
 4ac:	be 01       	movw	r22, r28
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	c8 01       	movw	r24, r16
 4b4:	d4 df       	rcall	.-88     	; 0x45e <_ZN4UART10SendStringEPc>
 4b6:	27 96       	adiw	r28, 0x07	; 7
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	08 95       	ret

000004cc <__tablejump2__>:
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	88 1f       	adc	r24, r24
 4d2:	8b bf       	out	0x3b, r24	; 59
 4d4:	07 90       	elpm	r0, Z+
 4d6:	f6 91       	elpm	r31, Z
 4d8:	e0 2d       	mov	r30, r0
 4da:	19 94       	eijmp

000004dc <__itoa_ncheck>:
 4dc:	bb 27       	eor	r27, r27
 4de:	4a 30       	cpi	r20, 0x0A	; 10
 4e0:	31 f4       	brne	.+12     	; 0x4ee <__itoa_ncheck+0x12>
 4e2:	99 23       	and	r25, r25
 4e4:	22 f4       	brpl	.+8      	; 0x4ee <__itoa_ncheck+0x12>
 4e6:	bd e2       	ldi	r27, 0x2D	; 45
 4e8:	90 95       	com	r25
 4ea:	81 95       	neg	r24
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__utoa_common>

000004f0 <__utoa_ncheck>:
 4f0:	bb 27       	eor	r27, r27

000004f2 <__utoa_common>:
 4f2:	fb 01       	movw	r30, r22
 4f4:	55 27       	eor	r21, r21
 4f6:	aa 27       	eor	r26, r26
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	aa 1f       	adc	r26, r26
 4fe:	a4 17       	cp	r26, r20
 500:	10 f0       	brcs	.+4      	; 0x506 <__utoa_common+0x14>
 502:	a4 1b       	sub	r26, r20
 504:	83 95       	inc	r24
 506:	50 51       	subi	r21, 0x10	; 16
 508:	b9 f7       	brne	.-18     	; 0x4f8 <__utoa_common+0x6>
 50a:	a0 5d       	subi	r26, 0xD0	; 208
 50c:	aa 33       	cpi	r26, 0x3A	; 58
 50e:	08 f0       	brcs	.+2      	; 0x512 <__utoa_common+0x20>
 510:	a9 5d       	subi	r26, 0xD9	; 217
 512:	a1 93       	st	Z+, r26
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	79 f7       	brne	.-34     	; 0x4f6 <__utoa_common+0x4>
 518:	b1 11       	cpse	r27, r1
 51a:	b1 93       	st	Z+, r27
 51c:	11 92       	st	Z+, r1
 51e:	cb 01       	movw	r24, r22
 520:	00 c0       	rjmp	.+0      	; 0x522 <strrev>

00000522 <strrev>:
 522:	dc 01       	movw	r26, r24
 524:	fc 01       	movw	r30, r24
 526:	67 2f       	mov	r22, r23
 528:	71 91       	ld	r23, Z+
 52a:	77 23       	and	r23, r23
 52c:	e1 f7       	brne	.-8      	; 0x526 <strrev+0x4>
 52e:	32 97       	sbiw	r30, 0x02	; 2
 530:	04 c0       	rjmp	.+8      	; 0x53a <strrev+0x18>
 532:	7c 91       	ld	r23, X
 534:	6d 93       	st	X+, r22
 536:	70 83       	st	Z, r23
 538:	62 91       	ld	r22, -Z
 53a:	ae 17       	cp	r26, r30
 53c:	bf 07       	cpc	r27, r31
 53e:	c8 f3       	brcs	.-14     	; 0x532 <strrev+0x10>
 540:	08 95       	ret

00000542 <__do_global_dtors>:
 542:	10 e0       	ldi	r17, 0x00	; 0
 544:	c3 e7       	ldi	r28, 0x73	; 115
 546:	d0 e0       	ldi	r29, 0x00	; 0
 548:	00 e0       	ldi	r16, 0x00	; 0
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__do_global_dtors+0x14>
 54c:	80 2f       	mov	r24, r16
 54e:	fe 01       	movw	r30, r28
 550:	bd df       	rcall	.-134    	; 0x4cc <__tablejump2__>
 552:	21 96       	adiw	r28, 0x01	; 1
 554:	01 1d       	adc	r16, r1
 556:	c4 37       	cpi	r28, 0x74	; 116
 558:	d1 07       	cpc	r29, r17
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 07       	cpc	r16, r24
 55e:	b1 f7       	brne	.-20     	; 0x54c <__do_global_dtors+0xa>
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
