
Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  000005aa  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800216  00800216  00000654  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001385  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec9  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000645  00000000  00000000  00002982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000793  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d44  00000000  00000000  00003857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000459b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8f c0       	rjmp	.+286    	; 0x124 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 31       	cpi	r26, 0x1A	; 26
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2e d0       	rcall	.+92     	; 0x17c <main>
 120:	42 c2       	rjmp	.+1156   	; 0x5a6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_1>:
	
}


ISR(INT0_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	PORTB = PINB ^ 0b10000000;
 132:	83 b1       	in	r24, 0x03	; 3
 134:	80 58       	subi	r24, 0x80	; 128
 136:	85 b9       	out	0x05, r24	; 5
	{
		nyesteBit = 1;
	}								//Dette er ikke testet, men virker måske
	else
	{
		nyesteBit = 0;
 138:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x1>
 13c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
	}
	
	zerocross = true;			// Bliver sat true hver gang der har været et cross
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <zerocross+0x1>
 148:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <zerocross>
	//nyesteBit = 1;
	//break;
	//}
	//laengde++;
	//PORTB ^= (1<<7);
}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <_Z13initInterupt0v>:

void initInterupt0()				// Int0 Gøres klar
{
	sei();
 15a:	78 94       	sei
	EIMSK |= 0b00000001;
 15c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;
 15e:	e9 e6       	ldi	r30, 0x69	; 105
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <_Z7initADCv>:
	
}

void initADC()						// ADC bliver klar gjordt 
{
	ADCSRA = 0b10000111;
 16a:	87 e8       	ldi	r24, 0x87	; 135
 16c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADMUX = 0b01000000;
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRB = 0b00000000;
 176:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 17a:	08 95       	ret

0000017c <main>:
ISR(INT0_vect);
void initInterupt0();
void initADC();

int main(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <main+0x6>
 182:	1f 92       	push	r1
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
	
	DDRF = 0;
 18a:	10 ba       	out	0x10, r1	; 16
	DDRD = 0;			//Sætter IO pins kan tilføjes i en funktion
 18c:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 192:	15 b8       	out	0x05, r1	; 5
	
	initInterupt0();
 194:	e2 df       	rcall	.-60     	; 0x15a <_Z13initInterupt0v>
	initADC();
 196:	e9 df       	rcall	.-46     	; 0x16a <_Z7initADCv>
 198:	21 2c       	mov	r2, r1
	int slutbit = 0b0111;
	int seneste4Bit = 0b0010;
	int bit6, bit5, bit4, bit3, bit2, bit1;
	int moenster6, moenster5, moenster4, moenster3, moenster2 = 0b0000;
	int adresse = 0b000000;
	int kommando = 0b000000;
 19a:	31 2c       	mov	r3, r1
 19c:	41 2c       	mov	r4, r1
	int startbit = 0b1110;
	int slutbit = 0b0111;
	int seneste4Bit = 0b0010;
	int bit6, bit5, bit4, bit3, bit2, bit1;
	int moenster6, moenster5, moenster4, moenster3, moenster2 = 0b0000;
	int adresse = 0b000000;
 19e:	51 2c       	mov	r5, r1
 1a0:	02 e0       	ldi	r16, 0x02	; 2
	initInterupt0();
	initADC();
	
	int startbit = 0b1110;
	int slutbit = 0b0111;
	int seneste4Bit = 0b0010;
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	0f 2e       	mov	r0, r31
		uart.SendString("ingenting modtaget");
		
		while(startbit != seneste4Bit){
			if (zerocross == true)
			{
				ADCSRA |= 0b01000000;
 1a6:	fa e7       	ldi	r31, 0x7A	; 122
 1a8:	ef 2e       	mov	r14, r31
 1aa:	f1 2c       	mov	r15, r1
 1ac:	f0 2d       	mov	r31, r0
 1ae:	ce 01       	movw	r24, r28
	int x;
	
    /* Replace with your application code */
    while (1) 
    {
		UART uart;
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	7a d1       	rcall	.+756    	; 0x4a8 <_ZN4UARTC1Ev>
 1b4:	60 e0       	ldi	r22, 0x00	; 0
		uart.SendString("ingenting modtaget");
 1b6:	72 e0       	ldi	r23, 0x02	; 2
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	8a d1       	rcall	.+788    	; 0x4d2 <_ZN4UART10SendStringEPc>
 1be:	43 01       	movw	r8, r6
				moenster4 = bit3;
				moenster3 = bit2;
				moenster2 = bit1;
				bit1 = nyesteBit;
				
				seneste4Bit = moenster4 | moenster3 | moenster2 | bit1;
 1c0:	8c 28       	or	r8, r12
 1c2:	9d 28       	or	r9, r13
 1c4:	0e 30       	cpi	r16, 0x0E	; 14
    while (1) 
    {
		UART uart;
		uart.SendString("ingenting modtaget");
		
		while(startbit != seneste4Bit){
 1c6:	11 05       	cpc	r17, r1
 1c8:	79 f1       	breq	.+94     	; 0x228 <main+0xac>
 1ca:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
			if (zerocross == true)
 1ce:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <main+0x66>
 1d6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
 1da:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	d1 f7       	brne	.-12     	; 0x1d6 <main+0x5a>
 1e2:	d7 01       	movw	r26, r14
			{
				ADCSRA |= 0b01000000;
 1e4:	8c 91       	ld	r24, X
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	8c 93       	st	X, r24
 1ea:	f7 01       	movw	r30, r14
				while (ADCSRA & 0b01000000)
 1ec:	80 81       	ld	r24, Z
 1ee:	86 fd       	sbrc	r24, 6
 1f0:	fc cf       	rjmp	.-8      	; 0x1ea <main+0x6e>
 1f2:	a8 e7       	ldi	r26, 0x78	; 120
				{}
				
				x = ADCW;
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	6d 91       	ld	r22, X+
 1f8:	7c 91       	ld	r23, X
				uart.SendInteger(x);
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	7d d1       	rcall	.+762    	; 0x4fa <_ZN4UART11SendIntegerEi>
				uart.SendString("/");
 200:	63 e1       	ldi	r22, 0x13	; 19
 202:	72 e0       	ldi	r23, 0x02	; 2
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	64 d1       	rcall	.+712    	; 0x4d2 <_ZN4UART10SendStringEPc>
 20a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
			
						
				moenster4 = bit3;
				moenster3 = bit2;
				moenster2 = bit1;
				bit1 = nyesteBit;
 20e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 212:	84 01       	movw	r16, r8
				
				seneste4Bit = moenster4 | moenster3 | moenster2 | bit1;
 214:	08 2b       	or	r16, r24
 216:	19 2b       	or	r17, r25
 218:	0a 29       	or	r16, r10
 21a:	1b 29       	or	r17, r11
 21c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <zerocross+0x1>
				
				zerocross = false;
 220:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <zerocross>
 224:	5c 01       	movw	r10, r24
			
						
				moenster4 = bit3;
				moenster3 = bit2;
				moenster2 = bit1;
				bit1 = nyesteBit;
 226:	ce cf       	rjmp	.-100    	; 0x1c4 <main+0x48>
 228:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__data_end>
				bit6 = bit5;
				bit5 = bit4;
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 22c:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__data_end+0x1>
 230:	95 01       	movw	r18, r10
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	f6 2f       	mov	r31, r22
 238:	e7 2f       	mov	r30, r23
 23a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
		int adresselaengde = 0;
		
		while (adresselaengde != 6)		// Aflæser de næste 6 zerocross og ligger dem i adresse
		{
			//PORTB ^= (1<<5);		Bruges til at teste
			if (zerocross)
 23e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 242:	89 2b       	or	r24, r25
 244:	99 f0       	breq	.+38     	; 0x26c <main+0xf0>
 246:	1c c0       	rjmp	.+56     	; 0x280 <main+0x104>
 248:	ea 81       	ldd	r30, Y+2	; 0x02
			}
		}
		
		int adresselaengde = 0;
		
		while (adresselaengde != 6)		// Aflæser de næste 6 zerocross og ligger dem i adresse
 24a:	fb 81       	ldd	r31, Y+3	; 0x03
 24c:	fd 83       	std	Y+5, r31	; 0x05
 24e:	ec 83       	std	Y+4, r30	; 0x04
 250:	7b 82       	std	Y+3, r7	; 0x03
 252:	6a 82       	std	Y+2, r6	; 0x02
 254:	36 01       	movw	r6, r12
 256:	69 01       	movw	r12, r18
 258:	9b 01       	movw	r18, r22
				bit6 = bit5;
				bit5 = bit4;
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 25a:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__data_end>
				bit6 = bit5;
				bit5 = bit4;
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 25e:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__data_end+0x1>
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	f6 2f       	mov	r31, r22
 268:	e7 2f       	mov	r30, r23
 26a:	52 c0       	rjmp	.+164    	; 0x310 <main+0x194>
 26c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
		int adresselaengde = 0;
		
		while (adresselaengde != 6)		// Aflæser de næste 6 zerocross og ligger dem i adresse
		{
			//PORTB ^= (1<<5);		Bruges til at teste
			if (zerocross)
 270:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 274:	89 2b       	or	r24, r25
 276:	21 f4       	brne	.+8      	; 0x280 <main+0x104>
 278:	46 30       	cpi	r20, 0x06	; 6
			}
		}
		
		int adresselaengde = 0;
		
		while (adresselaengde != 6)		// Aflæser de næste 6 zerocross og ligger dem i adresse
 27a:	51 05       	cpc	r21, r1
 27c:	b9 f7       	brne	.-18     	; 0x26c <main+0xf0>
 27e:	ed cf       	rjmp	.-38     	; 0x25a <main+0xde>
 280:	ac 81       	ldd	r26, Y+4	; 0x04
				moenster5 = (bit5 << 4);		
				moenster4 = (bit4 << 3);
				moenster3 = (bit3 << 2);
				moenster2 = (bit2 << 1);
						
				adresse = moenster6 | moenster5 | moenster4 | moenster3 | moenster2 | bit1;
 282:	bd 81       	ldd	r27, Y+5	; 0x05
 284:	aa 0f       	add	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	a2 95       	swap	r26
 28a:	b2 95       	swap	r27
 28c:	b0 7f       	andi	r27, 0xF0	; 240
 28e:	ba 27       	eor	r27, r26
 290:	a0 7f       	andi	r26, 0xF0	; 240
 292:	ba 27       	eor	r27, r26
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	9b 81       	ldd	r25, Y+3	; 0x03
 298:	82 95       	swap	r24
 29a:	92 95       	swap	r25
 29c:	90 7f       	andi	r25, 0xF0	; 240
 29e:	98 27       	eor	r25, r24
 2a0:	80 7f       	andi	r24, 0xF0	; 240
 2a2:	98 27       	eor	r25, r24
 2a4:	8a 2b       	or	r24, r26
 2a6:	9b 2b       	or	r25, r27
 2a8:	86 2b       	or	r24, r22
 2aa:	97 2b       	or	r25, r23
 2ac:	23 01       	movw	r4, r6
 2ae:	44 0c       	add	r4, r4
 2b0:	55 1c       	adc	r5, r5
 2b2:	44 0c       	add	r4, r4
 2b4:	55 1c       	adc	r5, r5
 2b6:	44 0c       	add	r4, r4
 2b8:	55 1c       	adc	r5, r5
 2ba:	84 29       	or	r24, r4
 2bc:	95 29       	or	r25, r5
 2be:	d6 01       	movw	r26, r12
 2c0:	aa 0f       	add	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	aa 0f       	add	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	8a 2b       	or	r24, r26
 2ca:	9b 2b       	or	r25, r27
 2cc:	29 01       	movw	r4, r18
 2ce:	44 0c       	add	r4, r4
 2d0:	55 1c       	adc	r5, r5
 2d2:	48 2a       	or	r4, r24
 2d4:	59 2a       	or	r5, r25
 2d6:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <zerocross+0x1>
						
				zerocross = false;
 2da:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <zerocross>
 2de:	4f 5f       	subi	r20, 0xFF	; 255
				adresselaengde++;
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	9b 81       	ldd	r25, Y+3	; 0x03
 2e6:	9d 83       	std	Y+5, r25	; 0x05
 2e8:	8c 83       	std	Y+4, r24	; 0x04
 2ea:	96 2d       	mov	r25, r6
 2ec:	87 2d       	mov	r24, r7
 2ee:	bc 2d       	mov	r27, r12
 2f0:	ad 2d       	mov	r26, r13
 2f2:	02 2f       	mov	r16, r18
 2f4:	13 2f       	mov	r17, r19
 2f6:	46 30       	cpi	r20, 0x06	; 6
			}
		}
		
		int adresselaengde = 0;
		
		while (adresselaengde != 6)		// Aflæser de næste 6 zerocross og ligger dem i adresse
 2f8:	51 05       	cpc	r21, r1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <main+0x182>
 2fc:	a5 cf       	rjmp	.-182    	; 0x248 <main+0xcc>
 2fe:	2f 2f       	mov	r18, r31
				bit6 = bit5;
				bit5 = bit4;
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 300:	3e 2f       	mov	r19, r30
 302:	c0 2e       	mov	r12, r16
			}
		}
		
		int adresselaengde = 0;
		
		while (adresselaengde != 6)		// Aflæser de næste 6 zerocross og ligger dem i adresse
 304:	d1 2e       	mov	r13, r17
 306:	6b 2e       	mov	r6, r27
 308:	7a 2e       	mov	r7, r26
 30a:	9a 83       	std	Y+2, r25	; 0x02
 30c:	8b 83       	std	Y+3, r24	; 0x03
 30e:	95 cf       	rjmp	.-214    	; 0x23a <main+0xbe>
 310:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
		int komandolaengde = 0;
		
		while (komandolaengde != 6)		// Aflæser de næste 6 zeroCross og ligger dem i kommando
		{
			// PORTB ^= (1<<4);		Bruges til at teste
			if (zerocross)
 314:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 318:	89 2b       	or	r24, r25
 31a:	79 f0       	breq	.+30     	; 0x33a <main+0x1be>
 31c:	18 c0       	rjmp	.+48     	; 0x34e <main+0x1d2>
 31e:	aa 81       	ldd	r26, Y+2	; 0x02
			
		}
		
		int komandolaengde = 0;
		
		while (komandolaengde != 6)		// Aflæser de næste 6 zeroCross og ligger dem i kommando
 320:	bb 81       	ldd	r27, Y+3	; 0x03
 322:	bd 83       	std	Y+5, r27	; 0x05
 324:	ac 83       	std	Y+4, r26	; 0x04
 326:	36 01       	movw	r6, r12
 328:	69 01       	movw	r12, r18
 32a:	9b 01       	movw	r18, r22
				bit6 = bit5;
				bit5 = bit4;
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 32c:	a0 90 16 02 	lds	r10, 0x0216	; 0x800216 <__data_end>
			if (zerocross)
			{
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 330:	b0 90 17 02 	lds	r11, 0x0217	; 0x800217 <__data_end+0x1>
 334:	5a 2d       	mov	r21, r10
 336:	4b 2d       	mov	r20, r11
 338:	52 c0       	rjmp	.+164    	; 0x3de <main+0x262>
 33a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
		int komandolaengde = 0;
		
		while (komandolaengde != 6)		// Aflæser de næste 6 zeroCross og ligger dem i kommando
		{
			// PORTB ^= (1<<4);		Bruges til at teste
			if (zerocross)
 33e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 342:	89 2b       	or	r24, r25
 344:	21 f4       	brne	.+8      	; 0x34e <main+0x1d2>
 346:	46 30       	cpi	r20, 0x06	; 6
			
		}
		
		int komandolaengde = 0;
		
		while (komandolaengde != 6)		// Aflæser de næste 6 zeroCross og ligger dem i kommando
 348:	51 05       	cpc	r21, r1
 34a:	b9 f7       	brne	.-18     	; 0x33a <main+0x1be>
 34c:	ef cf       	rjmp	.-34     	; 0x32c <main+0x1b0>
 34e:	ac 81       	ldd	r26, Y+4	; 0x04
				moenster5 = (bit5 << 4);
				moenster4 = (bit4 << 3);
				moenster3 = (bit3 << 2);
				moenster2 = (bit2 << 1);
				
				kommando = moenster6 | moenster5 | moenster4 | moenster3 | moenster2 | bit1;
 350:	bd 81       	ldd	r27, Y+5	; 0x05
 352:	aa 0f       	add	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	a2 95       	swap	r26
 358:	b2 95       	swap	r27
 35a:	b0 7f       	andi	r27, 0xF0	; 240
 35c:	ba 27       	eor	r27, r26
 35e:	a0 7f       	andi	r26, 0xF0	; 240
 360:	ba 27       	eor	r27, r26
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	9b 81       	ldd	r25, Y+3	; 0x03
 366:	82 95       	swap	r24
 368:	92 95       	swap	r25
 36a:	90 7f       	andi	r25, 0xF0	; 240
 36c:	98 27       	eor	r25, r24
 36e:	80 7f       	andi	r24, 0xF0	; 240
 370:	98 27       	eor	r25, r24
 372:	8a 2b       	or	r24, r26
 374:	9b 2b       	or	r25, r27
 376:	86 2b       	or	r24, r22
 378:	97 2b       	or	r25, r23
 37a:	13 01       	movw	r2, r6
 37c:	22 0c       	add	r2, r2
 37e:	33 1c       	adc	r3, r3
 380:	22 0c       	add	r2, r2
 382:	33 1c       	adc	r3, r3
 384:	22 0c       	add	r2, r2
 386:	33 1c       	adc	r3, r3
 388:	82 29       	or	r24, r2
 38a:	93 29       	or	r25, r3
 38c:	d6 01       	movw	r26, r12
 38e:	aa 0f       	add	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	aa 0f       	add	r26, r26
 394:	bb 1f       	adc	r27, r27
 396:	8a 2b       	or	r24, r26
 398:	9b 2b       	or	r25, r27
 39a:	19 01       	movw	r2, r18
 39c:	22 0c       	add	r2, r2
 39e:	33 1c       	adc	r3, r3
 3a0:	28 2a       	or	r2, r24
 3a2:	39 2a       	or	r3, r25
 3a4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <zerocross+0x1>
				
				zerocross = false;
 3a8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <zerocross>
 3ac:	4f 5f       	subi	r20, 0xFF	; 255
				komandolaengde++;
 3ae:	5f 4f       	sbci	r21, 0xFF	; 255
 3b0:	9c 2d       	mov	r25, r12
 3b2:	8d 2d       	mov	r24, r13
 3b4:	aa 81       	ldd	r26, Y+2	; 0x02
 3b6:	bb 81       	ldd	r27, Y+3	; 0x03
 3b8:	bd 83       	std	Y+5, r27	; 0x05
 3ba:	ac 83       	std	Y+4, r26	; 0x04
 3bc:	46 30       	cpi	r20, 0x06	; 6
			
		}
		
		int komandolaengde = 0;
		
		while (komandolaengde != 6)		// Aflæser de næste 6 zeroCross og ligger dem i kommando
 3be:	51 05       	cpc	r21, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <main+0x248>
 3c2:	ad cf       	rjmp	.-166    	; 0x31e <main+0x1a2>
 3c4:	7b 82       	std	Y+3, r7	; 0x03
 3c6:	6a 82       	std	Y+2, r6	; 0x02
 3c8:	69 01       	movw	r12, r18
 3ca:	69 2e       	mov	r6, r25
 3cc:	78 2e       	mov	r7, r24
 3ce:	2f 2f       	mov	r18, r31
				bit6 = bit5;
				bit5 = bit4;
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 3d0:	3e 2f       	mov	r19, r30
 3d2:	9e cf       	rjmp	.-196    	; 0x310 <main+0x194>
 3d4:	69 01       	movw	r12, r18
			}			
		}
		
		
		seneste4Bit = 0b0000;
		while(slutbit != seneste4Bit)		//Kigger efter stopbit
 3d6:	69 2e       	mov	r6, r25
 3d8:	78 2e       	mov	r7, r24
 3da:	25 2f       	mov	r18, r21
			if (zerocross)
			{
				bit4 = bit3;
				bit3 = bit2;
				bit2 = bit1;
				bit1 = nyesteBit;
 3dc:	34 2f       	mov	r19, r20
 3de:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
		
		seneste4Bit = 0b0000;
		while(slutbit != seneste4Bit)		//Kigger efter stopbit
		{
			//PORTB ^= (1<<3);		Bruges til at teste
			if (zerocross)
 3e2:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 3e6:	89 2b       	or	r24, r25
 3e8:	31 f4       	brne	.+12     	; 0x3f6 <main+0x27a>
 3ea:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <zerocross>
 3ee:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <zerocross+0x1>
 3f2:	89 2b       	or	r24, r25
 3f4:	d1 f3       	breq	.-12     	; 0x3ea <main+0x26e>
 3f6:	c6 01       	movw	r24, r12
			
				moenster4 = (bit4 << 3);
				moenster3 = (bit3 << 2);
				moenster2 = (bit2 << 1);
			
				seneste4Bit = moenster4 | moenster3 | moenster2 | bit1;
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	83 01       	movw	r16, r6
 402:	00 0f       	add	r16, r16
 404:	11 1f       	adc	r17, r17
 406:	00 0f       	add	r16, r16
 408:	11 1f       	adc	r17, r17
 40a:	00 0f       	add	r16, r16
 40c:	11 1f       	adc	r17, r17
 40e:	08 2b       	or	r16, r24
 410:	19 2b       	or	r17, r25
 412:	0a 29       	or	r16, r10
 414:	1b 29       	or	r17, r11
 416:	c9 01       	movw	r24, r18
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	08 2b       	or	r16, r24
 41e:	19 2b       	or	r17, r25
 420:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <zerocross+0x1>
			
				zerocross = false;
 424:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <zerocross>
 428:	9c 2d       	mov	r25, r12
 42a:	8d 2d       	mov	r24, r13
 42c:	07 30       	cpi	r16, 0x07	; 7
			}			
		}
		
		
		seneste4Bit = 0b0000;
		while(slutbit != seneste4Bit)		//Kigger efter stopbit
 42e:	11 05       	cpc	r17, r1
 430:	89 f6       	brne	.-94     	; 0x3d4 <main+0x258>
 432:	b5 e1       	ldi	r27, 0x15	; 21
				zerocross = false;
				
			}
		}
		
		if (adresse == 0b010101)		// Skal ændres til nogle funktioner
 434:	4b 16       	cp	r4, r27
 436:	51 04       	cpc	r5, r1
 438:	f1 f4       	brne	.+60     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 43a:	e5 e1       	ldi	r30, 0x15	; 21
		{
			switch(kommando)
 43c:	2e 16       	cp	r2, r30
 43e:	31 04       	cpc	r3, r1
 440:	81 f0       	breq	.+32     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 442:	fa e2       	ldi	r31, 0x2A	; 42
 444:	2f 16       	cp	r2, r31
 446:	31 04       	cpc	r3, r1
 448:	b1 f4       	brne	.+44     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 44a:	47 e0       	ldi	r20, 0x07	; 7
			{
				case 0b101010:			// Denne kommando skal tænde LEDer
					PORTB = 0b00000111;
 44c:	45 b9       	out	0x05, r20	; 5
 44e:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	9b e7       	ldi	r25, 0x7B	; 123
 452:	a2 e9       	ldi	r26, 0x92	; 146
 454:	81 50       	subi	r24, 0x01	; 1
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	a0 40       	sbci	r26, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
 460:	0a c0       	rjmp	.+20     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 462:	15 b8       	out	0x05, r1	; 5
					_delay_ms(3000);
					break;
				case 0b010101:			// Denne kommando skal slukke LEDer
					PORTB = 0;
 464:	bf ef       	ldi	r27, 0xFF	; 255
 466:	eb e7       	ldi	r30, 0x7B	; 123
 468:	f2 e9       	ldi	r31, 0x92	; 146
 46a:	b1 50       	subi	r27, 0x01	; 1
 46c:	e0 40       	sbci	r30, 0x00	; 0
 46e:	f0 40       	sbci	r31, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	4f ef       	ldi	r20, 0xFF	; 255
 478:	87 ea       	ldi	r24, 0xA7	; 167
 47a:	91 e6       	ldi	r25, 0x61	; 97
 47c:	41 50       	subi	r20, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 486:	00 00       	nop
 488:	45 b8       	out	0x05, r4	; 5
				default:				// Default gør ingenting
					break;
			}
		}
		_delay_ms(2000);				// Viser adressen og kommando på LEDer
		PORTB = adresse;				//
 48a:	af ef       	ldi	r26, 0xFF	; 255
 48c:	b7 ea       	ldi	r27, 0xA7	; 167
 48e:	e1 e6       	ldi	r30, 0x61	; 97
 490:	a1 50       	subi	r26, 0x01	; 1
 492:	b0 40       	sbci	r27, 0x00	; 0
 494:	e0 40       	sbci	r30, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 498:	00 c0       	rjmp	.+0      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 49a:	00 00       	nop
 49c:	25 b8       	out	0x05, r2	; 5
		_delay_ms(2000);				//
		PORTB = kommando;				//
 49e:	7b 82       	std	Y+3, r7	; 0x03
 4a0:	6a 82       	std	Y+2, r6	; 0x02
 4a2:	36 01       	movw	r6, r12
 4a4:	69 01       	movw	r12, r18
 4a6:	83 ce       	rjmp	.-762    	; 0x1ae <main+0x32>

000004a8 <_ZN4UARTC1Ev>:
#include "UART.h"

// default constructor
UART::UART()
{
	UCSR0B = 0b10011000;			// Tænder for sender og modtager + enabler interupt ved modtagelse
 4a8:	88 e9       	ldi	r24, 0x98	; 152
 4aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;					// Værdien gør at baud raten er 9600
 4ae:	87 e6       	ldi	r24, 0x67	; 103
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 4b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0C = 0b00000110;			// bit 0 gør ingenting
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 4c0:	08 95       	ret

000004c2 <_ZN4UART8SendCharEc>:
} //UART

void UART::SendChar(char Tegn)
{
	// <---- Skriv din kode her
	while((0b00100000 & UCSR0A) == 0)
 4c2:	e0 ec       	ldi	r30, 0xC0	; 192
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	85 ff       	sbrs	r24, 5
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <_ZN4UART8SendCharEc+0x4>
	{}
	UDR0 = Tegn;
 4cc:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4d0:	08 95       	ret

000004d2 <_ZN4UART10SendStringEPc>:
}

void UART::SendString(char* Streng)
{
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	eb 01       	movw	r28, r22
	while (*Streng != 0)
 4dc:	68 81       	ld	r22, Y
 4de:	66 23       	and	r22, r22
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <_ZN4UART10SendStringEPc+0x1e>
 4e2:	8c 01       	movw	r16, r24
 4e4:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*Streng);
 4e6:	c8 01       	movw	r24, r16
 4e8:	ec df       	rcall	.-40     	; 0x4c2 <_ZN4UART8SendCharEc>
	UDR0 = Tegn;
}

void UART::SendString(char* Streng)
{
	while (*Streng != 0)
 4ea:	69 91       	ld	r22, Y+
 4ec:	61 11       	cpse	r22, r1
 4ee:	fb cf       	rjmp	.-10     	; 0x4e6 <_ZN4UART10SendStringEPc+0x14>
	{
		SendChar(*Streng);
		Streng++;
	}
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <_ZN4UART11SendIntegerEi>:

void UART::SendInteger(int Tal)
{
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
 506:	27 97       	sbiw	r28, 0x07	; 7
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	de bf       	out	0x3e, r29	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	cd bf       	out	0x3d, r28	; 61
 512:	8c 01       	movw	r16, r24
 514:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 516:	4a e0       	ldi	r20, 0x0A	; 10
 518:	be 01       	movw	r22, r28
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	10 d0       	rcall	.+32     	; 0x540 <__itoa_ncheck>
	char array[7];
	// Convert the integer to an ASCII string (array), radix = 10
	itoa(Tal, array, 10);
	// - then send the string
	SendString(array);
 520:	be 01       	movw	r22, r28
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	c8 01       	movw	r24, r16
 528:	d4 df       	rcall	.-88     	; 0x4d2 <_ZN4UART10SendStringEPc>
 52a:	27 96       	adiw	r28, 0x07	; 7
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <__itoa_ncheck>:
 540:	bb 27       	eor	r27, r27
 542:	4a 30       	cpi	r20, 0x0A	; 10
 544:	31 f4       	brne	.+12     	; 0x552 <__itoa_ncheck+0x12>
 546:	99 23       	and	r25, r25
 548:	22 f4       	brpl	.+8      	; 0x552 <__itoa_ncheck+0x12>
 54a:	bd e2       	ldi	r27, 0x2D	; 45
 54c:	90 95       	com	r25
 54e:	81 95       	neg	r24
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	01 c0       	rjmp	.+2      	; 0x556 <__utoa_common>

00000554 <__utoa_ncheck>:
 554:	bb 27       	eor	r27, r27

00000556 <__utoa_common>:
 556:	fb 01       	movw	r30, r22
 558:	55 27       	eor	r21, r21
 55a:	aa 27       	eor	r26, r26
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	aa 1f       	adc	r26, r26
 562:	a4 17       	cp	r26, r20
 564:	10 f0       	brcs	.+4      	; 0x56a <__utoa_common+0x14>
 566:	a4 1b       	sub	r26, r20
 568:	83 95       	inc	r24
 56a:	50 51       	subi	r21, 0x10	; 16
 56c:	b9 f7       	brne	.-18     	; 0x55c <__utoa_common+0x6>
 56e:	a0 5d       	subi	r26, 0xD0	; 208
 570:	aa 33       	cpi	r26, 0x3A	; 58
 572:	08 f0       	brcs	.+2      	; 0x576 <__utoa_common+0x20>
 574:	a9 5d       	subi	r26, 0xD9	; 217
 576:	a1 93       	st	Z+, r26
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	79 f7       	brne	.-34     	; 0x55a <__utoa_common+0x4>
 57c:	b1 11       	cpse	r27, r1
 57e:	b1 93       	st	Z+, r27
 580:	11 92       	st	Z+, r1
 582:	cb 01       	movw	r24, r22
 584:	00 c0       	rjmp	.+0      	; 0x586 <strrev>

00000586 <strrev>:
 586:	dc 01       	movw	r26, r24
 588:	fc 01       	movw	r30, r24
 58a:	67 2f       	mov	r22, r23
 58c:	71 91       	ld	r23, Z+
 58e:	77 23       	and	r23, r23
 590:	e1 f7       	brne	.-8      	; 0x58a <strrev+0x4>
 592:	32 97       	sbiw	r30, 0x02	; 2
 594:	04 c0       	rjmp	.+8      	; 0x59e <strrev+0x18>
 596:	7c 91       	ld	r23, X
 598:	6d 93       	st	X+, r22
 59a:	70 83       	st	Z, r23
 59c:	62 91       	ld	r22, -Z
 59e:	ae 17       	cp	r26, r30
 5a0:	bf 07       	cpc	r27, r31
 5a2:	c8 f3       	brcs	.-14     	; 0x596 <strrev+0x10>
 5a4:	08 95       	ret

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
