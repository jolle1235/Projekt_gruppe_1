
Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800218  00800218  00000738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001142  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000908  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000041a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba1  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089b  00000000  00000000  00004fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
   2:	00 00       	nop
   4:	e3 c0       	rjmp	.+454    	; 0x1cc <__vector_1>
   6:	00 00       	nop
   8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
   a:	00 00       	nop
   c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
   e:	00 00       	nop
  10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
  12:	00 00       	nop
  14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
  16:	00 00       	nop
  18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
  1e:	00 00       	nop
  20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
  26:	00 00       	nop
  28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
  2e:	00 00       	nop
  30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
  32:	00 00       	nop
  34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
  36:	00 00       	nop
  38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
  46:	00 00       	nop
  48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
  4e:	00 00       	nop
  50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
  56:	00 00       	nop
  58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
  5e:	00 00       	nop
  60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
  62:	00 00       	nop
  64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
  66:	00 00       	nop
  68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
  6e:	00 00       	nop
  70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
  72:	00 00       	nop
  74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
  76:	00 00       	nop
  78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
  7e:	00 00       	nop
  80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
  82:	00 00       	nop
  84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
  86:	00 00       	nop
  88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
  8e:	00 00       	nop
  90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
  92:	00 00       	nop
  94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
  96:	00 00       	nop
  98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
  be:	00 00       	nop
  c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
  da:	00 00       	nop
  dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
  de:	00 00       	nop
  e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	11 01       	movw	r2, r2

000000e6 <__ctors_end>:
  e6:	18 01       	movw	r2, r16

000000e8 <__dtors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d1 e2       	ldi	r29, 0x21	; 33
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
  f8:	12 e0       	ldi	r17, 0x02	; 2
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b2 e0       	ldi	r27, 0x02	; 2
  fe:	ec e8       	ldi	r30, 0x8C	; 140
 100:	f6 e0       	ldi	r31, 0x06	; 6
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a8 31       	cpi	r26, 0x18	; 24
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	a8 e1       	ldi	r26, 0x18	; 24
 116:	b2 e0       	ldi	r27, 0x02	; 2
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	a3 33       	cpi	r26, 0x33	; 51
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	c3 e7       	ldi	r28, 0x73	; 115
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__do_global_ctors+0x14>
 12c:	21 97       	sbiw	r28, 0x01	; 1
 12e:	01 09       	sbc	r16, r1
 130:	80 2f       	mov	r24, r16
 132:	fe 01       	movw	r30, r28
 134:	5f d2       	rcall	.+1214   	; 0x5f4 <__tablejump2__>
 136:	c2 37       	cpi	r28, 0x72	; 114
 138:	d1 07       	cpc	r29, r17
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 07       	cpc	r16, r24
 13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xa>
 140:	13 d0       	rcall	.+38     	; 0x168 <main>
 142:	93 c2       	rjmp	.+1318   	; 0x66a <__do_global_dtors>

00000144 <__bad_interrupt>:
 144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <_Z13initInterupt0v>:
RecieverLamp Reciever;
UART uart_;

void initInterupt0()				// Int0 Gøres klar
{
	sei();
 146:	78 94       	sei
	EIMSK |= 0b00000001;
 148:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;
 14a:	e9 e6       	ldi	r30, 0x69	; 105
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <_Z7initADCv>:
	
}

void initADC()						// ADC bliver klar gjordt
{
	ADCSRA = 0b10000111;
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADMUX = 0b01000000;
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRB = 0b00000000;
 162:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 166:	08 95       	ret

00000168 <main>:
	
}

int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	UART uart;
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	f2 d1       	rcall	.+996    	; 0x55c <_ZN4UARTC1Ev>
	
	DDRF = 0;
 178:	10 ba       	out	0x10, r1	; 16
	DDRD = 0;			//Sætter IO pins kan tilføjes i en funktion
 17a:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
	initInterupt0();
 180:	15 b8       	out	0x05, r1	; 5
	initADC();
 182:	e1 df       	rcall	.-62     	; 0x146 <_Z13initInterupt0v>
	
	Reciever.setAdresseBits();
 184:	e8 df       	rcall	.-48     	; 0x156 <_Z7initADCv>
 186:	89 e1       	ldi	r24, 0x19	; 25
 188:	92 e0       	ldi	r25, 0x02	; 2
	
	uart.SendInteger(Reciever.getAdresseBits());
 18a:	82 d0       	rcall	.+260    	; 0x290 <_ZN12RecieverLamp14setAdresseBitsEv>
 18c:	89 e1       	ldi	r24, 0x19	; 25
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	e2 d0       	rcall	.+452    	; 0x356 <_ZN12RecieverLamp14getAdresseBitsEv>
 192:	bc 01       	movw	r22, r24
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
	uart.SendString("\n\r");
 198:	0a d2       	rcall	.+1044   	; 0x5ae <_ZN4UART11SendIntegerEi>
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	72 e0       	ldi	r23, 0x02	; 2
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
	
	
	uart.SendString("program starter \n");
 1a2:	f1 d1       	rcall	.+994    	; 0x586 <_ZN4UART10SendStringEPc>
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	72 e0       	ldi	r23, 0x02	; 2
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		if (Reciever.readStartBits() == 1)
 1ac:	ec d1       	rcall	.+984    	; 0x586 <_ZN4UART10SendStringEPc>
 1ae:	89 e1       	ldi	r24, 0x19	; 25
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	1a d1       	rcall	.+564    	; 0x3e8 <_ZN12RecieverLamp13readStartBitsEv>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
		{
			Reciever.readAdresseBits();
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <main+0x46>
 1b8:	89 e1       	ldi	r24, 0x19	; 25
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	47 d1       	rcall	.+654    	; 0x44c <_ZN12RecieverLamp15readAdresseBitsEv>
			Reciever.readDataBits();
 1be:	89 e1       	ldi	r24, 0x19	; 25
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	71 d1       	rcall	.+738    	; 0x4a6 <_ZN12RecieverLamp12readDataBitsEv>
 1c4:	89 e1       	ldi	r24, 0x19	; 25
			Reciever.readStopBits();
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	9c d1       	rcall	.+824    	; 0x502 <_ZN12RecieverLamp12readStopBitsEv>
 1ca:	f1 cf       	rjmp	.-30     	; 0x1ae <main+0x46>

000001cc <__vector_1>:
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
	}
}


ISR(INT0_vect)
{
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	0b b6       	in	r0, 0x3b	; 59
 1d8:	0f 92       	push	r0
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	
	Reciever.setZeroCross(1);			// Bliver sat true hver gang der har været et cross
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	89 e1       	ldi	r24, 0x19	; 25
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	46 d0       	rcall	.+140    	; 0x288 <_ZN12RecieverLamp12setZeroCrossEi>
	
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <_GLOBAL__sub_I_Reciever>:

	
ISR(INT0_vect);
void initInterupt0();
void initADC();
RecieverLamp Reciever;
 222:	89 e1       	ldi	r24, 0x19	; 25
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	08 d0       	rcall	.+16     	; 0x238 <_ZN12RecieverLampC1Ev>
UART uart_;
 228:	88 e1       	ldi	r24, 0x18	; 24
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	97 c1       	rjmp	.+814    	; 0x55c <_ZN4UARTC1Ev>
 22e:	08 95       	ret

00000230 <_GLOBAL__sub_D_Reciever>:

	
ISR(INT0_vect);
void initInterupt0();
void initADC();
RecieverLamp Reciever;
 230:	89 e1       	ldi	r24, 0x19	; 25
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	28 c0       	rjmp	.+80     	; 0x286 <_ZN12RecieverLampD1Ev>
 236:	08 95       	ret

00000238 <_ZN12RecieverLampC1Ev>:
{
		return nyesteBit_;		
}
void RecieverLamp::setNyesteBit(int nyestebit)
{
		nyesteBit_ = nyestebit;
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	fc 01       	movw	r30, r24
 244:	11 82       	std	Z+1, r1	; 0x01
 246:	10 82       	st	Z, r1
 248:	13 82       	std	Z+3, r1	; 0x03
 24a:	12 82       	std	Z+2, r1	; 0x02
 24c:	17 86       	std	Z+15, r1	; 0x0f
 24e:	16 86       	std	Z+14, r1	; 0x0e
 250:	11 8a       	std	Z+17, r1	; 0x11
 252:	10 8a       	std	Z+16, r1	; 0x10
 254:	15 82       	std	Z+5, r1	; 0x05
 256:	14 82       	std	Z+4, r1	; 0x04
 258:	8e e0       	ldi	r24, 0x0E	; 14
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	97 83       	std	Z+7, r25	; 0x07
 25e:	86 83       	std	Z+6, r24	; 0x06
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	91 87       	std	Z+9, r25	; 0x09
 266:	80 87       	std	Z+8, r24	; 0x08
 268:	85 e1       	ldi	r24, 0x15	; 21
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	93 87       	std	Z+11, r25	; 0x0b
 26e:	82 87       	std	Z+10, r24	; 0x0a
 270:	8a e2       	ldi	r24, 0x2A	; 42
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	95 87       	std	Z+13, r25	; 0x0d
 276:	84 87       	std	Z+12, r24	; 0x0c
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	6f d1       	rcall	.+734    	; 0x55c <_ZN4UARTC1Ev>
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <_ZN12RecieverLampD1Ev>:
 286:	08 95       	ret

00000288 <_ZN12RecieverLamp12setZeroCrossEi>:
 288:	fc 01       	movw	r30, r24
 28a:	71 83       	std	Z+1, r23	; 0x01
 28c:	60 83       	st	Z, r22
 28e:	08 95       	ret

00000290 <_ZN12RecieverLamp14setAdresseBitsEv>:
	
	return 1;
	
}
void RecieverLamp::setAdresseBits()
{
 290:	fc 01       	movw	r30, r24
	while (PINA & 0b01000000)
	{
		if ((PINA & 0b00000001) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000001;
 292:	81 e0       	ldi	r24, 0x01	; 1
		}
		if ((PINA & 0b00000010) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000010;
 294:	52 e0       	ldi	r21, 0x02	; 2
		}
		if ((PINA & 0b00000100) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000100;
 296:	44 e0       	ldi	r20, 0x04	; 4
		}
		if ((PINA & 0b00001000) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00001000;
 298:	38 e0       	ldi	r19, 0x08	; 8
		}
		if ((PINA & 0b00010000) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00010000;
 29a:	20 e1       	ldi	r18, 0x10	; 16
		}
		if ((PINA & 0b00100000) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00100000;
 29c:	60 e2       	ldi	r22, 0x20	; 32
	return 1;
	
}
void RecieverLamp::setAdresseBits()
{
	while (PINA & 0b01000000)
 29e:	06 9b       	sbis	0x00, 6	; 0
 2a0:	55 c0       	rjmp	.+170    	; 0x34c <_ZN12RecieverLamp14setAdresseBitsEv+0xbc>
	{
		if ((PINA & 0b00000001) == 0)
 2a2:	00 99       	sbic	0x00, 0	; 0
 2a4:	0c c0       	rjmp	.+24     	; 0x2be <_ZN12RecieverLamp14setAdresseBitsEv+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	7f ef       	ldi	r23, 0xFF	; 255
 2a8:	94 e3       	ldi	r25, 0x34	; 52
 2aa:	ac e0       	ldi	r26, 0x0C	; 12
 2ac:	71 50       	subi	r23, 0x01	; 1
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	a0 40       	sbci	r26, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <_ZN12RecieverLamp14setAdresseBitsEv+0x1c>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <_ZN12RecieverLamp14setAdresseBitsEv+0x26>
 2b6:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000001;
 2b8:	93 b1       	in	r25, 0x03	; 3
 2ba:	98 27       	eor	r25, r24
 2bc:	95 b9       	out	0x05, r25	; 5
		}
		if ((PINA & 0b00000010) == 0)
 2be:	01 99       	sbic	0x00, 1	; 0
 2c0:	0c c0       	rjmp	.+24     	; 0x2da <_ZN12RecieverLamp14setAdresseBitsEv+0x4a>
 2c2:	7f ef       	ldi	r23, 0xFF	; 255
 2c4:	94 e3       	ldi	r25, 0x34	; 52
 2c6:	ac e0       	ldi	r26, 0x0C	; 12
 2c8:	71 50       	subi	r23, 0x01	; 1
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	a0 40       	sbci	r26, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <_ZN12RecieverLamp14setAdresseBitsEv+0x38>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <_ZN12RecieverLamp14setAdresseBitsEv+0x42>
 2d2:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000010;
 2d4:	93 b1       	in	r25, 0x03	; 3
 2d6:	95 27       	eor	r25, r21
 2d8:	95 b9       	out	0x05, r25	; 5
		}
		if ((PINA & 0b00000100) == 0)
 2da:	02 99       	sbic	0x00, 2	; 0
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <_ZN12RecieverLamp14setAdresseBitsEv+0x66>
 2de:	7f ef       	ldi	r23, 0xFF	; 255
 2e0:	94 e3       	ldi	r25, 0x34	; 52
 2e2:	ac e0       	ldi	r26, 0x0C	; 12
 2e4:	71 50       	subi	r23, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <_ZN12RecieverLamp14setAdresseBitsEv+0x54>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <_ZN12RecieverLamp14setAdresseBitsEv+0x5e>
 2ee:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000100;
 2f0:	93 b1       	in	r25, 0x03	; 3
 2f2:	94 27       	eor	r25, r20
 2f4:	95 b9       	out	0x05, r25	; 5
		}
		if ((PINA & 0b00001000) == 0)
 2f6:	03 99       	sbic	0x00, 3	; 0
 2f8:	0c c0       	rjmp	.+24     	; 0x312 <_ZN12RecieverLamp14setAdresseBitsEv+0x82>
 2fa:	7f ef       	ldi	r23, 0xFF	; 255
 2fc:	94 e3       	ldi	r25, 0x34	; 52
 2fe:	ac e0       	ldi	r26, 0x0C	; 12
 300:	71 50       	subi	r23, 0x01	; 1
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	a0 40       	sbci	r26, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <_ZN12RecieverLamp14setAdresseBitsEv+0x70>
 308:	00 c0       	rjmp	.+0      	; 0x30a <_ZN12RecieverLamp14setAdresseBitsEv+0x7a>
 30a:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00001000;
 30c:	93 b1       	in	r25, 0x03	; 3
 30e:	93 27       	eor	r25, r19
 310:	95 b9       	out	0x05, r25	; 5
		}
		if ((PINA & 0b00010000) == 0)
 312:	04 99       	sbic	0x00, 4	; 0
 314:	0c c0       	rjmp	.+24     	; 0x32e <_ZN12RecieverLamp14setAdresseBitsEv+0x9e>
 316:	7f ef       	ldi	r23, 0xFF	; 255
 318:	94 e3       	ldi	r25, 0x34	; 52
 31a:	ac e0       	ldi	r26, 0x0C	; 12
 31c:	71 50       	subi	r23, 0x01	; 1
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	a0 40       	sbci	r26, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <_ZN12RecieverLamp14setAdresseBitsEv+0x8c>
 324:	00 c0       	rjmp	.+0      	; 0x326 <_ZN12RecieverLamp14setAdresseBitsEv+0x96>
 326:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00010000;
 328:	93 b1       	in	r25, 0x03	; 3
 32a:	92 27       	eor	r25, r18
 32c:	95 b9       	out	0x05, r25	; 5
		}
		if ((PINA & 0b00100000) == 0)
 32e:	05 99       	sbic	0x00, 5	; 0
 330:	b6 cf       	rjmp	.-148    	; 0x29e <_ZN12RecieverLamp14setAdresseBitsEv+0xe>
 332:	7f ef       	ldi	r23, 0xFF	; 255
 334:	94 e3       	ldi	r25, 0x34	; 52
 336:	ac e0       	ldi	r26, 0x0C	; 12
 338:	71 50       	subi	r23, 0x01	; 1
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	a0 40       	sbci	r26, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <_ZN12RecieverLamp14setAdresseBitsEv+0xa8>
 340:	00 c0       	rjmp	.+0      	; 0x342 <_ZN12RecieverLamp14setAdresseBitsEv+0xb2>
 342:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00100000;
 344:	93 b1       	in	r25, 0x03	; 3
 346:	96 27       	eor	r25, r22
 348:	95 b9       	out	0x05, r25	; 5
 34a:	a9 cf       	rjmp	.-174    	; 0x29e <_ZN12RecieverLamp14setAdresseBitsEv+0xe>
		}
	}
		adresseBits_ = PINB;
 34c:	83 b1       	in	r24, 0x03	; 3
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	93 87       	std	Z+11, r25	; 0x0b
 352:	82 87       	std	Z+10, r24	; 0x0a
 354:	08 95       	ret

00000356 <_ZN12RecieverLamp14getAdresseBitsEv>:
}
int RecieverLamp::getAdresseBits()
{
	return adresseBits_;
}
 356:	fc 01       	movw	r30, r24
 358:	82 85       	ldd	r24, Z+10	; 0x0a
 35a:	93 85       	ldd	r25, Z+11	; 0x0b
 35c:	08 95       	ret

0000035e <_ZN12RecieverLamp7readADCEv>:
	}
	
	return 1;
}

void RecieverLamp::readADC(){
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
	
	//// timer
	TCNT0 = 201;
 364:	89 ec       	ldi	r24, 0xC9	; 201
 366:	86 bd       	out	0x26, r24	; 38
	TCCR0A |= 0b00000000; // starter timer
 368:	84 b5       	in	r24, 0x24	; 36
 36a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0b00000101;
 36c:	85 b5       	in	r24, 0x25	; 37
 36e:	85 60       	ori	r24, 0x05	; 5
 370:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<0)) == 0)
 372:	a8 9b       	sbis	0x15, 0	; 21
 374:	fe cf       	rjmp	.-4      	; 0x372 <_ZN12RecieverLamp7readADCEv+0x14>
	{}
	TCCR0B = 0b00000000; // slut timer
 376:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	85 bb       	out	0x15, r24	; 21
	//// timer
	
	////ADC start
	ADCSRA |= 0b01000000;
 37c:	ea e7       	ldi	r30, 0x7A	; 122
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 64       	ori	r24, 0x40	; 64
 384:	80 83       	st	Z, r24
			
	while (ADCSRA & 0b01000000)
 386:	80 81       	ld	r24, Z
 388:	86 fd       	sbrc	r24, 6
 38a:	fd cf       	rjmp	.-6      	; 0x386 <_ZN12RecieverLamp7readADCEv+0x28>
	{}
	
	ADCread_ = ADCW;
 38c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 390:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 394:	7f 87       	std	Y+15, r23	; 0x0f
 396:	6e 87       	std	Y+14, r22	; 0x0e
	////ADC slut
	////sendet ud på uart
	uart_->SendInteger(ADCread_);
 398:	88 8d       	ldd	r24, Y+24	; 0x18
 39a:	99 8d       	ldd	r25, Y+25	; 0x19
 39c:	08 d1       	rcall	.+528    	; 0x5ae <_ZN4UART11SendIntegerEi>
	uart_->SendString("\\");
 39e:	65 e1       	ldi	r22, 0x15	; 21
 3a0:	72 e0       	ldi	r23, 0x02	; 2
 3a2:	88 8d       	ldd	r24, Y+24	; 0x18
 3a4:	99 8d       	ldd	r25, Y+25	; 0x19
 3a6:	ef d0       	rcall	.+478    	; 0x586 <_ZN4UART10SendStringEPc>
	

	////sætter nyeste bit alt efter hvad adc giver af værdi
	if ((ADCread_ > ADClastRead_) && (ADCread_> 5))
 3a8:	8e 85       	ldd	r24, Y+14	; 0x0e
 3aa:	9f 85       	ldd	r25, Y+15	; 0x0f
 3ac:	28 89       	ldd	r18, Y+16	; 0x10
 3ae:	39 89       	ldd	r19, Y+17	; 0x11
 3b0:	28 17       	cp	r18, r24
 3b2:	39 07       	cpc	r19, r25
 3b4:	44 f4       	brge	.+16     	; 0x3c6 <_ZN12RecieverLamp7readADCEv+0x68>
 3b6:	86 30       	cpi	r24, 0x06	; 6
 3b8:	91 05       	cpc	r25, r1
 3ba:	2c f0       	brlt	.+10     	; 0x3c6 <_ZN12RecieverLamp7readADCEv+0x68>
	{
		nyesteBit_ = 1;			
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	3b 83       	std	Y+3, r19	; 0x03
 3c2:	2a 83       	std	Y+2, r18	; 0x02
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <_ZN12RecieverLamp7readADCEv+0x6c>
	}								
	else
	{
		nyesteBit_ = 0; 
 3c6:	1b 82       	std	Y+3, r1	; 0x03
 3c8:	1a 82       	std	Y+2, r1	; 0x02
	}
	ADClastRead_ = ADCread_;
 3ca:	99 8b       	std	Y+17, r25	; 0x11
 3cc:	88 8b       	std	Y+16, r24	; 0x10
	
	uart_->SendInteger(nyesteBit_);
 3ce:	6a 81       	ldd	r22, Y+2	; 0x02
 3d0:	7b 81       	ldd	r23, Y+3	; 0x03
 3d2:	88 8d       	ldd	r24, Y+24	; 0x18
 3d4:	99 8d       	ldd	r25, Y+25	; 0x19
 3d6:	eb d0       	rcall	.+470    	; 0x5ae <_ZN4UART11SendIntegerEi>
	uart_->SendString("\\");	
 3d8:	65 e1       	ldi	r22, 0x15	; 21
 3da:	72 e0       	ldi	r23, 0x02	; 2
 3dc:	88 8d       	ldd	r24, Y+24	; 0x18
 3de:	99 8d       	ldd	r25, Y+25	; 0x19
 3e0:	d2 d0       	rcall	.+420    	; 0x586 <_ZN4UART10SendStringEPc>
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <_ZN12RecieverLamp13readStartBitsEv>:
void RecieverLamp::setNyesteBit(int nyestebit)
{
		nyesteBit_ = nyestebit;
}

int RecieverLamp::readStartBits(){
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 3ee:	1d 82       	std	Y+5, r1	; 0x05
 3f0:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 3f2:	1b 8a       	std	Y+19, r1	; 0x13
 3f4:	1a 8a       	std	Y+18, r1	; 0x12
	while(startBits_ != seneste6Bits_){
 3f6:	4e 81       	ldd	r20, Y+6	; 0x06
 3f8:	5f 81       	ldd	r21, Y+7	; 0x07
 3fa:	2c 81       	ldd	r18, Y+4	; 0x04
 3fc:	3d 81       	ldd	r19, Y+5	; 0x05
 3fe:	42 17       	cp	r20, r18
 400:	53 07       	cpc	r21, r19
 402:	e1 f0       	breq	.+56     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			if (zeroCross_ == 1)
 404:	88 81       	ld	r24, Y
 406:	99 81       	ldd	r25, Y+1	; 0x01
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	c9 f7       	brne	.-14     	; 0x3fe <_ZN12RecieverLamp13readStartBitsEv+0x16>
			{
				if (counter_ <= 6)
 40c:	8a 89       	ldd	r24, Y+18	; 0x12
 40e:	9b 89       	ldd	r25, Y+19	; 0x13
 410:	07 97       	sbiw	r24, 0x07	; 7
 412:	bc f4       	brge	.+46     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				{
				
				readADC();
 414:	ce 01       	movw	r24, r28
 416:	a3 df       	rcall	.-186    	; 0x35e <_ZN12RecieverLamp7readADCEv>
				
				seneste6Bits_ = seneste6Bits_ << 1;
				seneste6Bits_ |= nyesteBit_; 
 418:	8c 81       	ldd	r24, Y+4	; 0x04
 41a:	9d 81       	ldd	r25, Y+5	; 0x05
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	2a 81       	ldd	r18, Y+2	; 0x02
 422:	3b 81       	ldd	r19, Y+3	; 0x03
 424:	82 2b       	or	r24, r18
 426:	93 2b       	or	r25, r19
 428:	9d 83       	std	Y+5, r25	; 0x05
 42a:	8c 83       	std	Y+4, r24	; 0x04
				//PORTB = seneste6Bits_;
			
				zeroCross_ = 0;
 42c:	19 82       	std	Y+1, r1	; 0x01
 42e:	18 82       	st	Y, r1
				// PORTB ^= (1<<6);		bruges til at teste
				counter_++;
 430:	8a 89       	ldd	r24, Y+18	; 0x12
 432:	9b 89       	ldd	r25, Y+19	; 0x13
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	9b 8b       	std	Y+19, r25	; 0x13
 438:	8a 8b       	std	Y+18, r24	; 0x12
 43a:	dd cf       	rjmp	.-70     	; 0x3f6 <_ZN12RecieverLamp13readStartBitsEv+0xe>
				}
			}
	}
	
	
	return 1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				zeroCross_ = 0;
				// PORTB ^= (1<<6);		bruges til at teste
				counter_++;
				}
				else{
					return 0;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return 1;
	
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <_ZN12RecieverLamp15readAdresseBitsEv>:
int RecieverLamp::readAdresseBits(){
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 452:	1d 82       	std	Y+5, r1	; 0x05
 454:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 456:	1b 8a       	std	Y+19, r1	; 0x13
 458:	1a 8a       	std	Y+18, r1	; 0x12
	
	while(adresseBits_ != seneste6Bits_){
 45a:	4a 85       	ldd	r20, Y+10	; 0x0a
 45c:	5b 85       	ldd	r21, Y+11	; 0x0b
 45e:	2c 81       	ldd	r18, Y+4	; 0x04
 460:	3d 81       	ldd	r19, Y+5	; 0x05
 462:	42 17       	cp	r20, r18
 464:	53 07       	cpc	r21, r19
 466:	b9 f0       	breq	.+46     	; 0x496 <_ZN12RecieverLamp15readAdresseBitsEv+0x4a>
		if (zeroCross_ == 1)
 468:	88 81       	ld	r24, Y
 46a:	99 81       	ldd	r25, Y+1	; 0x01
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	c9 f7       	brne	.-14     	; 0x462 <_ZN12RecieverLamp15readAdresseBitsEv+0x16>
		{
			if (counter_ <= 6){
 470:	8a 89       	ldd	r24, Y+18	; 0x12
 472:	9b 89       	ldd	r25, Y+19	; 0x13
 474:	07 97       	sbiw	r24, 0x07	; 7
 476:	94 f4       	brge	.+36     	; 0x49c <_ZN12RecieverLamp15readAdresseBitsEv+0x50>
			readADC();
 478:	ce 01       	movw	r24, r28
 47a:	71 df       	rcall	.-286    	; 0x35e <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 47c:	8c 81       	ldd	r24, Y+4	; 0x04
 47e:	9d 81       	ldd	r25, Y+5	; 0x05
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	2a 81       	ldd	r18, Y+2	; 0x02
 486:	3b 81       	ldd	r19, Y+3	; 0x03
 488:	82 2b       	or	r24, r18
 48a:	93 2b       	or	r25, r19
 48c:	9d 83       	std	Y+5, r25	; 0x05
 48e:	8c 83       	std	Y+4, r24	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 490:	19 82       	std	Y+1, r1	; 0x01
 492:	18 82       	st	Y, r1
 494:	e2 cf       	rjmp	.-60     	; 0x45a <_ZN12RecieverLamp15readAdresseBitsEv+0xe>
				return 0;
			}
		}
	}
	
	return 1;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <_ZN12RecieverLamp15readAdresseBitsEv+0x54>
			
			zeroCross_ = 0;
			// PORTB ^= (1<<6);		bruges til at teste
			
			}else{
				return 0;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	return 1;
	
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <_ZN12RecieverLamp12readDataBitsEv>:
}
int RecieverLamp::getAdresseBits()
{
	return adresseBits_;
}
int RecieverLamp::readDataBits(){
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 4ac:	1d 82       	std	Y+5, r1	; 0x05
 4ae:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 4b0:	1b 8a       	std	Y+19, r1	; 0x13
 4b2:	1a 8a       	std	Y+18, r1	; 0x12
	while(kommandoBits_ != seneste6Bits_){
 4b4:	8c 85       	ldd	r24, Y+12	; 0x0c
 4b6:	9d 85       	ldd	r25, Y+13	; 0x0d
 4b8:	89 2b       	or	r24, r25
 4ba:	d9 f0       	breq	.+54     	; 0x4f2 <_ZN12RecieverLamp12readDataBitsEv+0x4c>
		if (zeroCross_ == 1)
 4bc:	88 81       	ld	r24, Y
 4be:	99 81       	ldd	r25, Y+1	; 0x01
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	d1 f4       	brne	.+52     	; 0x4f8 <_ZN12RecieverLamp12readDataBitsEv+0x52>
		{
			if (counter_ <= 6){}
			readADC();
 4c4:	ce 01       	movw	r24, r28
 4c6:	4b df       	rcall	.-362    	; 0x35e <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 4c8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ca:	3d 81       	ldd	r19, Y+5	; 0x05
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	9b 81       	ldd	r25, Y+3	; 0x03
 4d4:	28 2b       	or	r18, r24
 4d6:	39 2b       	or	r19, r25
 4d8:	3d 83       	std	Y+5, r19	; 0x05
 4da:	2c 83       	std	Y+4, r18	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 4dc:	19 82       	std	Y+1, r1	; 0x01
 4de:	18 82       	st	Y, r1
			// PORTB ^= (1<<6);		bruges til at teste
			
			}else{
				return 0;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	4c 85       	ldd	r20, Y+12	; 0x0c
 4e6:	5d 85       	ldd	r21, Y+13	; 0x0d
 4e8:	42 17       	cp	r20, r18
 4ea:	53 07       	cpc	r21, r19
 4ec:	39 f0       	breq	.+14     	; 0x4fc <_ZN12RecieverLamp12readDataBitsEv+0x56>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <_ZN12RecieverLamp12readDataBitsEv+0x56>
			}
	}
	
	return 1;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <_ZN12RecieverLamp12readDataBitsEv+0x56>
			
			zeroCross_ = 0;
			// PORTB ^= (1<<6);		bruges til at teste
			
			}else{
				return 0;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
			}
	}
	
	return 1;
	
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <_ZN12RecieverLamp12readStopBitsEv>:
int RecieverLamp::readStopBits(){
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 508:	1d 82       	std	Y+5, r1	; 0x05
 50a:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 50c:	1b 8a       	std	Y+19, r1	; 0x13
 50e:	1a 8a       	std	Y+18, r1	; 0x12
	while(stopBits_ != seneste6Bits_){
 510:	48 85       	ldd	r20, Y+8	; 0x08
 512:	59 85       	ldd	r21, Y+9	; 0x09
 514:	2c 81       	ldd	r18, Y+4	; 0x04
 516:	3d 81       	ldd	r19, Y+5	; 0x05
 518:	42 17       	cp	r20, r18
 51a:	53 07       	cpc	r21, r19
 51c:	b9 f0       	breq	.+46     	; 0x54c <_ZN12RecieverLamp12readStopBitsEv+0x4a>
		if (zeroCross_ == 1)
 51e:	88 81       	ld	r24, Y
 520:	99 81       	ldd	r25, Y+1	; 0x01
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	c9 f7       	brne	.-14     	; 0x518 <_ZN12RecieverLamp12readStopBitsEv+0x16>
		{
			if (counter_ <= 6){
 526:	8a 89       	ldd	r24, Y+18	; 0x12
 528:	9b 89       	ldd	r25, Y+19	; 0x13
 52a:	07 97       	sbiw	r24, 0x07	; 7
 52c:	94 f4       	brge	.+36     	; 0x552 <_ZN12RecieverLamp12readStopBitsEv+0x50>
			readADC();
 52e:	ce 01       	movw	r24, r28
 530:	16 df       	rcall	.-468    	; 0x35e <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 532:	8c 81       	ldd	r24, Y+4	; 0x04
 534:	9d 81       	ldd	r25, Y+5	; 0x05
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	2a 81       	ldd	r18, Y+2	; 0x02
 53c:	3b 81       	ldd	r19, Y+3	; 0x03
 53e:	82 2b       	or	r24, r18
 540:	93 2b       	or	r25, r19
 542:	9d 83       	std	Y+5, r25	; 0x05
 544:	8c 83       	std	Y+4, r24	; 0x04
			
			zeroCross_ = 0;
 546:	19 82       	std	Y+1, r1	; 0x01
 548:	18 82       	st	Y, r1
 54a:	e2 cf       	rjmp	.-60     	; 0x510 <_ZN12RecieverLamp12readStopBitsEv+0xe>
				return 0;
			}
		}
	}
	
	return 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <_ZN12RecieverLamp12readStopBitsEv+0x54>
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
			
			zeroCross_ = 0;
			}else{
				return 0;
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	
	return 1;
}
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <_ZN4UARTC1Ev>:
 55c:	88 e9       	ldi	r24, 0x98	; 152
 55e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 562:	87 e6       	ldi	r24, 0x67	; 103
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 56a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 56e:	86 e0       	ldi	r24, 0x06	; 6
 570:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 574:	08 95       	ret

00000576 <_ZN4UART8SendCharEc>:
 576:	e0 ec       	ldi	r30, 0xC0	; 192
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	85 ff       	sbrs	r24, 5
 57e:	fd cf       	rjmp	.-6      	; 0x57a <_ZN4UART8SendCharEc+0x4>
 580:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 584:	08 95       	ret

00000586 <_ZN4UART10SendStringEPc>:
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	eb 01       	movw	r28, r22
 590:	68 81       	ld	r22, Y
 592:	66 23       	and	r22, r22
 594:	39 f0       	breq	.+14     	; 0x5a4 <_ZN4UART10SendStringEPc+0x1e>
 596:	8c 01       	movw	r16, r24
 598:	21 96       	adiw	r28, 0x01	; 1
 59a:	c8 01       	movw	r24, r16
 59c:	ec df       	rcall	.-40     	; 0x576 <_ZN4UART8SendCharEc>
 59e:	69 91       	ld	r22, Y+
 5a0:	61 11       	cpse	r22, r1
 5a2:	fb cf       	rjmp	.-10     	; 0x59a <_ZN4UART10SendStringEPc+0x14>
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	08 95       	ret

000005ae <_ZN4UART11SendIntegerEi>:
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	27 97       	sbiw	r28, 0x07	; 7
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	8c 01       	movw	r16, r24
 5c8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5ca:	4a e0       	ldi	r20, 0x0A	; 10
 5cc:	be 01       	movw	r22, r28
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	18 d0       	rcall	.+48     	; 0x604 <__itoa_ncheck>
 5d4:	be 01       	movw	r22, r28
 5d6:	6f 5f       	subi	r22, 0xFF	; 255
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	c8 01       	movw	r24, r16
 5dc:	d4 df       	rcall	.-88     	; 0x586 <_ZN4UART10SendStringEPc>
 5de:	27 96       	adiw	r28, 0x07	; 7
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	08 95       	ret

000005f4 <__tablejump2__>:
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	88 1f       	adc	r24, r24
 5fa:	8b bf       	out	0x3b, r24	; 59
 5fc:	07 90       	elpm	r0, Z+
 5fe:	f6 91       	elpm	r31, Z
 600:	e0 2d       	mov	r30, r0
 602:	19 94       	eijmp

00000604 <__itoa_ncheck>:
 604:	bb 27       	eor	r27, r27
 606:	4a 30       	cpi	r20, 0x0A	; 10
 608:	31 f4       	brne	.+12     	; 0x616 <__itoa_ncheck+0x12>
 60a:	99 23       	and	r25, r25
 60c:	22 f4       	brpl	.+8      	; 0x616 <__itoa_ncheck+0x12>
 60e:	bd e2       	ldi	r27, 0x2D	; 45
 610:	90 95       	com	r25
 612:	81 95       	neg	r24
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	01 c0       	rjmp	.+2      	; 0x61a <__utoa_common>

00000618 <__utoa_ncheck>:
 618:	bb 27       	eor	r27, r27

0000061a <__utoa_common>:
 61a:	fb 01       	movw	r30, r22
 61c:	55 27       	eor	r21, r21
 61e:	aa 27       	eor	r26, r26
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	aa 1f       	adc	r26, r26
 626:	a4 17       	cp	r26, r20
 628:	10 f0       	brcs	.+4      	; 0x62e <__utoa_common+0x14>
 62a:	a4 1b       	sub	r26, r20
 62c:	83 95       	inc	r24
 62e:	50 51       	subi	r21, 0x10	; 16
 630:	b9 f7       	brne	.-18     	; 0x620 <__utoa_common+0x6>
 632:	a0 5d       	subi	r26, 0xD0	; 208
 634:	aa 33       	cpi	r26, 0x3A	; 58
 636:	08 f0       	brcs	.+2      	; 0x63a <__utoa_common+0x20>
 638:	a9 5d       	subi	r26, 0xD9	; 217
 63a:	a1 93       	st	Z+, r26
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	79 f7       	brne	.-34     	; 0x61e <__utoa_common+0x4>
 640:	b1 11       	cpse	r27, r1
 642:	b1 93       	st	Z+, r27
 644:	11 92       	st	Z+, r1
 646:	cb 01       	movw	r24, r22
 648:	00 c0       	rjmp	.+0      	; 0x64a <strrev>

0000064a <strrev>:
 64a:	dc 01       	movw	r26, r24
 64c:	fc 01       	movw	r30, r24
 64e:	67 2f       	mov	r22, r23
 650:	71 91       	ld	r23, Z+
 652:	77 23       	and	r23, r23
 654:	e1 f7       	brne	.-8      	; 0x64e <strrev+0x4>
 656:	32 97       	sbiw	r30, 0x02	; 2
 658:	04 c0       	rjmp	.+8      	; 0x662 <strrev+0x18>
 65a:	7c 91       	ld	r23, X
 65c:	6d 93       	st	X+, r22
 65e:	70 83       	st	Z, r23
 660:	62 91       	ld	r22, -Z
 662:	ae 17       	cp	r26, r30
 664:	bf 07       	cpc	r27, r31
 666:	c8 f3       	brcs	.-14     	; 0x65a <strrev+0x10>
 668:	08 95       	ret

0000066a <__do_global_dtors>:
 66a:	10 e0       	ldi	r17, 0x00	; 0
 66c:	c3 e7       	ldi	r28, 0x73	; 115
 66e:	d0 e0       	ldi	r29, 0x00	; 0
 670:	00 e0       	ldi	r16, 0x00	; 0
 672:	05 c0       	rjmp	.+10     	; 0x67e <__do_global_dtors+0x14>
 674:	80 2f       	mov	r24, r16
 676:	fe 01       	movw	r30, r28
 678:	bd df       	rcall	.-134    	; 0x5f4 <__tablejump2__>
 67a:	21 96       	adiw	r28, 0x01	; 1
 67c:	01 1d       	adc	r16, r1
 67e:	c4 37       	cpi	r28, 0x74	; 116
 680:	d1 07       	cpc	r29, r17
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 07       	cpc	r16, r24
 686:	b1 f7       	brne	.-20     	; 0x674 <__do_global_dtors+0xa>
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
