
Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000678  0000070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800214  00800214  00000720  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e81  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001142  00000000  00000000  00002719  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fc  00000000  00000000  0000385b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00004158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba1  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000899  00000000  00000000  00004f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
   2:	00 00       	nop
   4:	de c0       	rjmp	.+444    	; 0x1c2 <__vector_1>
   6:	00 00       	nop
   8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
   a:	00 00       	nop
   c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
   e:	00 00       	nop
  10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
  12:	00 00       	nop
  14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
  16:	00 00       	nop
  18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
  1e:	00 00       	nop
  20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
  26:	00 00       	nop
  28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
  2e:	00 00       	nop
  30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
  32:	00 00       	nop
  34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
  36:	00 00       	nop
  38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
  46:	00 00       	nop
  48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
  4e:	00 00       	nop
  50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
  56:	00 00       	nop
  58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
  5e:	00 00       	nop
  60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
  62:	00 00       	nop
  64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
  66:	00 00       	nop
  68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
  6e:	00 00       	nop
  70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
  72:	00 00       	nop
  74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
  76:	00 00       	nop
  78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
  7e:	00 00       	nop
  80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
  82:	00 00       	nop
  84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
  86:	00 00       	nop
  88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
  8e:	00 00       	nop
  90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
  92:	00 00       	nop
  94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
  96:	00 00       	nop
  98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
  be:	00 00       	nop
  c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
  da:	00 00       	nop
  dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
  de:	00 00       	nop
  e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	0c 01       	movw	r0, r24

000000e6 <__ctors_end>:
  e6:	13 01       	movw	r2, r6

000000e8 <__dtors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d1 e2       	ldi	r29, 0x21	; 33
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
  f8:	12 e0       	ldi	r17, 0x02	; 2
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b2 e0       	ldi	r27, 0x02	; 2
  fe:	e8 e7       	ldi	r30, 0x78	; 120
 100:	f6 e0       	ldi	r31, 0x06	; 6
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a4 31       	cpi	r26, 0x14	; 20
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	a4 e1       	ldi	r26, 0x14	; 20
 116:	b2 e0       	ldi	r27, 0x02	; 2
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	af 32       	cpi	r26, 0x2F	; 47
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	c3 e7       	ldi	r28, 0x73	; 115
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__do_global_ctors+0x14>
 12c:	21 97       	sbiw	r28, 0x01	; 1
 12e:	01 09       	sbc	r16, r1
 130:	80 2f       	mov	r24, r16
 132:	fe 01       	movw	r30, r28
 134:	55 d2       	rcall	.+1194   	; 0x5e0 <__tablejump2__>
 136:	c2 37       	cpi	r28, 0x72	; 114
 138:	d1 07       	cpc	r29, r17
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 07       	cpc	r16, r24
 13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xa>
 140:	13 d0       	rcall	.+38     	; 0x168 <main>
 142:	89 c2       	rjmp	.+1298   	; 0x656 <__do_global_dtors>

00000144 <__bad_interrupt>:
 144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <_Z13initInterupt0v>:
RecieverLamp Reciever;
UART uart_;

void initInterupt0()				// Int0 Gøres klar
{
	sei();
 146:	78 94       	sei
	EIMSK |= 0b00000001;
 148:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;
 14a:	e9 e6       	ldi	r30, 0x69	; 105
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <_Z7initADCv>:
	
}

void initADC()						// ADC bliver klar gjordt
{
	ADCSRA = 0b10000111;
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADMUX = 0b01000000;
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRB = 0b00000000;
 162:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 166:	08 95       	ret

00000168 <main>:
	
}

int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	UART uart;
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	e8 d1       	rcall	.+976    	; 0x548 <_ZN4UARTC1Ev>
	
	DDRF = 0;
 178:	10 ba       	out	0x10, r1	; 16
	DDRD = 0;			//Sætter IO pins kan tilføjes i en funktion
 17a:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
	initInterupt0();
 180:	15 b8       	out	0x05, r1	; 5
	initADC();
 182:	e1 df       	rcall	.-62     	; 0x146 <_Z13initInterupt0v>
	
	Reciever.setAdresseBits();
 184:	e8 df       	rcall	.-48     	; 0x156 <_Z7initADCv>
 186:	85 e1       	ldi	r24, 0x15	; 21
 188:	92 e0       	ldi	r25, 0x02	; 2
	
	uart.SendInteger(Reciever.getAdresseBits());
 18a:	7d d0       	rcall	.+250    	; 0x286 <_ZN12RecieverLamp14setAdresseBitsEv>
 18c:	85 e1       	ldi	r24, 0x15	; 21
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	d8 d0       	rcall	.+432    	; 0x342 <_ZN12RecieverLamp14getAdresseBitsEv>
 192:	bc 01       	movw	r22, r24
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
	
	
	uart.SendString("program starter \n");
 198:	00 d2       	rcall	.+1024   	; 0x59a <_ZN4UART11SendIntegerEi>
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	72 e0       	ldi	r23, 0x02	; 2
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		if (Reciever.readStartBits() == 1)
 1a2:	e7 d1       	rcall	.+974    	; 0x572 <_ZN4UART10SendStringEPc>
 1a4:	85 e1       	ldi	r24, 0x15	; 21
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	15 d1       	rcall	.+554    	; 0x3d4 <_ZN12RecieverLamp13readStartBitsEv>
		{
			Reciever.readAdresseBits();
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <main+0x3c>
 1ae:	85 e1       	ldi	r24, 0x15	; 21
			Reciever.readDataBits();
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	42 d1       	rcall	.+644    	; 0x438 <_ZN12RecieverLamp15readAdresseBitsEv>
 1b4:	85 e1       	ldi	r24, 0x15	; 21
 1b6:	92 e0       	ldi	r25, 0x02	; 2
			Reciever.readStopBits();
 1b8:	6c d1       	rcall	.+728    	; 0x492 <_ZN12RecieverLamp12readDataBitsEv>
 1ba:	85 e1       	ldi	r24, 0x15	; 21
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	97 d1       	rcall	.+814    	; 0x4ee <_ZN12RecieverLamp12readStopBitsEv>
 1c0:	f1 cf       	rjmp	.-30     	; 0x1a4 <main+0x3c>

000001c2 <__vector_1>:
	}
}


ISR(INT0_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	
	Reciever.setZeroCross(1);			// Bliver sat true hver gang der har været et cross
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	85 e1       	ldi	r24, 0x15	; 21
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	46 d0       	rcall	.+140    	; 0x27e <_ZN12RecieverLamp12setZeroCrossEi>
	
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_GLOBAL__sub_I_Reciever>:

	
ISR(INT0_vect);
void initInterupt0();
void initADC();
RecieverLamp Reciever;
 218:	85 e1       	ldi	r24, 0x15	; 21
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	08 d0       	rcall	.+16     	; 0x22e <_ZN12RecieverLampC1Ev>
UART uart_;
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	92 c1       	rjmp	.+804    	; 0x548 <_ZN4UARTC1Ev>
 224:	08 95       	ret

00000226 <_GLOBAL__sub_D_Reciever>:

	
ISR(INT0_vect);
void initInterupt0();
void initADC();
RecieverLamp Reciever;
 226:	85 e1       	ldi	r24, 0x15	; 21
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	28 c0       	rjmp	.+80     	; 0x27c <_ZN12RecieverLampD1Ev>
 22c:	08 95       	ret

0000022e <_ZN12RecieverLampC1Ev>:
{
		return nyesteBit_;		
}
void RecieverLamp::setNyesteBit(int nyestebit)
{
		nyesteBit_ = nyestebit;
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	1f 92       	push	r1
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	fc 01       	movw	r30, r24
 23a:	11 82       	std	Z+1, r1	; 0x01
 23c:	10 82       	st	Z, r1
 23e:	13 82       	std	Z+3, r1	; 0x03
 240:	12 82       	std	Z+2, r1	; 0x02
 242:	17 86       	std	Z+15, r1	; 0x0f
 244:	16 86       	std	Z+14, r1	; 0x0e
 246:	11 8a       	std	Z+17, r1	; 0x11
 248:	10 8a       	std	Z+16, r1	; 0x10
 24a:	15 82       	std	Z+5, r1	; 0x05
 24c:	14 82       	std	Z+4, r1	; 0x04
 24e:	8e e0       	ldi	r24, 0x0E	; 14
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	97 83       	std	Z+7, r25	; 0x07
 254:	86 83       	std	Z+6, r24	; 0x06
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	91 87       	std	Z+9, r25	; 0x09
 25c:	80 87       	std	Z+8, r24	; 0x08
 25e:	85 e1       	ldi	r24, 0x15	; 21
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	93 87       	std	Z+11, r25	; 0x0b
 264:	82 87       	std	Z+10, r24	; 0x0a
 266:	8a e2       	ldi	r24, 0x2A	; 42
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	95 87       	std	Z+13, r25	; 0x0d
 26c:	84 87       	std	Z+12, r24	; 0x0c
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	6a d1       	rcall	.+724    	; 0x548 <_ZN4UARTC1Ev>
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <_ZN12RecieverLampD1Ev>:
 27c:	08 95       	ret

0000027e <_ZN12RecieverLamp12setZeroCrossEi>:
 27e:	fc 01       	movw	r30, r24
 280:	71 83       	std	Z+1, r23	; 0x01
 282:	60 83       	st	Z, r22
 284:	08 95       	ret

00000286 <_ZN12RecieverLamp14setAdresseBitsEv>:
	while (PINA & 0b01000000)
	{
		if ((PINA & 0b00000001) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000001;
 286:	51 e0       	ldi	r21, 0x01	; 1
		}
		if ((PINA & 0b00000010) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000010;
 288:	42 e0       	ldi	r20, 0x02	; 2
		}
		if ((PINA & 0b00000100) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000100;
 28a:	34 e0       	ldi	r19, 0x04	; 4
		}
		if ((PINA & 0b00001000) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00001000;
 28c:	28 e0       	ldi	r18, 0x08	; 8
		}
		if ((PINA & 0b00010000) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00010000;
 28e:	90 e1       	ldi	r25, 0x10	; 16
		}
		if ((PINA & 0b00100000) == 0)
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00100000;
 290:	60 e2       	ldi	r22, 0x20	; 32
	return 1;
	
}
void RecieverLamp::setAdresseBits()
{
	while (PINA & 0b01000000)
 292:	06 9b       	sbis	0x00, 6	; 0
 294:	55 c0       	rjmp	.+170    	; 0x340 <_ZN12RecieverLamp14setAdresseBitsEv+0xba>
	{
		if ((PINA & 0b00000001) == 0)
 296:	00 99       	sbic	0x00, 0	; 0
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <_ZN12RecieverLamp14setAdresseBitsEv+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	7f ef       	ldi	r23, 0xFF	; 255
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	ec e0       	ldi	r30, 0x0C	; 12
 2a0:	71 50       	subi	r23, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e0 40       	sbci	r30, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <_ZN12RecieverLamp14setAdresseBitsEv+0x1a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <_ZN12RecieverLamp14setAdresseBitsEv+0x24>
 2aa:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000001;
 2ac:	83 b1       	in	r24, 0x03	; 3
 2ae:	85 27       	eor	r24, r21
 2b0:	85 b9       	out	0x05, r24	; 5
		}
		if ((PINA & 0b00000010) == 0)
 2b2:	01 99       	sbic	0x00, 1	; 0
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <_ZN12RecieverLamp14setAdresseBitsEv+0x48>
 2b6:	7f ef       	ldi	r23, 0xFF	; 255
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	ec e0       	ldi	r30, 0x0C	; 12
 2bc:	71 50       	subi	r23, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	e0 40       	sbci	r30, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <_ZN12RecieverLamp14setAdresseBitsEv+0x36>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <_ZN12RecieverLamp14setAdresseBitsEv+0x40>
 2c6:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000010;
 2c8:	83 b1       	in	r24, 0x03	; 3
 2ca:	84 27       	eor	r24, r20
 2cc:	85 b9       	out	0x05, r24	; 5
		}
		if ((PINA & 0b00000100) == 0)
 2ce:	02 99       	sbic	0x00, 2	; 0
 2d0:	0c c0       	rjmp	.+24     	; 0x2ea <_ZN12RecieverLamp14setAdresseBitsEv+0x64>
 2d2:	7f ef       	ldi	r23, 0xFF	; 255
 2d4:	84 e3       	ldi	r24, 0x34	; 52
 2d6:	ec e0       	ldi	r30, 0x0C	; 12
 2d8:	71 50       	subi	r23, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e0 40       	sbci	r30, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <_ZN12RecieverLamp14setAdresseBitsEv+0x52>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <_ZN12RecieverLamp14setAdresseBitsEv+0x5c>
 2e2:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00000100;
 2e4:	83 b1       	in	r24, 0x03	; 3
 2e6:	83 27       	eor	r24, r19
 2e8:	85 b9       	out	0x05, r24	; 5
		}
		if ((PINA & 0b00001000) == 0)
 2ea:	03 99       	sbic	0x00, 3	; 0
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <_ZN12RecieverLamp14setAdresseBitsEv+0x80>
 2ee:	7f ef       	ldi	r23, 0xFF	; 255
 2f0:	84 e3       	ldi	r24, 0x34	; 52
 2f2:	ec e0       	ldi	r30, 0x0C	; 12
 2f4:	71 50       	subi	r23, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	e0 40       	sbci	r30, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <_ZN12RecieverLamp14setAdresseBitsEv+0x6e>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <_ZN12RecieverLamp14setAdresseBitsEv+0x78>
 2fe:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00001000;
 300:	83 b1       	in	r24, 0x03	; 3
 302:	82 27       	eor	r24, r18
 304:	85 b9       	out	0x05, r24	; 5
		}
		if ((PINA & 0b00010000) == 0)
 306:	04 99       	sbic	0x00, 4	; 0
 308:	0c c0       	rjmp	.+24     	; 0x322 <_ZN12RecieverLamp14setAdresseBitsEv+0x9c>
 30a:	7f ef       	ldi	r23, 0xFF	; 255
 30c:	84 e3       	ldi	r24, 0x34	; 52
 30e:	ec e0       	ldi	r30, 0x0C	; 12
 310:	71 50       	subi	r23, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	e0 40       	sbci	r30, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <_ZN12RecieverLamp14setAdresseBitsEv+0x8a>
 318:	00 c0       	rjmp	.+0      	; 0x31a <_ZN12RecieverLamp14setAdresseBitsEv+0x94>
 31a:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00010000;
 31c:	83 b1       	in	r24, 0x03	; 3
 31e:	89 27       	eor	r24, r25
 320:	85 b9       	out	0x05, r24	; 5
		}
		if ((PINA & 0b00100000) == 0)
 322:	05 99       	sbic	0x00, 5	; 0
 324:	b6 cf       	rjmp	.-148    	; 0x292 <_ZN12RecieverLamp14setAdresseBitsEv+0xc>
 326:	7f ef       	ldi	r23, 0xFF	; 255
 328:	84 e3       	ldi	r24, 0x34	; 52
 32a:	ec e0       	ldi	r30, 0x0C	; 12
 32c:	71 50       	subi	r23, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	e0 40       	sbci	r30, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <_ZN12RecieverLamp14setAdresseBitsEv+0xa6>
 334:	00 c0       	rjmp	.+0      	; 0x336 <_ZN12RecieverLamp14setAdresseBitsEv+0xb0>
 336:	00 00       	nop
		{
			_delay_ms(250);
			PORTB = PINB ^ 0b00100000;
 338:	83 b1       	in	r24, 0x03	; 3
 33a:	86 27       	eor	r24, r22
 33c:	85 b9       	out	0x05, r24	; 5
 33e:	a9 cf       	rjmp	.-174    	; 0x292 <_ZN12RecieverLamp14setAdresseBitsEv+0xc>
 340:	08 95       	ret

00000342 <_ZN12RecieverLamp14getAdresseBitsEv>:
	}
}
int RecieverLamp::getAdresseBits()
{
	return adresseBits_;
}
 342:	fc 01       	movw	r30, r24
 344:	82 85       	ldd	r24, Z+10	; 0x0a
 346:	93 85       	ldd	r25, Z+11	; 0x0b
 348:	08 95       	ret

0000034a <_ZN12RecieverLamp7readADCEv>:
	}
	
	return 1;
}

void RecieverLamp::readADC(){
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
	
	//// timer
	TCNT0 = 201;
 350:	89 ec       	ldi	r24, 0xC9	; 201
 352:	86 bd       	out	0x26, r24	; 38
	TCCR0A |= 0b00000000; // starter timer
 354:	84 b5       	in	r24, 0x24	; 36
 356:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0b00000101;
 358:	85 b5       	in	r24, 0x25	; 37
 35a:	85 60       	ori	r24, 0x05	; 5
 35c:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<0)) == 0)
 35e:	a8 9b       	sbis	0x15, 0	; 21
 360:	fe cf       	rjmp	.-4      	; 0x35e <_ZN12RecieverLamp7readADCEv+0x14>
	{}
	TCCR0B = 0b00000000; // slut timer
 362:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	85 bb       	out	0x15, r24	; 21
	//// timer
	
	////ADC start
	ADCSRA |= 0b01000000;
 368:	ea e7       	ldi	r30, 0x7A	; 122
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	80 83       	st	Z, r24
			
	while (ADCSRA & 0b01000000)
 372:	80 81       	ld	r24, Z
 374:	86 fd       	sbrc	r24, 6
 376:	fd cf       	rjmp	.-6      	; 0x372 <_ZN12RecieverLamp7readADCEv+0x28>
	{}
	
	ADCread_ = ADCW;
 378:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 37c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 380:	7f 87       	std	Y+15, r23	; 0x0f
 382:	6e 87       	std	Y+14, r22	; 0x0e
	////ADC slut
	////sendet ud på uart
	uart_->SendInteger(ADCread_);
 384:	88 8d       	ldd	r24, Y+24	; 0x18
 386:	99 8d       	ldd	r25, Y+25	; 0x19
 388:	08 d1       	rcall	.+528    	; 0x59a <_ZN4UART11SendIntegerEi>
	uart_->SendString("\\");
 38a:	62 e1       	ldi	r22, 0x12	; 18
 38c:	72 e0       	ldi	r23, 0x02	; 2
 38e:	88 8d       	ldd	r24, Y+24	; 0x18
 390:	99 8d       	ldd	r25, Y+25	; 0x19
 392:	ef d0       	rcall	.+478    	; 0x572 <_ZN4UART10SendStringEPc>
	

	////sætter nyeste bit alt efter hvad adc giver af værdi
	if ((ADCread_ > ADClastRead_) && (ADCread_> 5))
 394:	8e 85       	ldd	r24, Y+14	; 0x0e
 396:	9f 85       	ldd	r25, Y+15	; 0x0f
 398:	28 89       	ldd	r18, Y+16	; 0x10
 39a:	39 89       	ldd	r19, Y+17	; 0x11
 39c:	28 17       	cp	r18, r24
 39e:	39 07       	cpc	r19, r25
 3a0:	44 f4       	brge	.+16     	; 0x3b2 <_ZN12RecieverLamp7readADCEv+0x68>
 3a2:	86 30       	cpi	r24, 0x06	; 6
 3a4:	91 05       	cpc	r25, r1
 3a6:	2c f0       	brlt	.+10     	; 0x3b2 <_ZN12RecieverLamp7readADCEv+0x68>
	{
		nyesteBit_ = 1;			
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	3b 83       	std	Y+3, r19	; 0x03
 3ae:	2a 83       	std	Y+2, r18	; 0x02
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_ZN12RecieverLamp7readADCEv+0x6c>
	}								
	else
	{
		nyesteBit_ = 0; 
 3b2:	1b 82       	std	Y+3, r1	; 0x03
 3b4:	1a 82       	std	Y+2, r1	; 0x02
	}
	ADClastRead_ = ADCread_;
 3b6:	99 8b       	std	Y+17, r25	; 0x11
 3b8:	88 8b       	std	Y+16, r24	; 0x10
	
	uart_->SendInteger(nyesteBit_);
 3ba:	6a 81       	ldd	r22, Y+2	; 0x02
 3bc:	7b 81       	ldd	r23, Y+3	; 0x03
 3be:	88 8d       	ldd	r24, Y+24	; 0x18
 3c0:	99 8d       	ldd	r25, Y+25	; 0x19
 3c2:	eb d0       	rcall	.+470    	; 0x59a <_ZN4UART11SendIntegerEi>
	uart_->SendString("\\");	
 3c4:	62 e1       	ldi	r22, 0x12	; 18
 3c6:	72 e0       	ldi	r23, 0x02	; 2
 3c8:	88 8d       	ldd	r24, Y+24	; 0x18
 3ca:	99 8d       	ldd	r25, Y+25	; 0x19
 3cc:	d2 d0       	rcall	.+420    	; 0x572 <_ZN4UART10SendStringEPc>
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <_ZN12RecieverLamp13readStartBitsEv>:
void RecieverLamp::setNyesteBit(int nyestebit)
{
		nyesteBit_ = nyestebit;
}

int RecieverLamp::readStartBits(){
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 3da:	1d 82       	std	Y+5, r1	; 0x05
 3dc:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 3de:	1b 8a       	std	Y+19, r1	; 0x13
 3e0:	1a 8a       	std	Y+18, r1	; 0x12
	while(startBits_ != seneste6Bits_){
 3e2:	4e 81       	ldd	r20, Y+6	; 0x06
 3e4:	5f 81       	ldd	r21, Y+7	; 0x07
 3e6:	2c 81       	ldd	r18, Y+4	; 0x04
 3e8:	3d 81       	ldd	r19, Y+5	; 0x05
 3ea:	42 17       	cp	r20, r18
 3ec:	53 07       	cpc	r21, r19
 3ee:	e1 f0       	breq	.+56     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			if (zeroCross_ == 1)
 3f0:	88 81       	ld	r24, Y
 3f2:	99 81       	ldd	r25, Y+1	; 0x01
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	c9 f7       	brne	.-14     	; 0x3ea <_ZN12RecieverLamp13readStartBitsEv+0x16>
			{
				if (counter_ <= 6)
 3f8:	8a 89       	ldd	r24, Y+18	; 0x12
 3fa:	9b 89       	ldd	r25, Y+19	; 0x13
 3fc:	07 97       	sbiw	r24, 0x07	; 7
 3fe:	bc f4       	brge	.+46     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				{
				
				readADC();
 400:	ce 01       	movw	r24, r28
 402:	a3 df       	rcall	.-186    	; 0x34a <_ZN12RecieverLamp7readADCEv>
				
				seneste6Bits_ = seneste6Bits_ << 1;
				seneste6Bits_ |= nyesteBit_; 
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	9d 81       	ldd	r25, Y+5	; 0x05
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	2a 81       	ldd	r18, Y+2	; 0x02
 40e:	3b 81       	ldd	r19, Y+3	; 0x03
 410:	82 2b       	or	r24, r18
 412:	93 2b       	or	r25, r19
 414:	9d 83       	std	Y+5, r25	; 0x05
 416:	8c 83       	std	Y+4, r24	; 0x04
				//PORTB = seneste6Bits_;
			
				zeroCross_ = 0;
 418:	19 82       	std	Y+1, r1	; 0x01
 41a:	18 82       	st	Y, r1
				// PORTB ^= (1<<6);		bruges til at teste
				counter_++;
 41c:	8a 89       	ldd	r24, Y+18	; 0x12
 41e:	9b 89       	ldd	r25, Y+19	; 0x13
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	9b 8b       	std	Y+19, r25	; 0x13
 424:	8a 8b       	std	Y+18, r24	; 0x12
 426:	dd cf       	rjmp	.-70     	; 0x3e2 <_ZN12RecieverLamp13readStartBitsEv+0xe>
				}
			}
	}
	
	
	return 1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				zeroCross_ = 0;
				// PORTB ^= (1<<6);		bruges til at teste
				counter_++;
				}
				else{
					return 0;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return 1;
	
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <_ZN12RecieverLamp15readAdresseBitsEv>:
int RecieverLamp::readAdresseBits(){
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 43e:	1d 82       	std	Y+5, r1	; 0x05
 440:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 442:	1b 8a       	std	Y+19, r1	; 0x13
 444:	1a 8a       	std	Y+18, r1	; 0x12
	
	while(adresseBits_ != seneste6Bits_){
 446:	4a 85       	ldd	r20, Y+10	; 0x0a
 448:	5b 85       	ldd	r21, Y+11	; 0x0b
 44a:	2c 81       	ldd	r18, Y+4	; 0x04
 44c:	3d 81       	ldd	r19, Y+5	; 0x05
 44e:	42 17       	cp	r20, r18
 450:	53 07       	cpc	r21, r19
 452:	b9 f0       	breq	.+46     	; 0x482 <_ZN12RecieverLamp15readAdresseBitsEv+0x4a>
		if (zeroCross_ == 1)
 454:	88 81       	ld	r24, Y
 456:	99 81       	ldd	r25, Y+1	; 0x01
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	c9 f7       	brne	.-14     	; 0x44e <_ZN12RecieverLamp15readAdresseBitsEv+0x16>
		{
			if (counter_ <= 6){
 45c:	8a 89       	ldd	r24, Y+18	; 0x12
 45e:	9b 89       	ldd	r25, Y+19	; 0x13
 460:	07 97       	sbiw	r24, 0x07	; 7
 462:	94 f4       	brge	.+36     	; 0x488 <_ZN12RecieverLamp15readAdresseBitsEv+0x50>
			readADC();
 464:	ce 01       	movw	r24, r28
 466:	71 df       	rcall	.-286    	; 0x34a <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 468:	8c 81       	ldd	r24, Y+4	; 0x04
 46a:	9d 81       	ldd	r25, Y+5	; 0x05
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	2a 81       	ldd	r18, Y+2	; 0x02
 472:	3b 81       	ldd	r19, Y+3	; 0x03
 474:	82 2b       	or	r24, r18
 476:	93 2b       	or	r25, r19
 478:	9d 83       	std	Y+5, r25	; 0x05
 47a:	8c 83       	std	Y+4, r24	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 47c:	19 82       	std	Y+1, r1	; 0x01
 47e:	18 82       	st	Y, r1
 480:	e2 cf       	rjmp	.-60     	; 0x446 <_ZN12RecieverLamp15readAdresseBitsEv+0xe>
				return 0;
			}
		}
	}
	
	return 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <_ZN12RecieverLamp15readAdresseBitsEv+0x54>
			
			zeroCross_ = 0;
			// PORTB ^= (1<<6);		bruges til at teste
			
			}else{
				return 0;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	return 1;
	
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <_ZN12RecieverLamp12readDataBitsEv>:
}
int RecieverLamp::getAdresseBits()
{
	return adresseBits_;
}
int RecieverLamp::readDataBits(){
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 498:	1d 82       	std	Y+5, r1	; 0x05
 49a:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 49c:	1b 8a       	std	Y+19, r1	; 0x13
 49e:	1a 8a       	std	Y+18, r1	; 0x12
	while(kommandoBits_ != seneste6Bits_){
 4a0:	8c 85       	ldd	r24, Y+12	; 0x0c
 4a2:	9d 85       	ldd	r25, Y+13	; 0x0d
 4a4:	89 2b       	or	r24, r25
 4a6:	d9 f0       	breq	.+54     	; 0x4de <_ZN12RecieverLamp12readDataBitsEv+0x4c>
		if (zeroCross_ == 1)
 4a8:	88 81       	ld	r24, Y
 4aa:	99 81       	ldd	r25, Y+1	; 0x01
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	d1 f4       	brne	.+52     	; 0x4e4 <_ZN12RecieverLamp12readDataBitsEv+0x52>
		{
			if (counter_ <= 6){}
			readADC();
 4b0:	ce 01       	movw	r24, r28
 4b2:	4b df       	rcall	.-362    	; 0x34a <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 4b4:	2c 81       	ldd	r18, Y+4	; 0x04
 4b6:	3d 81       	ldd	r19, Y+5	; 0x05
 4b8:	22 0f       	add	r18, r18
 4ba:	33 1f       	adc	r19, r19
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	9b 81       	ldd	r25, Y+3	; 0x03
 4c0:	28 2b       	or	r18, r24
 4c2:	39 2b       	or	r19, r25
 4c4:	3d 83       	std	Y+5, r19	; 0x05
 4c6:	2c 83       	std	Y+4, r18	; 0x04
			//PORTB = seneste6Bits_;
			
			zeroCross_ = 0;
 4c8:	19 82       	std	Y+1, r1	; 0x01
 4ca:	18 82       	st	Y, r1
			// PORTB ^= (1<<6);		bruges til at teste
			
			}else{
				return 0;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	4c 85       	ldd	r20, Y+12	; 0x0c
 4d2:	5d 85       	ldd	r21, Y+13	; 0x0d
 4d4:	42 17       	cp	r20, r18
 4d6:	53 07       	cpc	r21, r19
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <_ZN12RecieverLamp12readDataBitsEv+0x56>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <_ZN12RecieverLamp12readDataBitsEv+0x56>
			}
	}
	
	return 1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <_ZN12RecieverLamp12readDataBitsEv+0x56>
			
			zeroCross_ = 0;
			// PORTB ^= (1<<6);		bruges til at teste
			
			}else{
				return 0;
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
			}
	}
	
	return 1;
	
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <_ZN12RecieverLamp12readStopBitsEv>:
int RecieverLamp::readStopBits(){
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
	seneste6Bits_ = 0;
 4f4:	1d 82       	std	Y+5, r1	; 0x05
 4f6:	1c 82       	std	Y+4, r1	; 0x04
	counter_ = 0;
 4f8:	1b 8a       	std	Y+19, r1	; 0x13
 4fa:	1a 8a       	std	Y+18, r1	; 0x12
	while(stopBits_ != seneste6Bits_){
 4fc:	48 85       	ldd	r20, Y+8	; 0x08
 4fe:	59 85       	ldd	r21, Y+9	; 0x09
 500:	2c 81       	ldd	r18, Y+4	; 0x04
 502:	3d 81       	ldd	r19, Y+5	; 0x05
 504:	42 17       	cp	r20, r18
 506:	53 07       	cpc	r21, r19
 508:	b9 f0       	breq	.+46     	; 0x538 <_ZN12RecieverLamp12readStopBitsEv+0x4a>
		if (zeroCross_ == 1)
 50a:	88 81       	ld	r24, Y
 50c:	99 81       	ldd	r25, Y+1	; 0x01
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	c9 f7       	brne	.-14     	; 0x504 <_ZN12RecieverLamp12readStopBitsEv+0x16>
		{
			if (counter_ <= 6){
 512:	8a 89       	ldd	r24, Y+18	; 0x12
 514:	9b 89       	ldd	r25, Y+19	; 0x13
 516:	07 97       	sbiw	r24, 0x07	; 7
 518:	94 f4       	brge	.+36     	; 0x53e <_ZN12RecieverLamp12readStopBitsEv+0x50>
			readADC();
 51a:	ce 01       	movw	r24, r28
 51c:	16 df       	rcall	.-468    	; 0x34a <_ZN12RecieverLamp7readADCEv>
			
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	9d 81       	ldd	r25, Y+5	; 0x05
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	2a 81       	ldd	r18, Y+2	; 0x02
 528:	3b 81       	ldd	r19, Y+3	; 0x03
 52a:	82 2b       	or	r24, r18
 52c:	93 2b       	or	r25, r19
 52e:	9d 83       	std	Y+5, r25	; 0x05
 530:	8c 83       	std	Y+4, r24	; 0x04
			
			zeroCross_ = 0;
 532:	19 82       	std	Y+1, r1	; 0x01
 534:	18 82       	st	Y, r1
 536:	e2 cf       	rjmp	.-60     	; 0x4fc <_ZN12RecieverLamp12readStopBitsEv+0xe>
				return 0;
			}
		}
	}
	
	return 1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <_ZN12RecieverLamp12readStopBitsEv+0x54>
			seneste6Bits_ = seneste6Bits_ << 1;
			seneste6Bits_ |= nyesteBit_;
			
			zeroCross_ = 0;
			}else{
				return 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	
	return 1;
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <_ZN4UARTC1Ev>:
 548:	88 e9       	ldi	r24, 0x98	; 152
 54a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 54e:	87 e6       	ldi	r24, 0x67	; 103
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 556:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 560:	08 95       	ret

00000562 <_ZN4UART8SendCharEc>:
 562:	e0 ec       	ldi	r30, 0xC0	; 192
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	85 ff       	sbrs	r24, 5
 56a:	fd cf       	rjmp	.-6      	; 0x566 <_ZN4UART8SendCharEc+0x4>
 56c:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 570:	08 95       	ret

00000572 <_ZN4UART10SendStringEPc>:
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	eb 01       	movw	r28, r22
 57c:	68 81       	ld	r22, Y
 57e:	66 23       	and	r22, r22
 580:	39 f0       	breq	.+14     	; 0x590 <_ZN4UART10SendStringEPc+0x1e>
 582:	8c 01       	movw	r16, r24
 584:	21 96       	adiw	r28, 0x01	; 1
 586:	c8 01       	movw	r24, r16
 588:	ec df       	rcall	.-40     	; 0x562 <_ZN4UART8SendCharEc>
 58a:	69 91       	ld	r22, Y+
 58c:	61 11       	cpse	r22, r1
 58e:	fb cf       	rjmp	.-10     	; 0x586 <_ZN4UART10SendStringEPc+0x14>
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <_ZN4UART11SendIntegerEi>:
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	27 97       	sbiw	r28, 0x07	; 7
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	8c 01       	movw	r16, r24
 5b4:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5b6:	4a e0       	ldi	r20, 0x0A	; 10
 5b8:	be 01       	movw	r22, r28
 5ba:	6f 5f       	subi	r22, 0xFF	; 255
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	18 d0       	rcall	.+48     	; 0x5f0 <__itoa_ncheck>
 5c0:	be 01       	movw	r22, r28
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	c8 01       	movw	r24, r16
 5c8:	d4 df       	rcall	.-88     	; 0x572 <_ZN4UART10SendStringEPc>
 5ca:	27 96       	adiw	r28, 0x07	; 7
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	08 95       	ret

000005e0 <__tablejump2__>:
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	88 1f       	adc	r24, r24
 5e6:	8b bf       	out	0x3b, r24	; 59
 5e8:	07 90       	elpm	r0, Z+
 5ea:	f6 91       	elpm	r31, Z
 5ec:	e0 2d       	mov	r30, r0
 5ee:	19 94       	eijmp

000005f0 <__itoa_ncheck>:
 5f0:	bb 27       	eor	r27, r27
 5f2:	4a 30       	cpi	r20, 0x0A	; 10
 5f4:	31 f4       	brne	.+12     	; 0x602 <__itoa_ncheck+0x12>
 5f6:	99 23       	and	r25, r25
 5f8:	22 f4       	brpl	.+8      	; 0x602 <__itoa_ncheck+0x12>
 5fa:	bd e2       	ldi	r27, 0x2D	; 45
 5fc:	90 95       	com	r25
 5fe:	81 95       	neg	r24
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	01 c0       	rjmp	.+2      	; 0x606 <__utoa_common>

00000604 <__utoa_ncheck>:
 604:	bb 27       	eor	r27, r27

00000606 <__utoa_common>:
 606:	fb 01       	movw	r30, r22
 608:	55 27       	eor	r21, r21
 60a:	aa 27       	eor	r26, r26
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	aa 1f       	adc	r26, r26
 612:	a4 17       	cp	r26, r20
 614:	10 f0       	brcs	.+4      	; 0x61a <__utoa_common+0x14>
 616:	a4 1b       	sub	r26, r20
 618:	83 95       	inc	r24
 61a:	50 51       	subi	r21, 0x10	; 16
 61c:	b9 f7       	brne	.-18     	; 0x60c <__utoa_common+0x6>
 61e:	a0 5d       	subi	r26, 0xD0	; 208
 620:	aa 33       	cpi	r26, 0x3A	; 58
 622:	08 f0       	brcs	.+2      	; 0x626 <__utoa_common+0x20>
 624:	a9 5d       	subi	r26, 0xD9	; 217
 626:	a1 93       	st	Z+, r26
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	79 f7       	brne	.-34     	; 0x60a <__utoa_common+0x4>
 62c:	b1 11       	cpse	r27, r1
 62e:	b1 93       	st	Z+, r27
 630:	11 92       	st	Z+, r1
 632:	cb 01       	movw	r24, r22
 634:	00 c0       	rjmp	.+0      	; 0x636 <strrev>

00000636 <strrev>:
 636:	dc 01       	movw	r26, r24
 638:	fc 01       	movw	r30, r24
 63a:	67 2f       	mov	r22, r23
 63c:	71 91       	ld	r23, Z+
 63e:	77 23       	and	r23, r23
 640:	e1 f7       	brne	.-8      	; 0x63a <strrev+0x4>
 642:	32 97       	sbiw	r30, 0x02	; 2
 644:	04 c0       	rjmp	.+8      	; 0x64e <strrev+0x18>
 646:	7c 91       	ld	r23, X
 648:	6d 93       	st	X+, r22
 64a:	70 83       	st	Z, r23
 64c:	62 91       	ld	r22, -Z
 64e:	ae 17       	cp	r26, r30
 650:	bf 07       	cpc	r27, r31
 652:	c8 f3       	brcs	.-14     	; 0x646 <strrev+0x10>
 654:	08 95       	ret

00000656 <__do_global_dtors>:
 656:	10 e0       	ldi	r17, 0x00	; 0
 658:	c3 e7       	ldi	r28, 0x73	; 115
 65a:	d0 e0       	ldi	r29, 0x00	; 0
 65c:	00 e0       	ldi	r16, 0x00	; 0
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__do_global_dtors+0x14>
 660:	80 2f       	mov	r24, r16
 662:	fe 01       	movw	r30, r28
 664:	bd df       	rcall	.-134    	; 0x5e0 <__tablejump2__>
 666:	21 96       	adiw	r28, 0x01	; 1
 668:	01 1d       	adc	r16, r1
 66a:	c4 37       	cpi	r28, 0x74	; 116
 66c:	d1 07       	cpc	r29, r17
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 07       	cpc	r16, r24
 672:	b1 f7       	brne	.-20     	; 0x660 <__do_global_dtors+0xa>
 674:	f8 94       	cli

00000676 <__stop_program>:
 676:	ff cf       	rjmp	.-2      	; 0x676 <__stop_program>
