
2. semsterprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5b  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb0  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000022ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015b  00000000  00000000  00002997  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	e4 c0       	rjmp	.+456    	; 0x1ce <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	5e d0       	rcall	.+188    	; 0x1c2 <main>
 106:	8a c0       	rjmp	.+276    	; 0x21c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <initIOpins>:



void initIOpins()
{
	DDRF = 0xFF;		// F pins er udgange
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 bb       	out	0x10, r24	; 16
	DDRD = 0;			// D Pins er indgange
 10e:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
 110:	84 b9       	out	0x04, r24	; 4
	PORTF = 0b00000000;	// sætter 0 på alle 	
 112:	11 ba       	out	0x11, r1	; 17
 114:	08 95       	ret

00000116 <initINT0>:
}

void initINT0()
{

	EIMSK |= 0b00000001;
 116:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000011;
 118:	e9 e6       	ldi	r30, 0x69	; 105
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <turnOnLight>:

void turnOnLight(){
	
	//cli();
	
	if(counter == 0){
 124:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 128:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	09 f4       	brne	.+2      	; 0x132 <turnOnLight+0xe>
		PORTB = 0b00000000;
 130:	15 b8       	out	0x05, r1	; 5
	}
	if (counter == 1)
 132:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 136:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	11 f4       	brne	.+4      	; 0x142 <turnOnLight+0x1e>
	{
		PORTB = 0b00000001;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	85 b9       	out	0x05, r24	; 5
	}
	if (counter == 2)
 142:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 146:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 14a:	02 97       	sbiw	r24, 0x02	; 2
 14c:	09 f4       	brne	.+2      	; 0x150 <turnOnLight+0x2c>
	{
		PORTB = 0b00000000;
 14e:	15 b8       	out	0x05, r1	; 5
	}
	if (counter == 3)
 150:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 154:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 158:	03 97       	sbiw	r24, 0x03	; 3
 15a:	11 f4       	brne	.+4      	; 0x160 <turnOnLight+0x3c>
	{
		PORTB = 0b00000001;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	85 b9       	out	0x05, r24	; 5
	}
	if (counter == 4)
 160:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 164:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 168:	04 97       	sbiw	r24, 0x04	; 4
 16a:	11 f4       	brne	.+4      	; 0x170 <turnOnLight+0x4c>
	{
		PORTB = 0b00000001;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	85 b9       	out	0x05, r24	; 5
	}
	if (counter == 5)
 170:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 174:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 178:	05 97       	sbiw	r24, 0x05	; 5
 17a:	81 f4       	brne	.+32     	; 0x19c <turnOnLight+0x78>
	{
		PORTB = 0b00000000;
 17c:	15 b8       	out	0x05, r1	; 5
		counter = 0;
 17e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 182:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	87 ea       	ldi	r24, 0xA7	; 167
 18a:	91 e6       	ldi	r25, 0x61	; 97
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <turnOnLight+0x68>
 194:	00 c0       	rjmp	.+0      	; 0x196 <turnOnLight+0x72>
 196:	00 00       	nop
		_delay_ms(2000);
		PORTB = 0b11111111;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	87 ea       	ldi	r24, 0xA7	; 167
 1a0:	91 e6       	ldi	r25, 0x61	; 97
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <turnOnLight+0x7e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <turnOnLight+0x88>
 1ac:	00 00       	nop
	}
	
	_delay_ms(2000);
	
	counter++;
 1ae:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 1b2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 1bc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 1c0:	08 95       	ret

000001c2 <main>:



int main(void)
{
	sei();
 1c2:	78 94       	sei
	
	DDRB = 0b11111111;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	84 b9       	out	0x04, r24	; 4
	initIOpins();
 1c8:	a0 df       	rcall	.-192    	; 0x10a <initIOpins>
	initINT0();
 1ca:	a5 df       	rcall	.-182    	; 0x116 <initINT0>
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0xa>

000001ce <__vector_1>:
 1ce:	1f 92       	push	r1
		
    }
}

ISR(INT0_vect)
{
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	0b b6       	in	r0, 0x3b	; 59
 1da:	0f 92       	push	r0
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	turnOnLight();
 1f4:	97 df       	rcall	.-210    	; 0x124 <turnOnLight>
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
