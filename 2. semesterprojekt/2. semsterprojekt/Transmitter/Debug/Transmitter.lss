
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000440  00800200  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800640  00800640  00000c24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee6  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001006  00000000  00000000  00002c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086c  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000044d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000996  00000000  00000000  0000475c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dc  00000000  00000000  000050f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000057ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9f c0       	rjmp	.+318    	; 0x144 <__vector_1>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	9a c0       	rjmp	.+308    	; 0x19a <__vector_25>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	76 02       	muls	r23, r22

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	16 e0       	ldi	r17, 0x06	; 6
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e0 e5       	ldi	r30, 0x50	; 80
  fe:	f7 e0       	ldi	r31, 0x07	; 7
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a0 34       	cpi	r26, 0x40	; 64
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	26 e0       	ldi	r18, 0x06	; 6
 112:	a0 e4       	ldi	r26, 0x40	; 64
 114:	b6 e0       	ldi	r27, 0x06	; 6
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	ab 35       	cpi	r26, 0x5B	; 91
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	04 d3       	rcall	.+1544   	; 0x73c <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	4d d0       	rcall	.+154    	; 0x1da <main>
 140:	05 c3       	rjmp	.+1546   	; 0x74c <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <__vector_1>:
		
    }
}

ISR(INT0_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	0b b6       	in	r0, 0x3b	; 59
 150:	0f 92       	push	r0
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	sender.setZeroCross(1);			// Sætter zeroCross_ til 1
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	96 e0       	ldi	r25, 0x06	; 6
 172:	c4 d1       	rcall	.+904    	; 0x4fc <_ZN11Transmitter12setZeroCrossEi>
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_25>:

ISR(USART0_RX_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
	modtaget = UDR0;
 1a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1aa:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <modtaget>
}
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <_Z13initInterupt0v>:

void initInterupt0()
{
	sei();					// Enable global interupt
 1ba:	78 94       	sei
	EIMSK |= 0b00000001;	// Enabler interupt 0
 1bc:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;	// Enabler interupt 1 ved falling og rising edge
 1be:	e9 e6       	ldi	r30, 0x69	; 105
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <_Z10initIOpinsv>:
}

void initIOpins()
{
		DDRB = 0xFF;		// Udgang
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	84 b9       	out	0x04, r24	; 4
		DDRC = 0xFF;		// Udgang
 1ce:	87 b9       	out	0x07, r24	; 7
		DDRD = 0;			// Indgang
 1d0:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0;			// Nulstiller PortB
 1d2:	15 b8       	out	0x05, r1	; 5
		PORTC = 0;			// Nulstiller PortC
 1d4:	18 b8       	out	0x08, r1	; 8
		PORTD = 0;			// Nulstiller PortD
 1d6:	1b b8       	out	0x0b, r1	; 11
 1d8:	08 95       	ret

000001da <main>:

volatile char modtaget;
Transmitter sender;

int main(void)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	69 97       	sbiw	r28, 0x19	; 25
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
	initIOpins();
 1ee:	ed df       	rcall	.-38     	; 0x1ca <_Z10initIOpinsv>
	initInterupt0();
 1f0:	e4 df       	rcall	.-56     	; 0x1ba <_Z13initInterupt0v>
 1f2:	ce 01       	movw	r24, r28
	UART uart0;
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	79 d2       	rcall	.+1266   	; 0x6ea <_ZN4UARTC1Ev>
 1f8:	64 e3       	ldi	r22, 0x34	; 52
	
	uart0.SendString("Program startet.\f\n\n\n\r");
 1fa:	72 e0       	ldi	r23, 0x02	; 2
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	89 d2       	rcall	.+1298   	; 0x714 <_ZN4UART10SendStringEPc>
 202:	6a e4       	ldi	r22, 0x4A	; 74
	uart0.SendString("_________________________________________________  \n\n\r");
 204:	72 e0       	ldi	r23, 0x02	; 2
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	84 d2       	rcall	.+1288   	; 0x714 <_ZN4UART10SendStringEPc>
 20c:	61 e8       	ldi	r22, 0x81	; 129
	uart0.SendString("    X         X       X                  X X X X   \n\r");
 20e:	72 e0       	ldi	r23, 0x02	; 2
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	7f d2       	rcall	.+1278   	; 0x714 <_ZN4UART10SendStringEPc>
 216:	67 eb       	ldi	r22, 0xB7	; 183
	uart0.SendString("   X X        X       X                        X   \n\r");
 218:	72 e0       	ldi	r23, 0x02	; 2
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	7a d2       	rcall	.+1268   	; 0x714 <_ZN4UART10SendStringEPc>
 220:	6d ee       	ldi	r22, 0xED	; 237
	uart0.SendString("  X   X       X       X    X X X X X     X X X X   \n\r");
 222:	72 e0       	ldi	r23, 0x02	; 2
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	75 d2       	rcall	.+1258   	; 0x714 <_ZN4UART10SendStringEPc>
 22a:	63 e2       	ldi	r22, 0x23	; 35
	uart0.SendString(" X X X X       X     X                   X         \n\r");
 22c:	73 e0       	ldi	r23, 0x03	; 3
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	70 d2       	rcall	.+1248   	; 0x714 <_ZN4UART10SendStringEPc>
 234:	69 e5       	ldi	r22, 0x59	; 89
	uart0.SendString("X       X       X X X                    X X X X   \n\n\n\r");
 236:	73 e0       	ldi	r23, 0x03	; 3
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	6b d2       	rcall	.+1238   	; 0x714 <_ZN4UART10SendStringEPc>
 23e:	69 e4       	ldi	r22, 0x49	; 73
	uart0.SendString("");
 240:	72 e0       	ldi	r23, 0x02	; 2
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	66 d2       	rcall	.+1228   	; 0x714 <_ZN4UART10SendStringEPc>
 248:	61 e9       	ldi	r22, 0x91	; 145
	uart0.SendString("X       X      X X X      X        X      X X X X  \n\r");
 24a:	73 e0       	ldi	r23, 0x03	; 3
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	61 d2       	rcall	.+1218   	; 0x714 <_ZN4UART10SendStringEPc>
 252:	67 ec       	ldi	r22, 0xC7	; 199
	uart0.SendString("X       X     X     X     X X    X X      X        \n\r");
 254:	73 e0       	ldi	r23, 0x03	; 3
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	5c d2       	rcall	.+1208   	; 0x714 <_ZN4UART10SendStringEPc>
 25c:	6d ef       	ldi	r22, 0xFD	; 253
	uart0.SendString("X X X X X    X       X    X  X  X  X      X X X    \n\r");
 25e:	73 e0       	ldi	r23, 0x03	; 3
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	57 d2       	rcall	.+1198   	; 0x714 <_ZN4UART10SendStringEPc>
 266:	63 e3       	ldi	r22, 0x33	; 51
	uart0.SendString("X       X     X     X     X   XX   X      X        \n\r");
 268:	74 e0       	ldi	r23, 0x04	; 4
 26a:	ce 01       	movw	r24, r28
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	52 d2       	rcall	.+1188   	; 0x714 <_ZN4UART10SendStringEPc>
 270:	61 e9       	ldi	r22, 0x91	; 145
	uart0.SendString("X       X      X X X      X        X      X X X X  \n\r");
 272:	73 e0       	ldi	r23, 0x03	; 3
 274:	ce 01       	movw	r24, r28
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	4d d2       	rcall	.+1178   	; 0x714 <_ZN4UART10SendStringEPc>
 27a:	69 e6       	ldi	r22, 0x69	; 105
	uart0.SendString("__________________________________________________ \n\n\r");
 27c:	74 e0       	ldi	r23, 0x04	; 4
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	48 d2       	rcall	.+1168   	; 0x714 <_ZN4UART10SendStringEPc>
 284:	60 ea       	ldi	r22, 0xA0	; 160
	uart0.SendString("Taend lys:      Tast '1'                           \n\r");
 286:	74 e0       	ldi	r23, 0x04	; 4
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	43 d2       	rcall	.+1158   	; 0x714 <_ZN4UART10SendStringEPc>
 28e:	66 ed       	ldi	r22, 0xD6	; 214
	uart0.SendString("Sluk lys:       Tast '2'                           \n\r");
 290:	74 e0       	ldi	r23, 0x04	; 4
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	3e d2       	rcall	.+1148   	; 0x714 <_ZN4UART10SendStringEPc>
 298:	6c e0       	ldi	r22, 0x0C	; 12
	uart0.SendString("Rul gardin op:  Tast '3'                           \n\r");
 29a:	75 e0       	ldi	r23, 0x05	; 5
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	39 d2       	rcall	.+1138   	; 0x714 <_ZN4UART10SendStringEPc>
 2a2:	62 e4       	ldi	r22, 0x42	; 66
	uart0.SendString("Rul gardin ned: Tast '4'                           \n\r");
 2a4:	75 e0       	ldi	r23, 0x05	; 5
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	34 d2       	rcall	.+1128   	; 0x714 <_ZN4UART10SendStringEPc>
 2ac:	68 e7       	ldi	r22, 0x78	; 120
 2ae:	75 e0       	ldi	r23, 0x05	; 5
	uart0.SendString("Sluk Hjem:      Tast '5'                           \n\r");
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	2f d2       	rcall	.+1118   	; 0x714 <_ZN4UART10SendStringEPc>
 2b6:	6e ea       	ldi	r22, 0xAE	; 174
 2b8:	75 e0       	ldi	r23, 0x05	; 5
 2ba:	ce 01       	movw	r24, r28
	uart0.SendString("__________________________________________________ \n\r");	
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	2a d2       	rcall	.+1108   	; 0x714 <_ZN4UART10SendStringEPc>
 2c0:	10 e3       	ldi	r17, 0x30	; 48
 2c2:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
 2c6:	81 33       	cpi	r24, 0x31	; 49
				}
						
				PORTB = PINB ^ 0b11111111;

			}
		modtaget = '0';
 2c8:	89 f0       	breq	.+34     	; 0x2ec <main+0x112>
    /* Replace with your application code */
    while (1) 
    {
			
			
			if ((modtaget == '1') || (modtaget == '2') || (modtaget == '3') || (modtaget == '4') || (modtaget == '5'))
 2ca:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
 2ce:	82 33       	cpi	r24, 0x32	; 50
 2d0:	69 f0       	breq	.+26     	; 0x2ec <main+0x112>
 2d2:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
 2d6:	83 33       	cpi	r24, 0x33	; 51
 2d8:	49 f0       	breq	.+18     	; 0x2ec <main+0x112>
 2da:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
 2de:	84 33       	cpi	r24, 0x34	; 52
 2e0:	29 f0       	breq	.+10     	; 0x2ec <main+0x112>
 2e2:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
 2e6:	85 33       	cpi	r24, 0x35	; 53
 2e8:	09 f0       	breq	.+2      	; 0x2ec <main+0x112>
 2ea:	fd c0       	rjmp	.+506    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 2ec:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
 2f0:	83 33       	cpi	r24, 0x33	; 51
			{
				switch (modtaget)
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <main+0x11c>
 2f4:	55 c0       	rjmp	.+170    	; 0x3a0 <main+0x1c6>
 2f6:	28 f4       	brcc	.+10     	; 0x302 <main+0x128>
 2f8:	81 33       	cpi	r24, 0x31	; 49
 2fa:	51 f0       	breq	.+20     	; 0x310 <main+0x136>
 2fc:	82 33       	cpi	r24, 0x32	; 50
 2fe:	61 f1       	breq	.+88     	; 0x358 <main+0x17e>
 300:	ba c0       	rjmp	.+372    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 302:	84 33       	cpi	r24, 0x34	; 52
 304:	09 f4       	brne	.+2      	; 0x308 <main+0x12e>
 306:	70 c0       	rjmp	.+224    	; 0x3e8 <main+0x20e>
 308:	85 33       	cpi	r24, 0x35	; 53
 30a:	09 f4       	brne	.+2      	; 0x30e <main+0x134>
 30c:	91 c0       	rjmp	.+290    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 30e:	b3 c0       	rjmp	.+358    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 310:	64 ee       	ldi	r22, 0xE4	; 228
 312:	75 e0       	ldi	r23, 0x05	; 5
				{
				case '1':
				{
					uart0.SendString("Lampen taendes.\n\r");
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	fd d1       	rcall	.+1018   	; 0x714 <_ZN4UART10SendStringEPc>
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	e0 e1       	ldi	r30, 0x10	; 16
 31e:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {0,1,0,1,0,1};
 320:	de 01       	movw	r26, r28
 322:	1e 96       	adiw	r26, 0x0e	; 14
 324:	01 90       	ld	r0, Z+
 326:	0d 92       	st	X+, r0
 328:	8a 95       	dec	r24
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x14a>
 32c:	be 01       	movw	r22, r28
 32e:	62 5f       	subi	r22, 0xF2	; 242
					sender.setAdresse(adresse);
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	96 e0       	ldi	r25, 0x06	; 6
 336:	e9 d0       	rcall	.+466    	; 0x50a <_ZN11Transmitter10setAdresseEPi>
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	ec e1       	ldi	r30, 0x1C	; 28
					int kommando[6] = {1,0,1,0,1,0};
 33c:	f2 e0       	ldi	r31, 0x02	; 2
 33e:	de 01       	movw	r26, r28
 340:	12 96       	adiw	r26, 0x02	; 2
 342:	01 90       	ld	r0, Z+
 344:	0d 92       	st	X+, r0
 346:	8a 95       	dec	r24
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x168>
 34a:	be 01       	movw	r22, r28
 34c:	6e 5f       	subi	r22, 0xFE	; 254
					sender.setKommando(kommando);
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	96 e0       	ldi	r25, 0x06	; 6
 354:	e6 d0       	rcall	.+460    	; 0x522 <_ZN11Transmitter11setKommandoEPi>
 356:	8f c0       	rjmp	.+286    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 358:	66 ef       	ldi	r22, 0xF6	; 246
				}
					break;
 35a:	75 e0       	ldi	r23, 0x05	; 5
					
				case '2':
				{
					uart0.SendString("Lampen slukkes\n\r");
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	d9 d1       	rcall	.+946    	; 0x714 <_ZN4UART10SendStringEPc>
 362:	8c e0       	ldi	r24, 0x0C	; 12
 364:	e0 e1       	ldi	r30, 0x10	; 16
 366:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {0,1,0,1,0,1};
 368:	de 01       	movw	r26, r28
 36a:	1e 96       	adiw	r26, 0x0e	; 14
 36c:	01 90       	ld	r0, Z+
 36e:	0d 92       	st	X+, r0
 370:	8a 95       	dec	r24
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x192>
 374:	be 01       	movw	r22, r28
 376:	62 5f       	subi	r22, 0xF2	; 242
					sender.setAdresse(adresse);
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	96 e0       	ldi	r25, 0x06	; 6
 37e:	c5 d0       	rcall	.+394    	; 0x50a <_ZN11Transmitter10setAdresseEPi>
 380:	8c e0       	ldi	r24, 0x0C	; 12
 382:	e0 e1       	ldi	r30, 0x10	; 16
 384:	f2 e0       	ldi	r31, 0x02	; 2
					int kommando[6] = {0,1,0,1,0,1};
 386:	de 01       	movw	r26, r28
 388:	12 96       	adiw	r26, 0x02	; 2
 38a:	01 90       	ld	r0, Z+
 38c:	0d 92       	st	X+, r0
 38e:	8a 95       	dec	r24
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x1b0>
 392:	be 01       	movw	r22, r28
 394:	6e 5f       	subi	r22, 0xFE	; 254
					sender.setKommando(kommando);	
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	96 e0       	ldi	r25, 0x06	; 6
 39c:	c2 d0       	rcall	.+388    	; 0x522 <_ZN11Transmitter11setKommandoEPi>
 39e:	6b c0       	rjmp	.+214    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 3a0:	67 e0       	ldi	r22, 0x07	; 7
 3a2:	76 e0       	ldi	r23, 0x06	; 6
				}
					break;
 3a4:	ce 01       	movw	r24, r28
				case '3':
				{
					uart0.SendString("Gardin rulles op\n\r");
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	b5 d1       	rcall	.+874    	; 0x714 <_ZN4UART10SendStringEPc>
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	e8 e2       	ldi	r30, 0x28	; 40
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {1,0,0,1,1,0};
 3b0:	de 01       	movw	r26, r28
 3b2:	1e 96       	adiw	r26, 0x0e	; 14
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x1da>
 3bc:	be 01       	movw	r22, r28
 3be:	62 5f       	subi	r22, 0xF2	; 242
					sender.setAdresse(adresse);
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	80 e4       	ldi	r24, 0x40	; 64
 3c4:	96 e0       	ldi	r25, 0x06	; 6
 3c6:	a1 d0       	rcall	.+322    	; 0x50a <_ZN11Transmitter10setAdresseEPi>
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	ec e1       	ldi	r30, 0x1C	; 28
 3cc:	f2 e0       	ldi	r31, 0x02	; 2
					int kommando[6] = {1,0,1,0,1,0};
 3ce:	de 01       	movw	r26, r28
 3d0:	12 96       	adiw	r26, 0x02	; 2
 3d2:	01 90       	ld	r0, Z+
 3d4:	0d 92       	st	X+, r0
 3d6:	8a 95       	dec	r24
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x1f8>
 3da:	be 01       	movw	r22, r28
 3dc:	6e 5f       	subi	r22, 0xFE	; 254
					sender.setKommando(kommando);
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	80 e4       	ldi	r24, 0x40	; 64
 3e2:	96 e0       	ldi	r25, 0x06	; 6
 3e4:	9e d0       	rcall	.+316    	; 0x522 <_ZN11Transmitter11setKommandoEPi>
 3e6:	47 c0       	rjmp	.+142    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 3e8:	6a e1       	ldi	r22, 0x1A	; 26
 3ea:	76 e0       	ldi	r23, 0x06	; 6
				}
				break;
 3ec:	ce 01       	movw	r24, r28
				case '4':
				{
					uart0.SendString("Gardin rulles ned\n\r");
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	91 d1       	rcall	.+802    	; 0x714 <_ZN4UART10SendStringEPc>
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	e8 e2       	ldi	r30, 0x28	; 40
 3f6:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {1,0,0,1,1,0};
 3f8:	de 01       	movw	r26, r28
 3fa:	1e 96       	adiw	r26, 0x0e	; 14
 3fc:	01 90       	ld	r0, Z+
 3fe:	0d 92       	st	X+, r0
 400:	8a 95       	dec	r24
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x222>
 404:	be 01       	movw	r22, r28
 406:	62 5f       	subi	r22, 0xF2	; 242
					sender.setAdresse(adresse);
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	80 e4       	ldi	r24, 0x40	; 64
 40c:	96 e0       	ldi	r25, 0x06	; 6
 40e:	7d d0       	rcall	.+250    	; 0x50a <_ZN11Transmitter10setAdresseEPi>
 410:	8c e0       	ldi	r24, 0x0C	; 12
 412:	e0 e1       	ldi	r30, 0x10	; 16
 414:	f2 e0       	ldi	r31, 0x02	; 2
					int kommando[6] = {0,1,0,1,0,1};
 416:	de 01       	movw	r26, r28
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	be 01       	movw	r22, r28
 424:	6e 5f       	subi	r22, 0xFE	; 254
					sender.setKommando(kommando);
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	80 e4       	ldi	r24, 0x40	; 64
 42a:	96 e0       	ldi	r25, 0x06	; 6
 42c:	7a d0       	rcall	.+244    	; 0x522 <_ZN11Transmitter11setKommandoEPi>
 42e:	23 c0       	rjmp	.+70     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 430:	6e e2       	ldi	r22, 0x2E	; 46
 432:	76 e0       	ldi	r23, 0x06	; 6
				}
				break;
				case '5':
				{
					uart0.SendString("Hjem lukkes ned\n\r");
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	6d d1       	rcall	.+730    	; 0x714 <_ZN4UART10SendStringEPc>
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	e8 e2       	ldi	r30, 0x28	; 40
					int adresse[6] = {1,0,0,1,1,0};
 43e:	f2 e0       	ldi	r31, 0x02	; 2
 440:	de 01       	movw	r26, r28
 442:	1e 96       	adiw	r26, 0x0e	; 14
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	8a 95       	dec	r24
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
					sender.setAdresse(adresse);
 44c:	be 01       	movw	r22, r28
 44e:	62 5f       	subi	r22, 0xF2	; 242
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	80 e4       	ldi	r24, 0x40	; 64
 454:	96 e0       	ldi	r25, 0x06	; 6
 456:	59 d0       	rcall	.+178    	; 0x50a <_ZN11Transmitter10setAdresseEPi>
					int kommando[6] = {0,1,0,1,0,1};
 458:	8c e0       	ldi	r24, 0x0C	; 12
 45a:	e0 e1       	ldi	r30, 0x10	; 16
 45c:	f2 e0       	ldi	r31, 0x02	; 2
 45e:	de 01       	movw	r26, r28
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
					sender.setKommando(kommando);
 468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	be 01       	movw	r22, r28
 46c:	6e 5f       	subi	r22, 0xFE	; 254
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	80 e4       	ldi	r24, 0x40	; 64
 472:	96 e0       	ldi	r25, 0x06	; 6
 474:	56 d0       	rcall	.+172    	; 0x522 <_ZN11Transmitter11setKommandoEPi>
				}				
				default:
					break;
				}
				
				sender.setZeroCross(0);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	80 e4       	ldi	r24, 0x40	; 64
 47c:	96 e0       	ldi	r25, 0x06	; 6
 47e:	3e d0       	rcall	.+124    	; 0x4fc <_ZN11Transmitter12setZeroCrossEi>
				
				sender.sendStartBits();
 480:	80 e4       	ldi	r24, 0x40	; 64
 482:	96 e0       	ldi	r25, 0x06	; 6
 484:	64 d0       	rcall	.+200    	; 0x54e <_ZN11Transmitter13sendStartBitsEv>
				sender.sendAdresseBits();
 486:	80 e4       	ldi	r24, 0x40	; 64
 488:	96 e0       	ldi	r25, 0x06	; 6
 48a:	95 d0       	rcall	.+298    	; 0x5b6 <_ZN11Transmitter15sendAdresseBitsEv>
				sender.sendKommandoBits();
 48c:	80 e4       	ldi	r24, 0x40	; 64
 48e:	96 e0       	ldi	r25, 0x06	; 6
 490:	c5 d0       	rcall	.+394    	; 0x61c <_ZN11Transmitter16sendKommandoBitsEv>
				sender.sendStopBits();
 492:	80 e4       	ldi	r24, 0x40	; 64
 494:	96 e0       	ldi	r25, 0x06	; 6
 496:	f5 d0       	rcall	.+490    	; 0x682 <_ZN11Transmitter12sendStopBitsEv>
 498:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <modtaget>
				
				if (modtaget == '5')
 49c:	85 33       	cpi	r24, 0x35	; 53
 49e:	01 f5       	brne	.+64     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4a0:	60 e0       	ldi	r22, 0x00	; 0
				{
					sender.setZeroCross(0);
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	80 e4       	ldi	r24, 0x40	; 64
 4a6:	96 e0       	ldi	r25, 0x06	; 6
 4a8:	29 d0       	rcall	.+82     	; 0x4fc <_ZN11Transmitter12setZeroCrossEi>
 4aa:	8c e0       	ldi	r24, 0x0C	; 12
 4ac:	e0 e1       	ldi	r30, 0x10	; 16
					
					int adresse[6] = {0,1,0,1,0,1};
 4ae:	f2 e0       	ldi	r31, 0x02	; 2
 4b0:	de 01       	movw	r26, r28
 4b2:	12 96       	adiw	r26, 0x02	; 2
 4b4:	01 90       	ld	r0, Z+
 4b6:	0d 92       	st	X+, r0
 4b8:	8a 95       	dec	r24
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	be 01       	movw	r22, r28
 4be:	6e 5f       	subi	r22, 0xFE	; 254
					sender.setAdresse(adresse);
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	80 e4       	ldi	r24, 0x40	; 64
 4c4:	96 e0       	ldi	r25, 0x06	; 6
 4c6:	21 d0       	rcall	.+66     	; 0x50a <_ZN11Transmitter10setAdresseEPi>
 4c8:	80 e4       	ldi	r24, 0x40	; 64
 4ca:	96 e0       	ldi	r25, 0x06	; 6
 4cc:	40 d0       	rcall	.+128    	; 0x54e <_ZN11Transmitter13sendStartBitsEv>
					sender.sendStartBits();									
 4ce:	80 e4       	ldi	r24, 0x40	; 64
 4d0:	96 e0       	ldi	r25, 0x06	; 6
 4d2:	71 d0       	rcall	.+226    	; 0x5b6 <_ZN11Transmitter15sendAdresseBitsEv>
 4d4:	80 e4       	ldi	r24, 0x40	; 64
					sender.sendAdresseBits();									
 4d6:	96 e0       	ldi	r25, 0x06	; 6
 4d8:	a1 d0       	rcall	.+322    	; 0x61c <_ZN11Transmitter16sendKommandoBitsEv>
 4da:	80 e4       	ldi	r24, 0x40	; 64
 4dc:	96 e0       	ldi	r25, 0x06	; 6
					sender.sendKommandoBits();
 4de:	d1 d0       	rcall	.+418    	; 0x682 <_ZN11Transmitter12sendStopBitsEv>
 4e0:	83 b1       	in	r24, 0x03	; 3
 4e2:	80 95       	com	r24
 4e4:	85 b9       	out	0x05, r24	; 5
					sender.sendStopBits();
 4e6:	10 93 5a 06 	sts	0x065A, r17	; 0x80065a <modtaget>
 4ea:	eb ce       	rjmp	.-554    	; 0x2c2 <main+0xe8>

000004ec <_GLOBAL__sub_I_modtaget>:
 4ec:	80 e4       	ldi	r24, 0x40	; 64
				}
						
				PORTB = PINB ^ 0b11111111;
 4ee:	96 e0       	ldi	r25, 0x06	; 6
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <_ZN11TransmitterC1Ev>
 4f2:	08 95       	ret

000004f4 <_ZN11TransmitterC1Ev>:

			}
		modtaget = '0';
 4f4:	fc 01       	movw	r30, r24
 4f6:	11 82       	std	Z+1, r1	; 0x01
	uart0.SendString("Rul gardin ned: Tast '4'                           \n\r");
	uart0.SendString("Sluk Hjem:      Tast '5'                           \n\r");
	uart0.SendString("__________________________________________________ \n\r");	
	
    /* Replace with your application code */
    while (1) 
 4f8:	10 82       	st	Z, r1


int Transmitter::getZeroCross()
{
	return zeroCross;
}
 4fa:	08 95       	ret

000004fc <_ZN11Transmitter12setZeroCrossEi>:

void Transmitter::setZeroCross(int x)
{
	if (x == 1 || x == 0)		//Dette er lavet så zeroCross kun kan blive 1 eller 0
 4fc:	62 30       	cpi	r22, 0x02	; 2
 4fe:	71 05       	cpc	r23, r1
 500:	18 f4       	brcc	.+6      	; 0x508 <_ZN11Transmitter12setZeroCrossEi+0xc>
	{
		zeroCross = x;
 502:	fc 01       	movw	r30, r24
 504:	71 83       	std	Z+1, r23	; 0x01
 506:	60 83       	st	Z, r22
 508:	08 95       	ret

0000050a <_ZN11Transmitter10setAdresseEPi>:
	}
}

void Transmitter::setAdresse(int array[])
{
 50a:	db 01       	movw	r26, r22
 50c:	fc 01       	movw	r30, r24
 50e:	32 96       	adiw	r30, 0x02	; 2
 510:	0e 96       	adiw	r24, 0x0e	; 14
	for (int i = 0; i < 6; i++)		// Sætter adressebits
	{
		adresse_[i] = array[i];
 512:	2d 91       	ld	r18, X+
 514:	3d 91       	ld	r19, X+
 516:	21 93       	st	Z+, r18
 518:	31 93       	st	Z+, r19
	}
}

void Transmitter::setAdresse(int array[])
{
	for (int i = 0; i < 6; i++)		// Sætter adressebits
 51a:	e8 17       	cp	r30, r24
 51c:	f9 07       	cpc	r31, r25
 51e:	c9 f7       	brne	.-14     	; 0x512 <_ZN11Transmitter10setAdresseEPi+0x8>
	{
		adresse_[i] = array[i];
	}
}
 520:	08 95       	ret

00000522 <_ZN11Transmitter11setKommandoEPi>:

void Transmitter::setKommando(int array[])
{
 522:	db 01       	movw	r26, r22
 524:	fc 01       	movw	r30, r24
 526:	3e 96       	adiw	r30, 0x0e	; 14
 528:	4a 96       	adiw	r24, 0x1a	; 26
	for (int i = 0; i < 6; i++)		// Sætter kommandobits
	{
		kommando_[i] = array[i];
 52a:	2d 91       	ld	r18, X+
 52c:	3d 91       	ld	r19, X+
 52e:	21 93       	st	Z+, r18
 530:	31 93       	st	Z+, r19
	}
}

void Transmitter::setKommando(int array[])
{
	for (int i = 0; i < 6; i++)		// Sætter kommandobits
 532:	e8 17       	cp	r30, r24
 534:	f9 07       	cpc	r31, r25
 536:	c9 f7       	brne	.-14     	; 0x52a <_ZN11Transmitter11setKommandoEPi+0x8>
	{
		kommando_[i] = array[i];
	}
}
 538:	08 95       	ret

0000053a <_ZN11Transmitter13start1msDelayEv>:
	}
}

void Transmitter::start1msDelay()
{
	TCNT0 = 240;						// Sætter en værdi så det vil tage 1 ms at lave overflow
 53a:	80 ef       	ldi	r24, 0xF0	; 240
 53c:	86 bd       	out	0x26, r24	; 38
	TCCR0A |= 0b00000000;				// Sætter timeren til normalmode
 53e:	84 b5       	in	r24, 0x24	; 36
 540:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0b00000101;				// Sætter prescalleren til 1024
 542:	85 b5       	in	r24, 0x25	; 37
 544:	85 60       	ori	r24, 0x05	; 5
 546:	85 bd       	out	0x25, r24	; 37
	while ((TIFR0 & (1<<0)) == 0)		// Venter på at timeren laver overflow
 548:	a8 9b       	sbis	0x15, 0	; 21
 54a:	fe cf       	rjmp	.-4      	; 0x548 <_ZN11Transmitter13start1msDelayEv+0xe>
	{}
}
 54c:	08 95       	ret

0000054e <_ZN11Transmitter13sendStartBitsEv>:
		kommando_[i] = array[i];
	}
}

void Transmitter::sendStartBits()
{
 54e:	df 92       	push	r13
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	ec 01       	movw	r28, r24
 55e:	08 e0       	ldi	r16, 0x08	; 8
 560:	12 e0       	ldi	r17, 0x02	; 2
 562:	0f 2e       	mov	r0, r31
 564:	f0 e1       	ldi	r31, 0x10	; 16
 566:	ef 2e       	mov	r14, r31
 568:	f2 e0       	ldi	r31, 0x02	; 2
 56a:	ff 2e       	mov	r15, r31
 56c:	f0 2d       	mov	r31, r0
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 56e:	dd 24       	eor	r13, r13
 570:	d3 94       	inc	r13

void Transmitter::sendStartBits()
{
	for (int i = 0; i < 4; i++)			// Sender 4 bits (Startbit)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerocross
 572:	88 81       	ld	r24, Y
 574:	99 81       	ldd	r25, Y+1	; 0x01
 576:	89 2b       	or	r24, r25
 578:	39 f4       	brne	.+14     	; 0x588 <_ZN11Transmitter13sendStartBitsEv+0x3a>
		{PORTB = PINB | 0b00000001;}
 57a:	83 b1       	in	r24, 0x03	; 3
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	85 b9       	out	0x05, r24	; 5

void Transmitter::sendStartBits()
{
	for (int i = 0; i < 4; i++)			// Sender 4 bits (Startbit)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerocross
 580:	88 81       	ld	r24, Y
 582:	99 81       	ldd	r25, Y+1	; 0x01
 584:	89 2b       	or	r24, r25
 586:	c9 f3       	breq	.-14     	; 0x57a <_ZN11Transmitter13sendStartBitsEv+0x2c>
		{PORTB = PINB | 0b00000001;}
		PORTC = startbit_[i];			// Sender den næste værdi ud på PORTC
 588:	f8 01       	movw	r30, r16
 58a:	80 81       	ld	r24, Z
 58c:	0e 5f       	subi	r16, 0xFE	; 254
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	88 b9       	out	0x08, r24	; 8
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
 592:	ce 01       	movw	r24, r28
 594:	d2 df       	rcall	.-92     	; 0x53a <_ZN11Transmitter13start1msDelayEv>
		PORTC = 0;						// Slukker for burst
 596:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
 598:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 59a:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00000001;}
		PORTC = startbit_[i];			// Sender den næste værdi ud på PORTC
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
 59c:	19 82       	std	Y+1, r1	; 0x01
 59e:	18 82       	st	Y, r1
	}
}

void Transmitter::sendStartBits()
{
	for (int i = 0; i < 4; i++)			// Sender 4 bits (Startbit)
 5a0:	0e 15       	cp	r16, r14
 5a2:	1f 05       	cpc	r17, r15
 5a4:	31 f7       	brne	.-52     	; 0x572 <_ZN11Transmitter13sendStartBitsEv+0x24>
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
	}
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	08 95       	ret

000005b6 <_ZN11Transmitter15sendAdresseBitsEv>:


void Transmitter::sendAdresseBits()
{
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	ec 01       	movw	r28, r24
 5c6:	8c 01       	movw	r16, r24
 5c8:	0e 5f       	subi	r16, 0xFE	; 254
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	7c 01       	movw	r14, r24
 5ce:	8e e0       	ldi	r24, 0x0E	; 14
 5d0:	e8 0e       	add	r14, r24
 5d2:	f1 1c       	adc	r15, r1
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 5d4:	dd 24       	eor	r13, r13
 5d6:	d3 94       	inc	r13

void Transmitter::sendAdresseBits()
{
	for (int i = 0; i < 6; i++)			// Sender 6 bits (Adressen)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerocross
 5d8:	88 81       	ld	r24, Y
 5da:	99 81       	ldd	r25, Y+1	; 0x01
 5dc:	89 2b       	or	r24, r25
 5de:	39 f4       	brne	.+14     	; 0x5ee <_ZN11Transmitter15sendAdresseBitsEv+0x38>
		{PORTB = PINB | 0b00000010;}
 5e0:	83 b1       	in	r24, 0x03	; 3
 5e2:	82 60       	ori	r24, 0x02	; 2
 5e4:	85 b9       	out	0x05, r24	; 5

void Transmitter::sendAdresseBits()
{
	for (int i = 0; i < 6; i++)			// Sender 6 bits (Adressen)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerocross
 5e6:	88 81       	ld	r24, Y
 5e8:	99 81       	ldd	r25, Y+1	; 0x01
 5ea:	89 2b       	or	r24, r25
 5ec:	c9 f3       	breq	.-14     	; 0x5e0 <_ZN11Transmitter15sendAdresseBitsEv+0x2a>
		{PORTB = PINB | 0b00000010;}
		PORTC = adresse_[i];			// Sender den næste værdi ud på PORTC
 5ee:	f8 01       	movw	r30, r16
 5f0:	80 81       	ld	r24, Z
 5f2:	0e 5f       	subi	r16, 0xFE	; 254
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	88 b9       	out	0x08, r24	; 8
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
 5f8:	ce 01       	movw	r24, r28
 5fa:	9f df       	rcall	.-194    	; 0x53a <_ZN11Transmitter13start1msDelayEv>
		PORTC = 0;						// Slukker for burst
 5fc:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
 5fe:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 600:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00000010;}
		PORTC = adresse_[i];			// Sender den næste værdi ud på PORTC
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
 602:	19 82       	std	Y+1, r1	; 0x01
 604:	18 82       	st	Y, r1
}


void Transmitter::sendAdresseBits()
{
	for (int i = 0; i < 6; i++)			// Sender 6 bits (Adressen)
 606:	0e 15       	cp	r16, r14
 608:	1f 05       	cpc	r17, r15
 60a:	31 f7       	brne	.-52     	; 0x5d8 <_ZN11Transmitter15sendAdresseBitsEv+0x22>
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
	}
}
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	08 95       	ret

0000061c <_ZN11Transmitter16sendKommandoBitsEv>:
	
void Transmitter::sendKommandoBits()
{
 61c:	df 92       	push	r13
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	ec 01       	movw	r28, r24
 62c:	8c 01       	movw	r16, r24
 62e:	02 5f       	subi	r16, 0xF2	; 242
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	7c 01       	movw	r14, r24
 634:	8a e1       	ldi	r24, 0x1A	; 26
 636:	e8 0e       	add	r14, r24
 638:	f1 1c       	adc	r15, r1
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 63a:	dd 24       	eor	r13, r13
 63c:	d3 94       	inc	r13
	
void Transmitter::sendKommandoBits()
{
	for (int i = 0; i < 6; i++)			// Sender 6 bits (Kommando)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerocross
 63e:	88 81       	ld	r24, Y
 640:	99 81       	ldd	r25, Y+1	; 0x01
 642:	89 2b       	or	r24, r25
 644:	39 f4       	brne	.+14     	; 0x654 <_ZN11Transmitter16sendKommandoBitsEv+0x38>
		{PORTB = PINB | 0b00000100;}
 646:	83 b1       	in	r24, 0x03	; 3
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	85 b9       	out	0x05, r24	; 5
	
void Transmitter::sendKommandoBits()
{
	for (int i = 0; i < 6; i++)			// Sender 6 bits (Kommando)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerocross
 64c:	88 81       	ld	r24, Y
 64e:	99 81       	ldd	r25, Y+1	; 0x01
 650:	89 2b       	or	r24, r25
 652:	c9 f3       	breq	.-14     	; 0x646 <_ZN11Transmitter16sendKommandoBitsEv+0x2a>
		{PORTB = PINB | 0b00000100;}
		PORTC = kommando_[i];			// Sender den næste værdi ud på PORTC
 654:	f8 01       	movw	r30, r16
 656:	80 81       	ld	r24, Z
 658:	0e 5f       	subi	r16, 0xFE	; 254
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	88 b9       	out	0x08, r24	; 8
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
 65e:	ce 01       	movw	r24, r28
 660:	6c df       	rcall	.-296    	; 0x53a <_ZN11Transmitter13start1msDelayEv>
		PORTC = 0;						// Slukker for burst
 662:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
 664:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 666:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00000100;}
		PORTC = kommando_[i];			// Sender den næste værdi ud på PORTC
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
 668:	19 82       	std	Y+1, r1	; 0x01
 66a:	18 82       	st	Y, r1
	}
}
	
void Transmitter::sendKommandoBits()
{
	for (int i = 0; i < 6; i++)			// Sender 6 bits (Kommando)
 66c:	0e 15       	cp	r16, r14
 66e:	1f 05       	cpc	r17, r15
 670:	31 f7       	brne	.-52     	; 0x63e <_ZN11Transmitter16sendKommandoBitsEv+0x22>
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
	}
}
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	ff 90       	pop	r15
 67c:	ef 90       	pop	r14
 67e:	df 90       	pop	r13
 680:	08 95       	ret

00000682 <_ZN11Transmitter12sendStopBitsEv>:

void Transmitter::sendStopBits()
{
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	ec 01       	movw	r28, r24
 692:	00 e0       	ldi	r16, 0x00	; 0
 694:	12 e0       	ldi	r17, 0x02	; 2
 696:	0f 2e       	mov	r0, r31
 698:	f8 e0       	ldi	r31, 0x08	; 8
 69a:	ef 2e       	mov	r14, r31
 69c:	f2 e0       	ldi	r31, 0x02	; 2
 69e:	ff 2e       	mov	r15, r31
 6a0:	f0 2d       	mov	r31, r0
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 6a2:	dd 24       	eor	r13, r13
 6a4:	d3 94       	inc	r13

void Transmitter::sendStopBits()
{
	for (int i = 0; i < 4; i++)			// Sender 4 bits (Stopbits)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerrocross
 6a6:	88 81       	ld	r24, Y
 6a8:	99 81       	ldd	r25, Y+1	; 0x01
 6aa:	89 2b       	or	r24, r25
 6ac:	39 f4       	brne	.+14     	; 0x6bc <_ZN11Transmitter12sendStopBitsEv+0x3a>
		{PORTB = PINB | 0b00001000;}
 6ae:	83 b1       	in	r24, 0x03	; 3
 6b0:	88 60       	ori	r24, 0x08	; 8
 6b2:	85 b9       	out	0x05, r24	; 5

void Transmitter::sendStopBits()
{
	for (int i = 0; i < 4; i++)			// Sender 4 bits (Stopbits)
	{
		while (zeroCross==0)			// Venter på at der kommer et zerrocross
 6b4:	88 81       	ld	r24, Y
 6b6:	99 81       	ldd	r25, Y+1	; 0x01
 6b8:	89 2b       	or	r24, r25
 6ba:	c9 f3       	breq	.-14     	; 0x6ae <_ZN11Transmitter12sendStopBitsEv+0x2c>
		{PORTB = PINB | 0b00001000;}
		PORTC = stopbit_[i];			// Sender den næste værdi ud på PORTC
 6bc:	f8 01       	movw	r30, r16
 6be:	80 81       	ld	r24, Z
 6c0:	0e 5f       	subi	r16, 0xFE	; 254
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	88 b9       	out	0x08, r24	; 8
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
 6c6:	ce 01       	movw	r24, r28
 6c8:	38 df       	rcall	.-400    	; 0x53a <_ZN11Transmitter13start1msDelayEv>
		PORTC = 0;						// Slukker for burst
 6ca:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transmitter::stop1msDelay()		// Slukker for timeren
{
	TCCR0B = 0b00000000;
 6cc:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 6ce:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00001000;}
		PORTC = stopbit_[i];			// Sender den næste værdi ud på PORTC
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
 6d0:	19 82       	std	Y+1, r1	; 0x01
 6d2:	18 82       	st	Y, r1
	}
}

void Transmitter::sendStopBits()
{
	for (int i = 0; i < 4; i++)			// Sender 4 bits (Stopbits)
 6d4:	0e 15       	cp	r16, r14
 6d6:	1f 05       	cpc	r17, r15
 6d8:	31 f7       	brne	.-52     	; 0x6a6 <_ZN11Transmitter12sendStopBitsEv+0x24>
		start1msDelay();				// Venter 1 ms, skaber burst i 1ms
		PORTC = 0;						// Slukker for burst
		stop1msDelay();					// Stopper timeren der står for at lave delay
		zeroCross = 0;					// Nulstiller zeroCross, så den er klar til næste interrupt
	}
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	08 95       	ret

000006ea <_ZN4UARTC1Ev>:
#include "UART.h"

// default constructor
UART::UART()
{
	UCSR0B = 0b10011000;			// Tænder for sender og modtager + enabler interupt ved modtagelse
 6ea:	88 e9       	ldi	r24, 0x98	; 152
 6ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;					// Værdien gør at baud raten er 9600
 6f0:	87 e6       	ldi	r24, 0x67	; 103
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 6f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0C = 0b00000110;			// bit 0 gør ingenting
 6fc:	86 e0       	ldi	r24, 0x06	; 6
 6fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 702:	08 95       	ret

00000704 <_ZN4UART8SendCharEc>:
									
} //UART

void UART::SendChar(char Tegn)
{
	while((0b00100000 & UCSR0A) == 0)
 704:	e0 ec       	ldi	r30, 0xC0	; 192
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	85 ff       	sbrs	r24, 5
 70c:	fd cf       	rjmp	.-6      	; 0x708 <_ZN4UART8SendCharEc+0x4>
	{}
	UDR0 = Tegn;
 70e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 712:	08 95       	ret

00000714 <_ZN4UART10SendStringEPc>:
}

void UART::SendString(char* Streng)
{
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	eb 01       	movw	r28, r22
	while (*Streng != 0)
 71e:	68 81       	ld	r22, Y
 720:	66 23       	and	r22, r22
 722:	39 f0       	breq	.+14     	; 0x732 <_ZN4UART10SendStringEPc+0x1e>
 724:	8c 01       	movw	r16, r24
 726:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*Streng);
 728:	c8 01       	movw	r24, r16
 72a:	ec df       	rcall	.-40     	; 0x704 <_ZN4UART8SendCharEc>
	UDR0 = Tegn;
}

void UART::SendString(char* Streng)
{
	while (*Streng != 0)
 72c:	69 91       	ld	r22, Y+
 72e:	61 11       	cpse	r22, r1
 730:	fb cf       	rjmp	.-10     	; 0x728 <_ZN4UART10SendStringEPc+0x14>
	{
		SendChar(*Streng);
		Streng++;
	}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <__tablejump2__>:
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	88 1f       	adc	r24, r24
 742:	8b bf       	out	0x3b, r24	; 59
 744:	07 90       	elpm	r0, Z+
 746:	f6 91       	elpm	r31, Z
 748:	e0 2d       	mov	r30, r0
 74a:	19 94       	eijmp

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
