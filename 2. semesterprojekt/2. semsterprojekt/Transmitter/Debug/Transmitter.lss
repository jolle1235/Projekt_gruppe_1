
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800228  00800228  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7e  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c06  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062c  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8f c0       	rjmp	.+286    	; 0x124 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e2       	ldi	r26, 0x28	; 40
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 32       	cpi	r26, 0x2A	; 42
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	29 d0       	rcall	.+82     	; 0x172 <main>
 120:	cb c0       	rjmp	.+406    	; 0x2b8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_1>:
		}
    }
}

ISR(INT0_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	zeroCross = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__data_end+0x1>
 13a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
	PORTB = PINB ^ 0b10000000;
 13e:	83 b1       	in	r24, 0x03	; 3
 140:	80 58       	subi	r24, 0x80	; 128
 142:	85 b9       	out	0x05, r24	; 5
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_Z13initInterupt0v>:

void initInterupt0()
{
	sei();
 152:	78 94       	sei
	EIMSK |= 0b00000001;
 154:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;
 156:	e9 e6       	ldi	r30, 0x69	; 105
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <_Z10initIOpinsv>:
}

void initIOpins()
{
		DDRB = 0xFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 b9       	out	0x04, r24	; 4
		DDRC = 0xFF;
 166:	87 b9       	out	0x07, r24	; 7
		DDRD = 0;
 168:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0;
 16a:	15 b8       	out	0x05, r1	; 5
		PORTC = 0;
 16c:	18 b8       	out	0x08, r1	; 8
		PORTD = 0;
 16e:	1b b8       	out	0x0b, r1	; 11
 170:	08 95       	ret

00000172 <main>:
int startbit[4] = {1,1,1,0};
int stopbit[4] = {0,1,1,1};
volatile int zeroCross = 0;

int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	68 97       	sbiw	r28, 0x18	; 24
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61

	initIOpins();
 186:	ed df       	rcall	.-38     	; 0x162 <_Z10initIOpinsv>
	initInterupt0();
 188:	e4 df       	rcall	.-56     	; 0x152 <_Z13initInterupt0v>
 18a:	8c e0       	ldi	r24, 0x0C	; 12
    /* Replace with your application code */
    while (1) 
    {
		
		
		int adresse[6] = {0,1,0,1,0,1};
 18c:	e0 e1       	ldi	r30, 0x10	; 16
 18e:	f2 e0       	ldi	r31, 0x02	; 2
 190:	de 01       	movw	r26, r28
 192:	1d 96       	adiw	r26, 0x0d	; 13
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x22>
 19c:	8c e0       	ldi	r24, 0x0C	; 12
		int kommando[6] = {1,0,1,0,1,0};
 19e:	ec e1       	ldi	r30, 0x1C	; 28
 1a0:	f2 e0       	ldi	r31, 0x02	; 2
 1a2:	de 01       	movw	r26, r28
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x34>
 1ae:	e8 e0       	ldi	r30, 0x08	; 8
 1b0:	f2 e0       	ldi	r31, 0x02	; 2
 1b2:	40 e1       	ldi	r20, 0x10	; 16
 1b4:	52 e0       	ldi	r21, 0x02	; 2
 1b6:	21 e0       	ldi	r18, 0x01	; 1
			TCCR0B |= 0b00000010;
			while ((TIFR0 & (1<<0)) == 0)
			{}
			PORTC = 0;
			TCCR0B |= 0b00000000;
			TIFR0 = 0b00000001;
 1b8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
		int adresse[6] = {0,1,0,1,0,1};
		int kommando[6] = {1,0,1,0,1,0};
		
		for (int i = 0; i < 4; i++)
		{
			while (zeroCross==0)
 1bc:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 1c0:	89 2b       	or	r24, r25
 1c2:	d1 f3       	breq	.-12     	; 0x1b8 <main+0x46>
 1c4:	80 81       	ld	r24, Z
			{}
			PORTC = startbit[i];
 1c6:	32 96       	adiw	r30, 0x02	; 2
 1c8:	88 b9       	out	0x08, r24	; 8
 1ca:	84 b5       	in	r24, 0x24	; 36
			TCCR0A |= 0b00000000;
 1cc:	84 bd       	out	0x24, r24	; 36
 1ce:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000010;
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 bd       	out	0x25, r24	; 37
 1d4:	a8 9b       	sbis	0x15, 0	; 21
			while ((TIFR0 & (1<<0)) == 0)
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <main+0x62>
 1d8:	18 b8       	out	0x08, r1	; 8
			{}
			PORTC = 0;
 1da:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000000;
 1dc:	85 bd       	out	0x25, r24	; 37
 1de:	25 bb       	out	0x15, r18	; 21
			TIFR0 = 0b00000001;
 1e0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x1>
			zeroCross = 0;
 1e4:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 1e8:	e4 17       	cp	r30, r20
		
		
		int adresse[6] = {0,1,0,1,0,1};
		int kommando[6] = {1,0,1,0,1,0};
		
		for (int i = 0; i < 4; i++)
 1ea:	f5 07       	cpc	r31, r21
 1ec:	29 f7       	brne	.-54     	; 0x1b8 <main+0x46>
 1ee:	fe 01       	movw	r30, r28
 1f0:	3d 96       	adiw	r30, 0x0d	; 13
 1f2:	ae 01       	movw	r20, r28
 1f4:	47 5e       	subi	r20, 0xE7	; 231
 1f6:	5f 4f       	sbci	r21, 0xFF	; 255
 1f8:	21 e0       	ldi	r18, 0x01	; 1
			TCCR0B |= 0b00000010;
			while ((TIFR0 & (1<<0)) == 0)
			{}
			PORTC = 0;
			TCCR0B |= 0b00000000;
			TIFR0 = 0b00000001;
 1fa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
			zeroCross = 0;
		}

		for (int i = 0; i < 6; i++)
		{
			while (zeroCross==0)
 1fe:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 202:	89 2b       	or	r24, r25
 204:	d1 f3       	breq	.-12     	; 0x1fa <main+0x88>
 206:	80 81       	ld	r24, Z
			{}
			PORTC = adresse[i];
 208:	32 96       	adiw	r30, 0x02	; 2
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	84 b5       	in	r24, 0x24	; 36
			TCCR0A |= 0b00000000;
 20e:	84 bd       	out	0x24, r24	; 36
 210:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000010;
 212:	82 60       	ori	r24, 0x02	; 2
 214:	85 bd       	out	0x25, r24	; 37
 216:	a8 9b       	sbis	0x15, 0	; 21
			while ((TIFR0 & (1<<0)) == 0)
 218:	fe cf       	rjmp	.-4      	; 0x216 <main+0xa4>
 21a:	18 b8       	out	0x08, r1	; 8
			{}
			PORTC = 0;
 21c:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000000;
 21e:	85 bd       	out	0x25, r24	; 37
 220:	25 bb       	out	0x15, r18	; 21
			TIFR0 = 0b00000001;
 222:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x1>
			zeroCross = 0;
 226:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 22a:	4e 17       	cp	r20, r30
			TCCR0B |= 0b00000000;
			TIFR0 = 0b00000001;
			zeroCross = 0;
		}

		for (int i = 0; i < 6; i++)
 22c:	5f 07       	cpc	r21, r31
 22e:	29 f7       	brne	.-54     	; 0x1fa <main+0x88>
 230:	fe 01       	movw	r30, r28
 232:	31 96       	adiw	r30, 0x01	; 1
 234:	ae 01       	movw	r20, r28
 236:	43 5f       	subi	r20, 0xF3	; 243
 238:	5f 4f       	sbci	r21, 0xFF	; 255
 23a:	21 e0       	ldi	r18, 0x01	; 1
			TCCR0B |= 0b00000010;
			while ((TIFR0 & (1<<0)) == 0)
			{}
			PORTC = 0;
			TCCR0B |= 0b00000000;
			TIFR0 = 0b00000001;
 23c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
			zeroCross = 0;
		}		
		
		for (int i = 0; i < 6; i++)
		{
			while (zeroCross==0)
 240:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 244:	89 2b       	or	r24, r25
 246:	d1 f3       	breq	.-12     	; 0x23c <main+0xca>
 248:	80 81       	ld	r24, Z
			{}
			PORTC = kommando[i];
 24a:	32 96       	adiw	r30, 0x02	; 2
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	84 b5       	in	r24, 0x24	; 36
			TCCR0A |= 0b00000000;
 250:	84 bd       	out	0x24, r24	; 36
 252:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000010;
 254:	82 60       	ori	r24, 0x02	; 2
 256:	85 bd       	out	0x25, r24	; 37
 258:	a8 9b       	sbis	0x15, 0	; 21
			while ((TIFR0 & (1<<0)) == 0)
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0xe6>
 25c:	18 b8       	out	0x08, r1	; 8
			{}
			PORTC = 0;
 25e:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000000;
 260:	85 bd       	out	0x25, r24	; 37
 262:	25 bb       	out	0x15, r18	; 21
			TIFR0 = 0b00000001;
 264:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x1>
			zeroCross = 0;
 268:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 26c:	e4 17       	cp	r30, r20
			TCCR0B |= 0b00000000;
			TIFR0 = 0b00000001;
			zeroCross = 0;
		}		
		
		for (int i = 0; i < 6; i++)
 26e:	f5 07       	cpc	r31, r21
 270:	29 f7       	brne	.-54     	; 0x23c <main+0xca>
 272:	e0 e0       	ldi	r30, 0x00	; 0
 274:	f2 e0       	ldi	r31, 0x02	; 2
 276:	48 e0       	ldi	r20, 0x08	; 8
 278:	52 e0       	ldi	r21, 0x02	; 2
 27a:	21 e0       	ldi	r18, 0x01	; 1
			TCCR0B |= 0b00000010;
			while ((TIFR0 & (1<<0)) == 0)
			{}
			PORTC = 0;
			TCCR0B |= 0b00000000;
			TIFR0 = 0b00000001;
 27c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
		}
		
		
		for (int i = 0; i < 4; i++)
		{
			while (zeroCross==0)
 280:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 284:	89 2b       	or	r24, r25
 286:	d1 f3       	breq	.-12     	; 0x27c <main+0x10a>
 288:	80 81       	ld	r24, Z
			{}
			PORTC = stopbit[i];
 28a:	32 96       	adiw	r30, 0x02	; 2
 28c:	88 b9       	out	0x08, r24	; 8
 28e:	84 b5       	in	r24, 0x24	; 36
			TCCR0A |= 0b00000000;
 290:	84 bd       	out	0x24, r24	; 36
 292:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000010;
 294:	82 60       	ori	r24, 0x02	; 2
 296:	85 bd       	out	0x25, r24	; 37
 298:	a8 9b       	sbis	0x15, 0	; 21
			while ((TIFR0 & (1<<0)) == 0)
 29a:	fe cf       	rjmp	.-4      	; 0x298 <main+0x126>
 29c:	18 b8       	out	0x08, r1	; 8
			{}
			PORTC = 0;
 29e:	85 b5       	in	r24, 0x25	; 37
			TCCR0B |= 0b00000000;
 2a0:	85 bd       	out	0x25, r24	; 37
 2a2:	25 bb       	out	0x15, r18	; 21
			TIFR0 = 0b00000001;
 2a4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x1>
			zeroCross = 0;
 2a8:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 2ac:	4e 17       	cp	r20, r30
			TIFR0 = 0b00000001;
			zeroCross = 0;
		}
		
		
		for (int i = 0; i < 4; i++)
 2ae:	5f 07       	cpc	r21, r31
 2b0:	29 f7       	brne	.-54     	; 0x27c <main+0x10a>
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
		}
		

		while (1)
		{
			PORTB = 0xFF;
 2b4:	85 b9       	out	0x05, r24	; 5
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <main+0x142>

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
