
Tranciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000440  00800200  0000087c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800640  00800640  00000d50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f30  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001022  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ff  00000000  00000000  00003e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bf  00000000  00000000  000053ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9f c0       	rjmp	.+318    	; 0x144 <__vector_1>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c3 c0       	rjmp	.+390    	; 0x1d8 <__vector_20>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	a9 c0       	rjmp	.+338    	; 0x1b8 <__vector_25>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	0c 03       	fmul	r16, r20

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	16 e0       	ldi	r17, 0x06	; 6
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f8 e0       	ldi	r31, 0x08	; 8
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a0 34       	cpi	r26, 0x40	; 64
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	26 e0       	ldi	r18, 0x06	; 6
 112:	a0 e4       	ldi	r26, 0x40	; 64
 114:	b6 e0       	ldi	r27, 0x06	; 6
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	af 35       	cpi	r26, 0x5F	; 95
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	9a d3       	rcall	.+1844   	; 0x868 <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	e3 d0       	rcall	.+454    	; 0x306 <main>
 140:	9b c3       	rjmp	.+1846   	; 0x878 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <__vector_1>:




ISR(INT0_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	0b b6       	in	r0, 0x3b	; 59
 150:	0f 92       	push	r0
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	master.setZeroCross(1);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	85 e4       	ldi	r24, 0x45	; 69
 170:	96 e0       	ldi	r25, 0x06	; 6
 172:	5a d2       	rcall	.+1204   	; 0x628 <_ZN11Transciever12setZeroCrossEi>
	
	//// timer
	TCNT1 = 64147;				// tid til overflow = 5,556 ms
 174:	83 e9       	ldi	r24, 0x93	; 147
 176:	9a ef       	ldi	r25, 0xFA	; 250
 178:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 17c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1A |= 0b00000000;		// starter timer
 180:	e0 e8       	ldi	r30, 0x80	; 128
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 83       	st	Z, r24
	TCCR1B |= 0b00000011;		// Prescale på 64
 188:	e1 e8       	ldi	r30, 0x81	; 129
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	80 83       	st	Z, r24
	
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0b be       	out	0x3b, r0	; 59
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_25>:

ISR(USART0_RX_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
	modtaget = UDR0;
 1c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1c8:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__data_end>
}
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_20>:

ISR(TIMER1_OVF_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	0b b6       	in	r0, 0x3b	; 59
 1e4:	0f 92       	push	r0
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	TCCR1B = 0b00000000; // slut timer
 1fe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	int nyesteBit;
	int ADClastRead;
	
	////ADC start
	ADMUX |= 0b00000001;   //ADC1
 202:	ec e7       	ldi	r30, 0x7C	; 124
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
	ADCSRA |= 0b01000000;	
 20c:	ea e7       	ldi	r30, 0x7A	; 122
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 83       	st	Z, r24
	while (ADCSRA & 0b01000000)
 216:	80 81       	ld	r24, Z
 218:	86 fd       	sbrc	r24, 6
 21a:	fd cf       	rjmp	.-6      	; 0x216 <__vector_20+0x3e>
	{}
	int ADCread = ADCW;
 21c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 220:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	////ADC slut
	
	////sætter nyeste bit alt efter hvad adc giver af værdi
	if (((ADCread > ADClastRead) && (ADCread > 10)) || (ADCread > 50))
 224:	18 16       	cp	r1, r24
 226:	19 06       	cpc	r1, r25
 228:	1c f4       	brge	.+6      	; 0x230 <__vector_20+0x58>
 22a:	8b 30       	cpi	r24, 0x0B	; 11
 22c:	91 05       	cpc	r25, r1
 22e:	44 f4       	brge	.+16     	; 0x240 <__vector_20+0x68>
	{
		nyesteBit = 1;
 230:	31 e0       	ldi	r19, 0x01	; 1
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	c3 97       	sbiw	r24, 0x33	; 51
 236:	0c f4       	brge	.+2      	; 0x23a <__vector_20+0x62>
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	43 2f       	mov	r20, r19
 23c:	52 2f       	mov	r21, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <__vector_20+0x6c>
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	50 e0       	ldi	r21, 0x00	; 0
		nyesteBit = 0;
	}
	ADClastRead = ADCread;
	
	tvSignal = tvSignal << 1;
	tvSignal |= nyesteBit;
 244:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <tvSignal>
 248:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <tvSignal+0x1>
 24c:	a0 91 43 06 	lds	r26, 0x0643	; 0x800643 <tvSignal+0x2>
 250:	b0 91 44 06 	lds	r27, 0x0644	; 0x800644 <tvSignal+0x3>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	aa 1f       	adc	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	05 2e       	mov	r0, r21
 25e:	00 0c       	add	r0, r0
 260:	66 0b       	sbc	r22, r22
 262:	77 0b       	sbc	r23, r23
 264:	84 2b       	or	r24, r20
 266:	95 2b       	or	r25, r21
 268:	a6 2b       	or	r26, r22
 26a:	b7 2b       	or	r27, r23
 26c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <tvSignal>
 270:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <tvSignal+0x1>
 274:	a0 93 43 06 	sts	0x0643, r26	; 0x800643 <tvSignal+0x2>
 278:	b0 93 44 06 	sts	0x0644, r27	; 0x800644 <tvSignal+0x3>
	
	switch(tvSignal)
 27c:	87 35       	cpi	r24, 0x57	; 87
 27e:	29 e3       	ldi	r18, 0x39	; 57
 280:	92 07       	cpc	r25, r18
 282:	a1 05       	cpc	r26, r1
 284:	b1 05       	cpc	r27, r1
 286:	89 f0       	breq	.+34     	; 0x2aa <__vector_20+0xd2>
 288:	87 3a       	cpi	r24, 0xA7	; 167
 28a:	9a 43       	sbci	r25, 0x3A	; 58
 28c:	a1 05       	cpc	r26, r1
 28e:	b1 05       	cpc	r27, r1
 290:	b9 f4       	brne	.+46     	; 0x2c0 <__vector_20+0xe8>
	{
		case 0b11101010100111:
			PORTB = PINB | 0b00000001;
 292:	83 b1       	in	r24, 0x03	; 3
 294:	81 60       	ori	r24, 0x01	; 1
 296:	85 b9       	out	0x05, r24	; 5
			tvSignal = 0;
 298:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <tvSignal>
 29c:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <tvSignal+0x1>
 2a0:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <tvSignal+0x2>
 2a4:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <tvSignal+0x3>
			break;
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <__vector_20+0xe8>
		case 0b11100101010111:
			PORTB = PINB & 0b11111110;
 2aa:	83 b1       	in	r24, 0x03	; 3
 2ac:	8e 7f       	andi	r24, 0xFE	; 254
 2ae:	85 b9       	out	0x05, r24	; 5
			tvSignal = 0;
 2b0:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <tvSignal>
 2b4:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <tvSignal+0x1>
 2b8:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <tvSignal+0x2>
 2bc:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <tvSignal+0x3>
			break;
		default:
			break;
	}
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0b be       	out	0x3b, r0	; 59
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <_Z13initInterupt0v>:
	}
}

void initInterupt0()
{
	sei();
 2e6:	78 94       	sei
	EIMSK |= 0b00000001;
 2e8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0b00000001;
 2ea:	e9 e6       	ldi	r30, 0x69	; 105
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret

000002f6 <_Z10initIOpinsv>:
}

void initIOpins()
{
	DDRB = 0xFF;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 2fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0;
 2fc:	1a b8       	out	0x0a, r1	; 10
	PORTB = 0;
 2fe:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 300:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 302:	1b b8       	out	0x0b, r1	; 11
 304:	08 95       	ret

00000306 <main>:
	}
}


int main(void)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	69 97       	sbiw	r28, 0x19	; 25
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
	initIOpins();
 31a:	ed df       	rcall	.-38     	; 0x2f6 <_Z10initIOpinsv>
	initInterupt0();
 31c:	e4 df       	rcall	.-56     	; 0x2e6 <_Z13initInterupt0v>
 31e:	ce 01       	movw	r24, r28
	UART uart0;
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	79 d2       	rcall	.+1266   	; 0x816 <_ZN4UARTC1Ev>
 324:	64 e3       	ldi	r22, 0x34	; 52
	
	uart0.SendString("Program startet.\f\n\n\n\r");
 326:	72 e0       	ldi	r23, 0x02	; 2
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	89 d2       	rcall	.+1298   	; 0x840 <_ZN4UART10SendStringEPc>
 32e:	6a e4       	ldi	r22, 0x4A	; 74
	uart0.SendString("_________________________________________________  \n\n\r");
 330:	72 e0       	ldi	r23, 0x02	; 2
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	84 d2       	rcall	.+1288   	; 0x840 <_ZN4UART10SendStringEPc>
 338:	61 e8       	ldi	r22, 0x81	; 129
	uart0.SendString("    X         X       X                  X X X X   \n\r");
 33a:	72 e0       	ldi	r23, 0x02	; 2
 33c:	ce 01       	movw	r24, r28
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	7f d2       	rcall	.+1278   	; 0x840 <_ZN4UART10SendStringEPc>
 342:	67 eb       	ldi	r22, 0xB7	; 183
	uart0.SendString("   X X        X       X                        X   \n\r");
 344:	72 e0       	ldi	r23, 0x02	; 2
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	7a d2       	rcall	.+1268   	; 0x840 <_ZN4UART10SendStringEPc>
 34c:	6d ee       	ldi	r22, 0xED	; 237
	uart0.SendString("  X   X       X       X    X X X X X     X X X X   \n\r");
 34e:	72 e0       	ldi	r23, 0x02	; 2
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	75 d2       	rcall	.+1258   	; 0x840 <_ZN4UART10SendStringEPc>
 356:	63 e2       	ldi	r22, 0x23	; 35
	uart0.SendString(" X X X X       X     X                   X         \n\r");
 358:	73 e0       	ldi	r23, 0x03	; 3
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	70 d2       	rcall	.+1248   	; 0x840 <_ZN4UART10SendStringEPc>
 360:	69 e5       	ldi	r22, 0x59	; 89
	uart0.SendString("X       X       X X X                    X X X X   \n\n\n\r");
 362:	73 e0       	ldi	r23, 0x03	; 3
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	6b d2       	rcall	.+1238   	; 0x840 <_ZN4UART10SendStringEPc>
 36a:	69 e4       	ldi	r22, 0x49	; 73
	uart0.SendString("");
 36c:	72 e0       	ldi	r23, 0x02	; 2
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	66 d2       	rcall	.+1228   	; 0x840 <_ZN4UART10SendStringEPc>
 374:	61 e9       	ldi	r22, 0x91	; 145
	uart0.SendString("X       X      X X X      X        X      X X X X  \n\r");
 376:	73 e0       	ldi	r23, 0x03	; 3
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	61 d2       	rcall	.+1218   	; 0x840 <_ZN4UART10SendStringEPc>
 37e:	67 ec       	ldi	r22, 0xC7	; 199
	uart0.SendString("X       X     X     X     X X    X X      X        \n\r");
 380:	73 e0       	ldi	r23, 0x03	; 3
 382:	ce 01       	movw	r24, r28
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	5c d2       	rcall	.+1208   	; 0x840 <_ZN4UART10SendStringEPc>
 388:	6d ef       	ldi	r22, 0xFD	; 253
	uart0.SendString("X X X X X    X       X    X  X  X  X      X X X    \n\r");
 38a:	73 e0       	ldi	r23, 0x03	; 3
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	57 d2       	rcall	.+1198   	; 0x840 <_ZN4UART10SendStringEPc>
 392:	63 e3       	ldi	r22, 0x33	; 51
	uart0.SendString("X       X     X     X     X   XX   X      X        \n\r");
 394:	74 e0       	ldi	r23, 0x04	; 4
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	52 d2       	rcall	.+1188   	; 0x840 <_ZN4UART10SendStringEPc>
 39c:	61 e9       	ldi	r22, 0x91	; 145
	uart0.SendString("X       X      X X X      X        X      X X X X  \n\r");
 39e:	73 e0       	ldi	r23, 0x03	; 3
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	4d d2       	rcall	.+1178   	; 0x840 <_ZN4UART10SendStringEPc>
 3a6:	69 e6       	ldi	r22, 0x69	; 105
	uart0.SendString("__________________________________________________ \n\n\r");
 3a8:	74 e0       	ldi	r23, 0x04	; 4
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	48 d2       	rcall	.+1168   	; 0x840 <_ZN4UART10SendStringEPc>
 3b0:	60 ea       	ldi	r22, 0xA0	; 160
	uart0.SendString("Taend lys:      Tast '1'                           \n\r");
 3b2:	74 e0       	ldi	r23, 0x04	; 4
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	43 d2       	rcall	.+1158   	; 0x840 <_ZN4UART10SendStringEPc>
 3ba:	66 ed       	ldi	r22, 0xD6	; 214
	uart0.SendString("Sluk lys:       Tast '2'                           \n\r");
 3bc:	74 e0       	ldi	r23, 0x04	; 4
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	3e d2       	rcall	.+1148   	; 0x840 <_ZN4UART10SendStringEPc>
 3c4:	6c e0       	ldi	r22, 0x0C	; 12
	uart0.SendString("Rul gardin op:  Tast '3'                           \n\r");
 3c6:	75 e0       	ldi	r23, 0x05	; 5
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	39 d2       	rcall	.+1138   	; 0x840 <_ZN4UART10SendStringEPc>
 3ce:	62 e4       	ldi	r22, 0x42	; 66
	uart0.SendString("Rul gardin ned: Tast '4'                           \n\r");
 3d0:	75 e0       	ldi	r23, 0x05	; 5
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	34 d2       	rcall	.+1128   	; 0x840 <_ZN4UART10SendStringEPc>
 3d8:	68 e7       	ldi	r22, 0x78	; 120
 3da:	75 e0       	ldi	r23, 0x05	; 5
	uart0.SendString("Sluk Hjem:      Tast '5'                           \n\r");
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	2f d2       	rcall	.+1118   	; 0x840 <_ZN4UART10SendStringEPc>
 3e2:	6e ea       	ldi	r22, 0xAE	; 174
 3e4:	75 e0       	ldi	r23, 0x05	; 5
 3e6:	ce 01       	movw	r24, r28
	uart0.SendString("__________________________________________________ \n\r");
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	2a d2       	rcall	.+1108   	; 0x840 <_ZN4UART10SendStringEPc>
 3ec:	10 e3       	ldi	r17, 0x30	; 48
 3ee:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
 3f2:	81 33       	cpi	r24, 0x31	; 49
			}
			
			PORTB = PINB ^ 0b11111111;

		}
		modtaget = '0';
 3f4:	89 f0       	breq	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	/* Replace with your application code */
	while (1)
	{
		
		
		if ((modtaget == '1') || (modtaget == '2') || (modtaget == '3') || (modtaget == '4') || (modtaget == '5'))
 3f6:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
 3fa:	82 33       	cpi	r24, 0x32	; 50
 3fc:	69 f0       	breq	.+26     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fe:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
 402:	83 33       	cpi	r24, 0x33	; 51
 404:	49 f0       	breq	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 406:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
 40a:	84 33       	cpi	r24, 0x34	; 52
 40c:	29 f0       	breq	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
 412:	85 33       	cpi	r24, 0x35	; 53
 414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	fd c0       	rjmp	.+506    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 418:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
 41c:	83 33       	cpi	r24, 0x33	; 51
		{
			switch (modtaget)
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	55 c0       	rjmp	.+170    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 422:	28 f4       	brcc	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	81 33       	cpi	r24, 0x31	; 49
 426:	51 f0       	breq	.+20     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 428:	82 33       	cpi	r24, 0x32	; 50
 42a:	61 f1       	breq	.+88     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 42c:	ba c0       	rjmp	.+372    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 42e:	84 33       	cpi	r24, 0x34	; 52
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	70 c0       	rjmp	.+224    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 434:	85 33       	cpi	r24, 0x35	; 53
 436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	91 c0       	rjmp	.+290    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 43a:	b3 c0       	rjmp	.+358    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 43c:	64 ee       	ldi	r22, 0xE4	; 228
 43e:	75 e0       	ldi	r23, 0x05	; 5
			{
				case '1':
				{
					uart0.SendString("Lampen taendes.\n\r");
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	fd d1       	rcall	.+1018   	; 0x840 <_ZN4UART10SendStringEPc>
 446:	8c e0       	ldi	r24, 0x0C	; 12
 448:	e0 e1       	ldi	r30, 0x10	; 16
 44a:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {0,1,0,1,0,1};
 44c:	de 01       	movw	r26, r28
 44e:	1e 96       	adiw	r26, 0x0e	; 14
 450:	01 90       	ld	r0, Z+
 452:	0d 92       	st	X+, r0
 454:	8a 95       	dec	r24
 456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	be 01       	movw	r22, r28
 45a:	62 5f       	subi	r22, 0xF2	; 242
					master.setAdresse(adresse);
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	85 e4       	ldi	r24, 0x45	; 69
 460:	96 e0       	ldi	r25, 0x06	; 6
 462:	e9 d0       	rcall	.+466    	; 0x636 <_ZN11Transciever10setAdresseEPi>
 464:	8c e0       	ldi	r24, 0x0C	; 12
 466:	ec e1       	ldi	r30, 0x1C	; 28
					int kommando[6] = {1,0,1,0,1,0};
 468:	f2 e0       	ldi	r31, 0x02	; 2
 46a:	de 01       	movw	r26, r28
 46c:	12 96       	adiw	r26, 0x02	; 2
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 476:	be 01       	movw	r22, r28
 478:	6e 5f       	subi	r22, 0xFE	; 254
					master.setKommando(kommando);
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	85 e4       	ldi	r24, 0x45	; 69
 47e:	96 e0       	ldi	r25, 0x06	; 6
 480:	e6 d0       	rcall	.+460    	; 0x64e <_ZN11Transciever11setKommandoEPi>
 482:	8f c0       	rjmp	.+286    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 484:	66 ef       	ldi	r22, 0xF6	; 246
				}
				break;
 486:	75 e0       	ldi	r23, 0x05	; 5
				
				case '2':
				{
					uart0.SendString("Lampen slukkes\n\r");
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	d9 d1       	rcall	.+946    	; 0x840 <_ZN4UART10SendStringEPc>
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	e0 e1       	ldi	r30, 0x10	; 16
 492:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {0,1,0,1,0,1};
 494:	de 01       	movw	r26, r28
 496:	1e 96       	adiw	r26, 0x0e	; 14
 498:	01 90       	ld	r0, Z+
 49a:	0d 92       	st	X+, r0
 49c:	8a 95       	dec	r24
 49e:	e1 f7       	brne	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 4a0:	be 01       	movw	r22, r28
 4a2:	62 5f       	subi	r22, 0xF2	; 242
					master.setAdresse(adresse);
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	85 e4       	ldi	r24, 0x45	; 69
 4a8:	96 e0       	ldi	r25, 0x06	; 6
 4aa:	c5 d0       	rcall	.+394    	; 0x636 <_ZN11Transciever10setAdresseEPi>
 4ac:	8c e0       	ldi	r24, 0x0C	; 12
 4ae:	e0 e1       	ldi	r30, 0x10	; 16
 4b0:	f2 e0       	ldi	r31, 0x02	; 2
					int kommando[6] = {0,1,0,1,0,1};
 4b2:	de 01       	movw	r26, r28
 4b4:	12 96       	adiw	r26, 0x02	; 2
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	be 01       	movw	r22, r28
 4c0:	6e 5f       	subi	r22, 0xFE	; 254
					master.setKommando(kommando);
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	85 e4       	ldi	r24, 0x45	; 69
 4c6:	96 e0       	ldi	r25, 0x06	; 6
 4c8:	c2 d0       	rcall	.+388    	; 0x64e <_ZN11Transciever11setKommandoEPi>
 4ca:	6b c0       	rjmp	.+214    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 4cc:	67 e0       	ldi	r22, 0x07	; 7
 4ce:	76 e0       	ldi	r23, 0x06	; 6
				}
				break;
 4d0:	ce 01       	movw	r24, r28
				case '3':
				{
					uart0.SendString("Gardin rulles op\n\r");
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	b5 d1       	rcall	.+874    	; 0x840 <_ZN4UART10SendStringEPc>
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	e8 e2       	ldi	r30, 0x28	; 40
 4da:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {1,0,0,1,1,0};
 4dc:	de 01       	movw	r26, r28
 4de:	1e 96       	adiw	r26, 0x0e	; 14
 4e0:	01 90       	ld	r0, Z+
 4e2:	0d 92       	st	X+, r0
 4e4:	8a 95       	dec	r24
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e8:	be 01       	movw	r22, r28
 4ea:	62 5f       	subi	r22, 0xF2	; 242
					master.setAdresse(adresse);
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	85 e4       	ldi	r24, 0x45	; 69
 4f0:	96 e0       	ldi	r25, 0x06	; 6
 4f2:	a1 d0       	rcall	.+322    	; 0x636 <_ZN11Transciever10setAdresseEPi>
 4f4:	8c e0       	ldi	r24, 0x0C	; 12
 4f6:	ec e1       	ldi	r30, 0x1C	; 28
 4f8:	f2 e0       	ldi	r31, 0x02	; 2
					int kommando[6] = {1,0,1,0,1,0};
 4fa:	de 01       	movw	r26, r28
 4fc:	12 96       	adiw	r26, 0x02	; 2
 4fe:	01 90       	ld	r0, Z+
 500:	0d 92       	st	X+, r0
 502:	8a 95       	dec	r24
 504:	e1 f7       	brne	.-8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 506:	be 01       	movw	r22, r28
 508:	6e 5f       	subi	r22, 0xFE	; 254
					master.setKommando(kommando);
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	85 e4       	ldi	r24, 0x45	; 69
 50e:	96 e0       	ldi	r25, 0x06	; 6
 510:	9e d0       	rcall	.+316    	; 0x64e <_ZN11Transciever11setKommandoEPi>
 512:	47 c0       	rjmp	.+142    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 514:	6a e1       	ldi	r22, 0x1A	; 26
 516:	76 e0       	ldi	r23, 0x06	; 6
				}
				break;
 518:	ce 01       	movw	r24, r28
				case '4':
				{
					uart0.SendString("Gardin rulles ned\n\r");
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	91 d1       	rcall	.+802    	; 0x840 <_ZN4UART10SendStringEPc>
 51e:	8c e0       	ldi	r24, 0x0C	; 12
 520:	e8 e2       	ldi	r30, 0x28	; 40
 522:	f2 e0       	ldi	r31, 0x02	; 2
					int adresse[6] = {1,0,0,1,1,0};
 524:	de 01       	movw	r26, r28
 526:	1e 96       	adiw	r26, 0x0e	; 14
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 530:	be 01       	movw	r22, r28
 532:	62 5f       	subi	r22, 0xF2	; 242
					master.setAdresse(adresse);
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	85 e4       	ldi	r24, 0x45	; 69
 538:	96 e0       	ldi	r25, 0x06	; 6
 53a:	7d d0       	rcall	.+250    	; 0x636 <_ZN11Transciever10setAdresseEPi>
 53c:	8c e0       	ldi	r24, 0x0C	; 12
 53e:	e0 e1       	ldi	r30, 0x10	; 16
 540:	f2 e0       	ldi	r31, 0x02	; 2
					int kommando[6] = {0,1,0,1,0,1};
 542:	de 01       	movw	r26, r28
 544:	12 96       	adiw	r26, 0x02	; 2
 546:	01 90       	ld	r0, Z+
 548:	0d 92       	st	X+, r0
 54a:	8a 95       	dec	r24
 54c:	e1 f7       	brne	.-8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54e:	be 01       	movw	r22, r28
 550:	6e 5f       	subi	r22, 0xFE	; 254
					master.setKommando(kommando);
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	85 e4       	ldi	r24, 0x45	; 69
 556:	96 e0       	ldi	r25, 0x06	; 6
 558:	7a d0       	rcall	.+244    	; 0x64e <_ZN11Transciever11setKommandoEPi>
 55a:	23 c0       	rjmp	.+70     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 55c:	6e e2       	ldi	r22, 0x2E	; 46
 55e:	76 e0       	ldi	r23, 0x06	; 6
				}
				break;
				case '5':
				{
					uart0.SendString("Hjem lukkes ned\n\r");
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	6d d1       	rcall	.+730    	; 0x840 <_ZN4UART10SendStringEPc>
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	e8 e2       	ldi	r30, 0x28	; 40
					int adresse[6] = {1,0,0,1,1,0};
 56a:	f2 e0       	ldi	r31, 0x02	; 2
 56c:	de 01       	movw	r26, r28
 56e:	1e 96       	adiw	r26, 0x0e	; 14
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	8a 95       	dec	r24
 576:	e1 f7       	brne	.-8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
					master.setAdresse(adresse);
 578:	be 01       	movw	r22, r28
 57a:	62 5f       	subi	r22, 0xF2	; 242
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	85 e4       	ldi	r24, 0x45	; 69
 580:	96 e0       	ldi	r25, 0x06	; 6
 582:	59 d0       	rcall	.+178    	; 0x636 <_ZN11Transciever10setAdresseEPi>
					int kommando[6] = {0,1,0,1,0,1};
 584:	8c e0       	ldi	r24, 0x0C	; 12
 586:	e0 e1       	ldi	r30, 0x10	; 16
 588:	f2 e0       	ldi	r31, 0x02	; 2
 58a:	de 01       	movw	r26, r28
 58c:	12 96       	adiw	r26, 0x02	; 2
 58e:	01 90       	ld	r0, Z+
 590:	0d 92       	st	X+, r0
 592:	8a 95       	dec	r24
					master.setKommando(kommando);
 594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 596:	be 01       	movw	r22, r28
 598:	6e 5f       	subi	r22, 0xFE	; 254
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	85 e4       	ldi	r24, 0x45	; 69
 59e:	96 e0       	ldi	r25, 0x06	; 6
 5a0:	56 d0       	rcall	.+172    	; 0x64e <_ZN11Transciever11setKommandoEPi>
				}
				default:
				break;
			}
			
			master.setZeroCross(0);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	85 e4       	ldi	r24, 0x45	; 69
 5a8:	96 e0       	ldi	r25, 0x06	; 6
 5aa:	3e d0       	rcall	.+124    	; 0x628 <_ZN11Transciever12setZeroCrossEi>
			
			master.sendStartBits();
 5ac:	85 e4       	ldi	r24, 0x45	; 69
 5ae:	96 e0       	ldi	r25, 0x06	; 6
 5b0:	64 d0       	rcall	.+200    	; 0x67a <_ZN11Transciever13sendStartBitsEv>
			master.sendAdresseBits();
 5b2:	85 e4       	ldi	r24, 0x45	; 69
 5b4:	96 e0       	ldi	r25, 0x06	; 6
 5b6:	95 d0       	rcall	.+298    	; 0x6e2 <_ZN11Transciever15sendAdresseBitsEv>
			master.sendKommandoBits();
 5b8:	85 e4       	ldi	r24, 0x45	; 69
 5ba:	96 e0       	ldi	r25, 0x06	; 6
 5bc:	c5 d0       	rcall	.+394    	; 0x748 <_ZN11Transciever16sendKommandoBitsEv>
			master.sendStopBits();
 5be:	85 e4       	ldi	r24, 0x45	; 69
 5c0:	96 e0       	ldi	r25, 0x06	; 6
 5c2:	f5 d0       	rcall	.+490    	; 0x7ae <_ZN11Transciever12sendStopBitsEv>
 5c4:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__data_end>
			
			if (modtaget == '5')
 5c8:	85 33       	cpi	r24, 0x35	; 53
 5ca:	01 f5       	brne	.+64     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5cc:	60 e0       	ldi	r22, 0x00	; 0
			{
				master.setZeroCross(0);
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	85 e4       	ldi	r24, 0x45	; 69
 5d2:	96 e0       	ldi	r25, 0x06	; 6
 5d4:	29 d0       	rcall	.+82     	; 0x628 <_ZN11Transciever12setZeroCrossEi>
 5d6:	8c e0       	ldi	r24, 0x0C	; 12
 5d8:	e0 e1       	ldi	r30, 0x10	; 16
				
				int adresse[6] = {0,1,0,1,0,1};
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	de 01       	movw	r26, r28
 5de:	12 96       	adiw	r26, 0x02	; 2
 5e0:	01 90       	ld	r0, Z+
 5e2:	0d 92       	st	X+, r0
 5e4:	8a 95       	dec	r24
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5e8:	be 01       	movw	r22, r28
 5ea:	6e 5f       	subi	r22, 0xFE	; 254
				master.setAdresse(adresse);
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	85 e4       	ldi	r24, 0x45	; 69
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	21 d0       	rcall	.+66     	; 0x636 <_ZN11Transciever10setAdresseEPi>
 5f4:	85 e4       	ldi	r24, 0x45	; 69
 5f6:	96 e0       	ldi	r25, 0x06	; 6
 5f8:	40 d0       	rcall	.+128    	; 0x67a <_ZN11Transciever13sendStartBitsEv>
				master.sendStartBits();
 5fa:	85 e4       	ldi	r24, 0x45	; 69
 5fc:	96 e0       	ldi	r25, 0x06	; 6
 5fe:	71 d0       	rcall	.+226    	; 0x6e2 <_ZN11Transciever15sendAdresseBitsEv>
 600:	85 e4       	ldi	r24, 0x45	; 69
				master.sendAdresseBits();
 602:	96 e0       	ldi	r25, 0x06	; 6
 604:	a1 d0       	rcall	.+322    	; 0x748 <_ZN11Transciever16sendKommandoBitsEv>
 606:	85 e4       	ldi	r24, 0x45	; 69
 608:	96 e0       	ldi	r25, 0x06	; 6
				master.sendKommandoBits();
 60a:	d1 d0       	rcall	.+418    	; 0x7ae <_ZN11Transciever12sendStopBitsEv>
 60c:	83 b1       	in	r24, 0x03	; 3
 60e:	80 95       	com	r24
 610:	85 b9       	out	0x05, r24	; 5
				master.sendStopBits();
 612:	10 93 40 06 	sts	0x0640, r17	; 0x800640 <__data_end>
 616:	eb ce       	rjmp	.-554    	; 0x3ee <main+0xe8>

00000618 <_GLOBAL__sub_I_master>:
 618:	85 e4       	ldi	r24, 0x45	; 69
			}
			
			PORTB = PINB ^ 0b11111111;
 61a:	96 e0       	ldi	r25, 0x06	; 6
 61c:	01 c0       	rjmp	.+2      	; 0x620 <_ZN11TranscieverC1Ev>
 61e:	08 95       	ret

00000620 <_ZN11TranscieverC1Ev>:

		}
		modtaget = '0';
 620:	fc 01       	movw	r30, r24
 622:	11 82       	std	Z+1, r1	; 0x01
	uart0.SendString("Rul gardin ned: Tast '4'                           \n\r");
	uart0.SendString("Sluk Hjem:      Tast '5'                           \n\r");
	uart0.SendString("__________________________________________________ \n\r");
	
	/* Replace with your application code */
	while (1)
 624:	10 82       	st	Z, r1


int Transciever::getZeroCross()
{
	return zeroCross;
}
 626:	08 95       	ret

00000628 <_ZN11Transciever12setZeroCrossEi>:

void Transciever::setZeroCross(int x)
{
	if (x == 1 || x == 0)
 628:	62 30       	cpi	r22, 0x02	; 2
 62a:	71 05       	cpc	r23, r1
 62c:	18 f4       	brcc	.+6      	; 0x634 <_ZN11Transciever12setZeroCrossEi+0xc>
	{
		zeroCross = x;
 62e:	fc 01       	movw	r30, r24
 630:	71 83       	std	Z+1, r23	; 0x01
 632:	60 83       	st	Z, r22
 634:	08 95       	ret

00000636 <_ZN11Transciever10setAdresseEPi>:
	}
}

void Transciever::setAdresse(int array[])
{
 636:	db 01       	movw	r26, r22
 638:	fc 01       	movw	r30, r24
 63a:	32 96       	adiw	r30, 0x02	; 2
 63c:	0e 96       	adiw	r24, 0x0e	; 14
	for (int i = 0; i < 6; i++)
	{
		adresse_[i] = array[i];
 63e:	2d 91       	ld	r18, X+
 640:	3d 91       	ld	r19, X+
 642:	21 93       	st	Z+, r18
 644:	31 93       	st	Z+, r19
	}
}

void Transciever::setAdresse(int array[])
{
	for (int i = 0; i < 6; i++)
 646:	e8 17       	cp	r30, r24
 648:	f9 07       	cpc	r31, r25
 64a:	c9 f7       	brne	.-14     	; 0x63e <_ZN11Transciever10setAdresseEPi+0x8>
	{
		adresse_[i] = array[i];
	}
}
 64c:	08 95       	ret

0000064e <_ZN11Transciever11setKommandoEPi>:

void Transciever::setKommando(int array[])
{
 64e:	db 01       	movw	r26, r22
 650:	fc 01       	movw	r30, r24
 652:	3e 96       	adiw	r30, 0x0e	; 14
 654:	4a 96       	adiw	r24, 0x1a	; 26
	for (int i = 0; i < 6; i++)
	{
		kommando_[i] = array[i];
 656:	2d 91       	ld	r18, X+
 658:	3d 91       	ld	r19, X+
 65a:	21 93       	st	Z+, r18
 65c:	31 93       	st	Z+, r19
	}
}

void Transciever::setKommando(int array[])
{
	for (int i = 0; i < 6; i++)
 65e:	e8 17       	cp	r30, r24
 660:	f9 07       	cpc	r31, r25
 662:	c9 f7       	brne	.-14     	; 0x656 <_ZN11Transciever11setKommandoEPi+0x8>
	{
		kommando_[i] = array[i];
	}
}
 664:	08 95       	ret

00000666 <_ZN11Transciever13start1msDelayEv>:
	}
}

void Transciever::start1msDelay()
{
	TCNT0 = 240;
 666:	80 ef       	ldi	r24, 0xF0	; 240
 668:	86 bd       	out	0x26, r24	; 38
	TCCR0A |= 0b00000000;
 66a:	84 b5       	in	r24, 0x24	; 36
 66c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0b00000101;
 66e:	85 b5       	in	r24, 0x25	; 37
 670:	85 60       	ori	r24, 0x05	; 5
 672:	85 bd       	out	0x25, r24	; 37
	while ((TIFR0 & (1<<0)) == 0)
 674:	a8 9b       	sbis	0x15, 0	; 21
 676:	fe cf       	rjmp	.-4      	; 0x674 <_ZN11Transciever13start1msDelayEv+0xe>
	{}
}
 678:	08 95       	ret

0000067a <_ZN11Transciever13sendStartBitsEv>:
		kommando_[i] = array[i];
	}
}

void Transciever::sendStartBits()
{
 67a:	df 92       	push	r13
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	ec 01       	movw	r28, r24
 68a:	08 e0       	ldi	r16, 0x08	; 8
 68c:	12 e0       	ldi	r17, 0x02	; 2
 68e:	0f 2e       	mov	r0, r31
 690:	f0 e1       	ldi	r31, 0x10	; 16
 692:	ef 2e       	mov	r14, r31
 694:	f2 e0       	ldi	r31, 0x02	; 2
 696:	ff 2e       	mov	r15, r31
 698:	f0 2d       	mov	r31, r0
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 69a:	dd 24       	eor	r13, r13
 69c:	d3 94       	inc	r13

void Transciever::sendStartBits()
{
	for (int i = 0; i < 4; i++)
	{
		while (zeroCross==0)
 69e:	88 81       	ld	r24, Y
 6a0:	99 81       	ldd	r25, Y+1	; 0x01
 6a2:	89 2b       	or	r24, r25
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <_ZN11Transciever13sendStartBitsEv+0x3a>
		{PORTB = PINB | 0b00000001;}
 6a6:	83 b1       	in	r24, 0x03	; 3
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	85 b9       	out	0x05, r24	; 5

void Transciever::sendStartBits()
{
	for (int i = 0; i < 4; i++)
	{
		while (zeroCross==0)
 6ac:	88 81       	ld	r24, Y
 6ae:	99 81       	ldd	r25, Y+1	; 0x01
 6b0:	89 2b       	or	r24, r25
 6b2:	c9 f3       	breq	.-14     	; 0x6a6 <_ZN11Transciever13sendStartBitsEv+0x2c>
		{PORTB = PINB | 0b00000001;}
		PORTC = startbit_[i];
 6b4:	f8 01       	movw	r30, r16
 6b6:	80 81       	ld	r24, Z
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	88 b9       	out	0x08, r24	; 8
		start1msDelay();
 6be:	ce 01       	movw	r24, r28
 6c0:	d2 df       	rcall	.-92     	; 0x666 <_ZN11Transciever13start1msDelayEv>
		PORTC = 0;
 6c2:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
 6c4:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 6c6:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00000001;}
		PORTC = startbit_[i];
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
 6c8:	19 82       	std	Y+1, r1	; 0x01
 6ca:	18 82       	st	Y, r1
	}
}

void Transciever::sendStartBits()
{
	for (int i = 0; i < 4; i++)
 6cc:	0e 15       	cp	r16, r14
 6ce:	1f 05       	cpc	r17, r15
 6d0:	31 f7       	brne	.-52     	; 0x69e <_ZN11Transciever13sendStartBitsEv+0x24>
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
	}
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	ff 90       	pop	r15
 6dc:	ef 90       	pop	r14
 6de:	df 90       	pop	r13
 6e0:	08 95       	ret

000006e2 <_ZN11Transciever15sendAdresseBitsEv>:


void Transciever::sendAdresseBits()
{
 6e2:	df 92       	push	r13
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
 6f2:	8c 01       	movw	r16, r24
 6f4:	0e 5f       	subi	r16, 0xFE	; 254
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	7c 01       	movw	r14, r24
 6fa:	8e e0       	ldi	r24, 0x0E	; 14
 6fc:	e8 0e       	add	r14, r24
 6fe:	f1 1c       	adc	r15, r1
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 700:	dd 24       	eor	r13, r13
 702:	d3 94       	inc	r13

void Transciever::sendAdresseBits()
{
	for (int i = 0; i < 6; i++)
	{
		while (zeroCross==0)
 704:	88 81       	ld	r24, Y
 706:	99 81       	ldd	r25, Y+1	; 0x01
 708:	89 2b       	or	r24, r25
 70a:	39 f4       	brne	.+14     	; 0x71a <_ZN11Transciever15sendAdresseBitsEv+0x38>
		{PORTB = PINB | 0b00000010;}
 70c:	83 b1       	in	r24, 0x03	; 3
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	85 b9       	out	0x05, r24	; 5

void Transciever::sendAdresseBits()
{
	for (int i = 0; i < 6; i++)
	{
		while (zeroCross==0)
 712:	88 81       	ld	r24, Y
 714:	99 81       	ldd	r25, Y+1	; 0x01
 716:	89 2b       	or	r24, r25
 718:	c9 f3       	breq	.-14     	; 0x70c <_ZN11Transciever15sendAdresseBitsEv+0x2a>
		{PORTB = PINB | 0b00000010;}
		PORTC = adresse_[i];
 71a:	f8 01       	movw	r30, r16
 71c:	80 81       	ld	r24, Z
 71e:	0e 5f       	subi	r16, 0xFE	; 254
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	88 b9       	out	0x08, r24	; 8
		start1msDelay();
 724:	ce 01       	movw	r24, r28
 726:	9f df       	rcall	.-194    	; 0x666 <_ZN11Transciever13start1msDelayEv>
		PORTC = 0;
 728:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
 72a:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 72c:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00000010;}
		PORTC = adresse_[i];
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
 72e:	19 82       	std	Y+1, r1	; 0x01
 730:	18 82       	st	Y, r1
}


void Transciever::sendAdresseBits()
{
	for (int i = 0; i < 6; i++)
 732:	0e 15       	cp	r16, r14
 734:	1f 05       	cpc	r17, r15
 736:	31 f7       	brne	.-52     	; 0x704 <_ZN11Transciever15sendAdresseBitsEv+0x22>
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
	}
}
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	df 90       	pop	r13
 746:	08 95       	ret

00000748 <_ZN11Transciever16sendKommandoBitsEv>:
	
void Transciever::sendKommandoBits()
{
 748:	df 92       	push	r13
 74a:	ef 92       	push	r14
 74c:	ff 92       	push	r15
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	ec 01       	movw	r28, r24
 758:	8c 01       	movw	r16, r24
 75a:	02 5f       	subi	r16, 0xF2	; 242
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	7c 01       	movw	r14, r24
 760:	8a e1       	ldi	r24, 0x1A	; 26
 762:	e8 0e       	add	r14, r24
 764:	f1 1c       	adc	r15, r1
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 766:	dd 24       	eor	r13, r13
 768:	d3 94       	inc	r13
	
void Transciever::sendKommandoBits()
{
	for (int i = 0; i < 6; i++)
	{
		while (zeroCross==0)
 76a:	88 81       	ld	r24, Y
 76c:	99 81       	ldd	r25, Y+1	; 0x01
 76e:	89 2b       	or	r24, r25
 770:	39 f4       	brne	.+14     	; 0x780 <_ZN11Transciever16sendKommandoBitsEv+0x38>
		{PORTB = PINB | 0b00000100;}
 772:	83 b1       	in	r24, 0x03	; 3
 774:	84 60       	ori	r24, 0x04	; 4
 776:	85 b9       	out	0x05, r24	; 5
	
void Transciever::sendKommandoBits()
{
	for (int i = 0; i < 6; i++)
	{
		while (zeroCross==0)
 778:	88 81       	ld	r24, Y
 77a:	99 81       	ldd	r25, Y+1	; 0x01
 77c:	89 2b       	or	r24, r25
 77e:	c9 f3       	breq	.-14     	; 0x772 <_ZN11Transciever16sendKommandoBitsEv+0x2a>
		{PORTB = PINB | 0b00000100;}
		PORTC = kommando_[i];
 780:	f8 01       	movw	r30, r16
 782:	80 81       	ld	r24, Z
 784:	0e 5f       	subi	r16, 0xFE	; 254
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	88 b9       	out	0x08, r24	; 8
		start1msDelay();
 78a:	ce 01       	movw	r24, r28
 78c:	6c df       	rcall	.-296    	; 0x666 <_ZN11Transciever13start1msDelayEv>
		PORTC = 0;
 78e:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
 790:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 792:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00000100;}
		PORTC = kommando_[i];
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
 794:	19 82       	std	Y+1, r1	; 0x01
 796:	18 82       	st	Y, r1
	}
}
	
void Transciever::sendKommandoBits()
{
	for (int i = 0; i < 6; i++)
 798:	0e 15       	cp	r16, r14
 79a:	1f 05       	cpc	r17, r15
 79c:	31 f7       	brne	.-52     	; 0x76a <_ZN11Transciever16sendKommandoBitsEv+0x22>
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
	}
}
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	ff 90       	pop	r15
 7a8:	ef 90       	pop	r14
 7aa:	df 90       	pop	r13
 7ac:	08 95       	ret

000007ae <_ZN11Transciever12sendStopBitsEv>:

void Transciever::sendStopBits()
{
 7ae:	df 92       	push	r13
 7b0:	ef 92       	push	r14
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	ec 01       	movw	r28, r24
 7be:	00 e0       	ldi	r16, 0x00	; 0
 7c0:	12 e0       	ldi	r17, 0x02	; 2
 7c2:	0f 2e       	mov	r0, r31
 7c4:	f8 e0       	ldi	r31, 0x08	; 8
 7c6:	ef 2e       	mov	r14, r31
 7c8:	f2 e0       	ldi	r31, 0x02	; 2
 7ca:	ff 2e       	mov	r15, r31
 7cc:	f0 2d       	mov	r31, r0
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
	TIFR0 = 0b00000001;
 7ce:	dd 24       	eor	r13, r13
 7d0:	d3 94       	inc	r13

void Transciever::sendStopBits()
{
	for (int i = 0; i < 4; i++)
	{
		while (zeroCross==0)
 7d2:	88 81       	ld	r24, Y
 7d4:	99 81       	ldd	r25, Y+1	; 0x01
 7d6:	89 2b       	or	r24, r25
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <_ZN11Transciever12sendStopBitsEv+0x3a>
		{PORTB = PINB | 0b00001000;}
 7da:	83 b1       	in	r24, 0x03	; 3
 7dc:	88 60       	ori	r24, 0x08	; 8
 7de:	85 b9       	out	0x05, r24	; 5

void Transciever::sendStopBits()
{
	for (int i = 0; i < 4; i++)
	{
		while (zeroCross==0)
 7e0:	88 81       	ld	r24, Y
 7e2:	99 81       	ldd	r25, Y+1	; 0x01
 7e4:	89 2b       	or	r24, r25
 7e6:	c9 f3       	breq	.-14     	; 0x7da <_ZN11Transciever12sendStopBitsEv+0x2c>
		{PORTB = PINB | 0b00001000;}
		PORTC = stopbit_[i];
 7e8:	f8 01       	movw	r30, r16
 7ea:	80 81       	ld	r24, Z
 7ec:	0e 5f       	subi	r16, 0xFE	; 254
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	88 b9       	out	0x08, r24	; 8
		start1msDelay();
 7f2:	ce 01       	movw	r24, r28
 7f4:	38 df       	rcall	.-400    	; 0x666 <_ZN11Transciever13start1msDelayEv>
		PORTC = 0;
 7f6:	18 b8       	out	0x08, r1	; 8
	{}
}

void Transciever::stop1msDelay()
{
	TCCR0B = 0b00000000;
 7f8:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0b00000001;
 7fa:	d5 ba       	out	0x15, r13	; 21
		{PORTB = PINB | 0b00001000;}
		PORTC = stopbit_[i];
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
 7fc:	19 82       	std	Y+1, r1	; 0x01
 7fe:	18 82       	st	Y, r1
	}
}

void Transciever::sendStopBits()
{
	for (int i = 0; i < 4; i++)
 800:	0e 15       	cp	r16, r14
 802:	1f 05       	cpc	r17, r15
 804:	31 f7       	brne	.-52     	; 0x7d2 <_ZN11Transciever12sendStopBitsEv+0x24>
		start1msDelay();
		PORTC = 0;
		stop1msDelay();
		zeroCross = 0;
	}
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	08 95       	ret

00000816 <_ZN4UARTC1Ev>:
#include "UART.h"

// default constructor
UART::UART()
{
	UCSR0B = 0b10011000;			// Tænder for sender og modtager + enabler interupt ved modtagelse
 816:	88 e9       	ldi	r24, 0x98	; 152
 818:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;					// Værdien gør at baud raten er 9600
 81c:	87 e6       	ldi	r24, 0x67	; 103
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 824:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0C = 0b00000110;			// bit 0 gør ingenting
 828:	86 e0       	ldi	r24, 0x06	; 6
 82a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 82e:	08 95       	ret

00000830 <_ZN4UART8SendCharEc>:
									
} //UART

void UART::SendChar(char Tegn)
{
	while((0b00100000 & UCSR0A) == 0)
 830:	e0 ec       	ldi	r30, 0xC0	; 192
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	85 ff       	sbrs	r24, 5
 838:	fd cf       	rjmp	.-6      	; 0x834 <_ZN4UART8SendCharEc+0x4>
	{}
	UDR0 = Tegn;
 83a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 83e:	08 95       	ret

00000840 <_ZN4UART10SendStringEPc>:
}

void UART::SendString(char* Streng)
{
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	eb 01       	movw	r28, r22
	while (*Streng != 0)
 84a:	68 81       	ld	r22, Y
 84c:	66 23       	and	r22, r22
 84e:	39 f0       	breq	.+14     	; 0x85e <_ZN4UART10SendStringEPc+0x1e>
 850:	8c 01       	movw	r16, r24
 852:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*Streng);
 854:	c8 01       	movw	r24, r16
 856:	ec df       	rcall	.-40     	; 0x830 <_ZN4UART8SendCharEc>
	UDR0 = Tegn;
}

void UART::SendString(char* Streng)
{
	while (*Streng != 0)
 858:	69 91       	ld	r22, Y+
 85a:	61 11       	cpse	r22, r1
 85c:	fb cf       	rjmp	.-10     	; 0x854 <_ZN4UART10SendStringEPc+0x14>
	{
		SendChar(*Streng);
		Streng++;
	}
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <__tablejump2__>:
 868:	ee 0f       	add	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	88 1f       	adc	r24, r24
 86e:	8b bf       	out	0x3b, r24	; 59
 870:	07 90       	elpm	r0, Z+
 872:	f6 91       	elpm	r31, Z
 874:	e0 2d       	mov	r30, r0
 876:	19 94       	eijmp

00000878 <_exit>:
 878:	f8 94       	cli

0000087a <__stop_program>:
 87a:	ff cf       	rjmp	.-2      	; 0x87a <__stop_program>
